<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://hwchen.top/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://hwchen.top/</id>
  <title>Ahzy</title>
  <subtitle>Ahzyの小站</subtitle>
  <icon>https://hwchen.top/pwa/512.png</icon>
  <logo>https://hwchen.top/pwa/72.png</logo>
  <updated>2024-12-25T16:04:48.287Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://hwchen.top/atom.xml"/>
  <link rel="alternate" href="https://hwchen.top/"/>
  <category term="日常"/>
  <category term="为人处事"/>
  <category term="优质文章收录"/>
  <contributor>
    <name>Ahzy</name>
  </contributor>
  <entry>
    <title type="text">王者-再见</title>
    <id>https://hwchen.top/floatinglife/iter/20241224.html</id>
    <link href="https://hwchen.top/floatinglife/iter/20241224.html"/>
    <updated>2024-12-25T16:04:48.291Z</updated>
    <summary type="html"><![CDATA[<br>
<p>想起初次与&lt;王者荣耀&gt;的邂逅，大致是在小学时期。那时候懵懵懂懂的我们，总趁下课时分相聚一块，激情探讨每个英雄的技能，接着各抒己见，研究某个英雄所谓最合适的出装。
大家众说纷纭，相互争执，这段时期我们对游戏的理解可谓达到 ”登峰造极“ 的状态。</p>
<figure><figcaption></figcaption></figure>
<p>上了初中，我无形中接触到各式各样的游戏，可是还未曾发现有一款像王者荣耀般广为人知。那会的我和最好的朋友上了同一个补习班，我们一起去上课，一起回家，心血来潮了就上号开黑，
这段时光可能是我人生中最快乐的时刻。</p>
<figure><figcaption></figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<br>
<p>想起初次与&lt;王者荣耀&gt;的邂逅，大致是在小学时期。那时候懵懵懂懂的我们，总趁下课时分相聚一块，激情探讨每个英雄的技能，接着各抒己见，研究某个英雄所谓最合适的出装。
大家众说纷纭，相互争执，这段时期我们对游戏的理解可谓达到 ”登峰造极“ 的状态。</p>
<figure><figcaption></figcaption></figure>
<p>上了初中，我无形中接触到各式各样的游戏，可是还未曾发现有一款像王者荣耀般广为人知。那会的我和最好的朋友上了同一个补习班，我们一起去上课，一起回家，心血来潮了就上号开黑，
这段时光可能是我人生中最快乐的时刻。</p>
<figure><figcaption></figcaption></figure>
<p>截至目前，这款游戏我反反复复安装下载次数不下于200+次，原因很简单，无非临考试前物理抑制一下自己贪玩的想法，过不久又下载回来。可是今天，我想与这款游戏做一个真正的了断。</p>
<p>原因如下：</p>
<ol>
<li>
<p>王者荣耀的更新速度匹配不上我的游戏时长，英雄机制的更改、装备的迭代过快，增大了我的学习成本与负担</p>
</li>
<li>
<p>由于种种压力，与朋友开黑时无法找回年少时的激情与感觉</p>
</li>
<li>
<p>游戏环境的日益恶劣，语言暴力在游戏中展现的淋漓尽致</p>
</li>
<li>
<p>氪金项目逐渐多元化，不仅局限在游戏皮肤，更囊括了按键、灵宝。。。</p>
</li>
<li>
<p>技术水平拉跨</p>
</li>
</ol>
<p>其实我可以抛开前面4点，因为最后一点才是我退游的内核原因。</p>
<p>为此我决定完成人生最后一把王者，以纪念这10多年来的青春。</p>
<figure><figcaption></figcaption></figure>
<p>我真的***的，玩个瑶真就黏在打野身上了。。</p>
<p>至此已绝。</p>
<div style="text-align:right">
<p>2024年12月24日</p>
</div>
]]></content>
    <category term="日常"/>
    <published>2024-12-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">组织行为学考试有感</title>
    <id>https://hwchen.top/floatinglife/iter/20241220.html</id>
    <link href="https://hwchen.top/floatinglife/iter/20241220.html"/>
    <updated>2024-12-25T16:04:48.298Z</updated>
    <summary type="html"><![CDATA[<br>
<p>今天刚结束了组织行为学的开卷考试，内心五味杂陈。</p>
<p>当我意识到这门课需要考试的时候，距离考试时间仅仅不到一个礼拜。心想着还有这么久才考试，内心丝毫没有泛起半分波澜。待我专心到其他事情的时候，考试的消息早已在脑海中云消雾散。
当我第二次想起考试的时候，是因为那浓厚的备考环境--只要是舍友安静地一如反常钉地在椅子上的时候，那便是到了考试前夕。</p>
<p>本场考试为开卷考试，虽说是只能带一张A4纸进考场，但这冥冥中给我带来了无比庞大的自信。匆忙之下，我向学姐讨到一份笔记，足足4页 小六 字体的文档笔记，囊括了马工程组织行为学中
271页，十个章节的内容（注明：书不一定为正版，页数有误差属于正常波动范围中），硬生生的被缩印成两面A4纸的备考宝典。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<p>今天刚结束了组织行为学的开卷考试，内心五味杂陈。</p>
<p>当我意识到这门课需要考试的时候，距离考试时间仅仅不到一个礼拜。心想着还有这么久才考试，内心丝毫没有泛起半分波澜。待我专心到其他事情的时候，考试的消息早已在脑海中云消雾散。
当我第二次想起考试的时候，是因为那浓厚的备考环境--只要是舍友安静地一如反常钉地在椅子上的时候，那便是到了考试前夕。</p>
<p>本场考试为开卷考试，虽说是只能带一张A4纸进考场，但这冥冥中给我带来了无比庞大的自信。匆忙之下，我向学姐讨到一份笔记，足足4页 小六 字体的文档笔记，囊括了马工程组织行为学中
271页，十个章节的内容（注明：书不一定为正版，页数有误差属于正常波动范围中），硬生生的被缩印成两面A4纸的备考宝典。</p>
<figure><figcaption></figcaption></figure>
<p>自然的，这么多的内容，学肯定是学不下去的，我没有强迫自己，只是睡前大体看了下每块内容的标题吧。仅仅是这般功夫，那一晚我睡得极其踏实。</p>
<p>直到我考试的时候，我依旧未曾拿出过该笔记。事已至此，既然我没学过这门课，况且又不了解考试的题目，那么背答案这条路估计是走不通了。这就可以引出我的一个全新的学习理念--
<strong>以考促学</strong>，通过题目，我从笔记中寻找答案的学习模式，在一定程度上降低了我这门课的挂科率，让我在短短两个小时的考试时间（注明：这也是黄金的两个钟，这不简单是因为我不可能走神，
更是因为其他时间我大概率是不可能会去学的）， 学习到该学期老师讲了些什么玩意。</p>
<p>有人曾和我讲过，每场考试就像众多钥匙中的一把，只有和你的目标方向一样时才会有用，如果你要开的锁压根就不需要这把钥匙，那我们多费的这些气力又有什么意义呢？</p>
<p>试后有感而发。</p>
<div style="text-align:right">
<p>2024年12月20日</p>
</div>
]]></content>
    <category term="日常"/>
    <published>2024-12-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">结构设计大赛</title>
    <id>https://hwchen.top/floatinglife/iter/20241217.html</id>
    <link href="https://hwchen.top/floatinglife/iter/20241217.html"/>
    <updated>2024-12-25T16:04:48.300Z</updated>
    <summary type="html"><![CDATA[<br>
<p>朋友邀请我参与了大学中第一次的比赛，现对其进行简单的复盘。赛题如文档所示：</p>
<p><a href="./img/%E4%BA%94%E9%82%91%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%B1%8A%E7%A7%91%E6%8A%80%E5%AD%A6%E6%9C%AF%E5%AD%A3%E6%9A%A8%E5%9C%9F%E6%9C%A8%E5%BB%BA%E7%AD%91%E5%AD%A6%E9%99%A2%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%B1%8A%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%E5%85%B4%E8%B6%A3%E7%BB%84%E8%B5%9B%E9%A2%98.pdf">结构设计大赛题目</a></p>]]></summary>
    <content type="html"><![CDATA[<br>
<p>朋友邀请我参与了大学中第一次的比赛，现对其进行简单的复盘。赛题如文档所示：</p>
<p><a href="./img/%E4%BA%94%E9%82%91%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%B1%8A%E7%A7%91%E6%8A%80%E5%AD%A6%E6%9C%AF%E5%AD%A3%E6%9A%A8%E5%9C%9F%E6%9C%A8%E5%BB%BA%E7%AD%91%E5%AD%A6%E9%99%A2%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%B1%8A%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%E5%85%B4%E8%B6%A3%E7%BB%84%E8%B5%9B%E9%A2%98.pdf">结构设计大赛题目</a></p>
<p>参加第一场线下会议的时候，我看到赛题的时候是有点手足无措的感觉，图片画的是什么玩意？规避区，榫卯结构，吊索.....
前半段时间，朋友们讨论的热火朝天，我却将所有精力投掷于弄清他们究竟在讨论什么。不到两个钟，我刚回过神，朋友已然确定好我们所要制作模型的大体方向，以及制作工艺和分工。</p>
<p>以下是组内大哥设计出来的结构模型以及相关参数</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>动工的头一天，我们把木条磨来磨去，一开始的几根方杆，我们需要花费半个小时以上才能做出一件成品。
第一天转瞬即逝，台面是一片混乱的，进度是丝毫没有的。</p>
<figure><figcaption></figcaption></figure>
<p>熟能生巧，接下来的几天里，我们如坐针毡，在不断的磨合中，逐渐熟悉了制作工艺和结构参数。熟练后，自然而然会开始飘了，结果那自然就是，杆的连接处歪七八扭，
手被牢牢黏在木条上(当晚洗个半小时澡勉强洗去)..... 在此过程中，我们时常因为考虑不周，导致拆解复工(因为桥面整个模型是用502粘黏的，频繁的拆解会导致木片光滑不易粘黏，
甚至可能严重损坏桥体)</p>
<p>工艺的东西，既费时也费力，就这样我们浑浑噩噩的度过了漫长的一个礼拜，熬进了初赛。</p>
<figure><figcaption></figcaption></figure>
<p>初赛进行的十分顺利，不过就是爆了根装备，无伤大雅。初赛已过，我们对模型充满信心，将模型拿回去后进行了优化，将没用的部分全部去掉，减轻重量，并在需要的地方进行第N次加固。</p>
<p>模型经历了惨绝人寰的折腾后，在决赛场地留下他最后一副照片，他经受住载荷与撞击！！(我们用了三份材料的量，一根方杆堆8片木条，承受不了就废了)</p>
<figure><figcaption></figcaption></figure>
<p>此次比赛，我们实现了最初组内定下的目标（稳中求稳，能过就行），虽说因为料堆得太猛没有拿到很高的名次，但是夜以继日赶工的日子给我们留下的却是一段难以忘却的经历。
做一件事情只顾眼前不考虑下一步给我们带来的窘迫同样深深启迪了我们，做事不规划好，做再多也是白做。</p>
<div style="text-align:right">
<p>2024年12月17日</p>
</div>
]]></content>
    <category term="日常"/>
    <published>2024-12-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">关于java的一些报错</title>
    <id>https://hwchen.top/floatinglife/question/java.html</id>
    <link href="https://hwchen.top/floatinglife/question/java.html"/>
    <updated>2024-12-25T16:04:48.303Z</updated>
    <summary type="html"><![CDATA[<br>
<h2>1.关于 mysql 初始化异常</h2>
<p>
<br>
有时候，你在网课的学习过程中，会遇到一些报错，比如上图所示的错误，这时候一瞬间你可能会对这个世界充满震惊，你可能在心里会问自己凭什么自己复现了一次代码可就是无法成功运行呢？</p>
<p>一开始，我看到是关于mysql的初始化异常，我第一时间想到的是去 <code>property</code> 文件中检查，检查自己配置是否正确，经过反复检查无误后，我再次运行代码，发现还是无法成功运行。
此时，我就将示例的代码拷贝一份去运行，发现示例代码都跑不起来？？？这时候，我们就要意识到要去考虑版本之间的差异与冲突了。经过上网一番折腾，最终确定下来，发现自己的 MYSQL 版本是8.0版本的，
而 <code>mysql-connector-java</code> 的 <code>jar包</code> 版本却是资料提供的 5.0 版本，与本地 mysql 版本不兼容导致的异常，此刻，悬着的心终于死了，就这费我一个钟去查问题？？？
吃一堑长一智，以后要多注意一些细节的问题。
<br>
最后，使用高版本的 mysql 需要将原本的 <code>driverClassName=com.mysql.jdbc.Driver</code> 修改为 <code>driverClassName=com.mysql.cj.jdbc.Driver</code>。问题解决。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<h2>1.关于 mysql 初始化异常</h2>
<p>
<br>
有时候，你在网课的学习过程中，会遇到一些报错，比如上图所示的错误，这时候一瞬间你可能会对这个世界充满震惊，你可能在心里会问自己凭什么自己复现了一次代码可就是无法成功运行呢？</p>
<p>一开始，我看到是关于mysql的初始化异常，我第一时间想到的是去 <code>property</code> 文件中检查，检查自己配置是否正确，经过反复检查无误后，我再次运行代码，发现还是无法成功运行。
此时，我就将示例的代码拷贝一份去运行，发现示例代码都跑不起来？？？这时候，我们就要意识到要去考虑版本之间的差异与冲突了。经过上网一番折腾，最终确定下来，发现自己的 MYSQL 版本是8.0版本的，
而 <code>mysql-connector-java</code> 的 <code>jar包</code> 版本却是资料提供的 5.0 版本，与本地 mysql 版本不兼容导致的异常，此刻，悬着的心终于死了，就这费我一个钟去查问题？？？
吃一堑长一智，以后要多注意一些细节的问题。
<br>
最后，使用高版本的 mysql 需要将原本的 <code>driverClassName=com.mysql.jdbc.Driver</code> 修改为 <code>driverClassName=com.mysql.cj.jdbc.Driver</code>。问题解决。</p>
<h2>2.关于 IDEA 显示问题</h2>
<p><br>
<br>
出现侧边栏不显示 git 提交的问题，在设置中做出如图所示的设置即可。</p>
]]></content>
    <published>2024-12-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">曾仕强亲授</title>
    <id>https://hwchen.top/floatinglife/tool/renqing.html</id>
    <link href="https://hwchen.top/floatinglife/tool/renqing.html"/>
    <updated>2024-12-25T16:04:48.309Z</updated>
    <summary type="html"><![CDATA[<br>
<h2>一、矛盾</h2>
<p>先说先死，不说也死。</p>
<p><strong>中国人讲 yes 有 no 的成分，讲 no 有 yes 的成分。</strong></p>
<p>应约的处理，先说能来，后说不能来，起码有来的意思。先说不能来，后说能来，给人惊讶，有诚意。</p>
<p>嫌货才是买货人。</p>
<p>沟通要让对方做最后决定。</p>
<p>人不对不说，时不对不说。</p>
<p>人不可欺骗别人，但可隐瞒别人。</p>
<p>某些情况可借助他人，制造舆论，消除怀疑。</p>
<p><strong>说话的目的：说出事物、坦诚表达感情、建立关系、进行企图。</strong></p>]]></summary>
    <content type="html"><![CDATA[<br>
<h2>一、矛盾</h2>
<p>先说先死，不说也死。</p>
<p><strong>中国人讲 yes 有 no 的成分，讲 no 有 yes 的成分。</strong></p>
<p>应约的处理，先说能来，后说不能来，起码有来的意思。先说不能来，后说能来，给人惊讶，有诚意。</p>
<p>嫌货才是买货人。</p>
<p>沟通要让对方做最后决定。</p>
<p>人不对不说，时不对不说。</p>
<p>人不可欺骗别人，但可隐瞒别人。</p>
<p>某些情况可借助他人，制造舆论，消除怀疑。</p>
<p><strong>说话的目的：说出事物、坦诚表达感情、建立关系、进行企图。</strong></p>
<p>谈紧急重要的事，要先口头说清楚后，才补材料。</p>
]]></content>
    <author>
      <name>Ahzy</name>
    </author>
    <category term="为人处事"/>
    <contributor>
      <name>Ahzy</name>
    </contributor>
    <published>2024-12-10T00:00:00.000Z</published>
    <rights>Copyright by Ahzy</rights>
  </entry>
  <entry>
    <title type="text">关于hope主题的一些报错原因</title>
    <id>https://hwchen.top/floatinglife/question/hope.html</id>
    <link href="https://hwchen.top/floatinglife/question/hope.html"/>
    <updated>2024-12-25T16:04:48.310Z</updated>
    <summary type="html"><![CDATA[<br>
<h2>1.关于<code>setAttribute</code>报错</h2>
<p>
在 markdown 编写文本的过程中，如果文本中包含特殊字符，比如 <code>{}</code> 等，在转化为 html 的时候会被认为设置了一个属性，然而我们并未设置这个属性和类型，该值赋给谁❓，进而产生这个报错。</p>
<p>在解决该类问题时，一般才用了用代码行包裹的形式，因为hope不会编译代码行、代码块中的内容。</p>
<h2>2.关于<code>YAML</code>报错</h2>
<p>
在配置 Frontmatter 的时候，使用了ai，一直 </p>
<p>在解决该类问题时，只需正确配置好相关Frontmatter即可。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<h2>1.关于<code>setAttribute</code>报错</h2>
<p>
在 markdown 编写文本的过程中，如果文本中包含特殊字符，比如 <code>{}</code> 等，在转化为 html 的时候会被认为设置了一个属性，然而我们并未设置这个属性和类型，该值赋给谁❓，进而产生这个报错。</p>
<p>在解决该类问题时，一般才用了用代码行包裹的形式，因为hope不会编译代码行、代码块中的内容。</p>
<h2>2.关于<code>YAML</code>报错</h2>
<p>
在配置 Frontmatter 的时候，使用了ai，一直 </p>
<p>在解决该类问题时，只需正确配置好相关Frontmatter即可。</p>
]]></content>
    <published>2024-11-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">关于我</title>
    <id>https://hwchen.top/info/aboutme.html</id>
    <link href="https://hwchen.top/info/aboutme.html"/>
    <updated>2024-12-25T16:04:48.313Z</updated>
    <published>2024-11-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">关于本站</title>
    <id>https://hwchen.top/info/web.html</id>
    <link href="https://hwchen.top/info/web.html"/>
    <updated>2024-12-25T16:04:48.313Z</updated>
    <published>2024-11-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">可乐鸡翅</title>
    <id>https://hwchen.top/floatinglife/cooker/chicken.html</id>
    <link href="https://hwchen.top/floatinglife/cooker/chicken.html"/>
    <updated>2024-12-25T16:04:48.313Z</updated>
    <summary type="html"><![CDATA[<br>
<h2>用料</h2>
<blockquote>
<p>鸡翅  12个</p>
<p>油   少许</p>
<p>可口可乐 1罐</p>
<p>姜   3片</p>
<p>盐  1克左右</p>
<p>啤酒   2汤勺</p>
<p>生抽  1汤勺</p>
<p>老抽  小半汤勺</p>
<p>熟白芝麻  少许</p>
</blockquote>
<h2>步骤</h2>
<p>鸡翅洗净背面划二刀，方便入味，伱要真懒，也可以不划(−_−＃)</p>
<p>锅里放冷水、鸡翅、二片姜，煮开。</p>
<p>准备一罐可乐，另一片姜切丝。</p>
<p>水开后煮二分钟左右，捞出洗净备用。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<h2>用料</h2>
<blockquote>
<p>鸡翅  12个</p>
<p>油   少许</p>
<p>可口可乐 1罐</p>
<p>姜   3片</p>
<p>盐  1克左右</p>
<p>啤酒   2汤勺</p>
<p>生抽  1汤勺</p>
<p>老抽  小半汤勺</p>
<p>熟白芝麻  少许</p>
</blockquote>
<h2>步骤</h2>
<p>鸡翅洗净背面划二刀，方便入味，伱要真懒，也可以不划(−_−＃)</p>
<p>锅里放冷水、鸡翅、二片姜，煮开。</p>
<p>准备一罐可乐，另一片姜切丝。</p>
<p>水开后煮二分钟左右，捞出洗净备用。</p>
<p>锅里放少许油，把洗净控干水分的鸡翅放下去煎香。</p>
<p>二面都煎好后放入生姜丝和啤酒，炒出香味，啤酒汁略微收干了，木有啤酒的可以用一勺料酒代替。</p>
<p>放入一汤勺的生抽，小半汤勺的老抽，翻炒均匀上色。</p>
<p>倒入可乐，烧开后转中火，盖上锅盖焖。</p>
<p>焖至一半汁时，加入盐，开大火收汁，收到自己喜欢的程度就好。</p>
<p>装盘，撒上熟白芝麻，一定要不停的搅拌，很容易糊。</p>
<h2>可乐鸡翅的小贴士</h2>
<p>锅用不粘锅比较好操作. 可以薄薄刷一层油就行. 鸡翅自身含的油脂是挺高的. 其实汤汁不要收干. 多留一些还是比较好的. 好像除了收汁时. 要不停搅拌. 没啥需要注意的.</p>
<p><strong>成品</strong></p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="优质文章收录"/>
    <published>2024-10-31T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">憩 · 蕾</title>
    <id>https://hwchen.top/floatinglife/cooker/</id>
    <link href="https://hwchen.top/floatinglife/cooker/"/>
    <updated>2024-12-25T16:04:48.315Z</updated>
    <summary type="html"><![CDATA[<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在健身人的眼里，面前的玉盘珍馐将全部被转化为一条条冰冷的数值。在一定程度上，他可以通过一眼法，
清楚知道他这一餐吃了多少克碳水，多少克蛋白质。因此，人们常常尊称一类人为 “先天健身圣体”，他们可以无视食物的味道，通过自身独特的饮食方式，
补充其一餐所需的营养。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;虽然但是，我们大部分普通人并没有如此先天的优势，我们一天最焦虑的事情莫过于午餐晚餐去哪吃，去吃什么。
当我们来到饭堂，时常久久伫立，看着一家家店铺的饭菜，不禁勾起对家里菜肴的阵阵相思。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;自己动手，丰衣足食。当我们有条件时，可以尝试自己做饭，摆脱饭堂外卖之苦。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在健身人的眼里，面前的玉盘珍馐将全部被转化为一条条冰冷的数值。在一定程度上，他可以通过一眼法，
清楚知道他这一餐吃了多少克碳水，多少克蛋白质。因此，人们常常尊称一类人为 “先天健身圣体”，他们可以无视食物的味道，通过自身独特的饮食方式，
补充其一餐所需的营养。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;虽然但是，我们大部分普通人并没有如此先天的优势，我们一天最焦虑的事情莫过于午餐晚餐去哪吃，去吃什么。
当我们来到饭堂，时常久久伫立，看着一家家店铺的饭菜，不禁勾起对家里菜肴的阵阵相思。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;自己动手，丰衣足食。当我们有条件时，可以尝试自己做饭，摆脱饭堂外卖之苦。</p>
]]></content>
  </entry>
  <entry>
    <title type="text">醉 · 缘</title>
    <id>https://hwchen.top/floatinglife/feeling/</id>
    <link href="https://hwchen.top/floatinglife/feeling/"/>
    <updated>2024-12-25T16:04:48.316Z</updated>
    <summary type="html"><![CDATA[<br>
<p>“泪眼问花花不语，乱红飞过秋千去”欧阳修在《蝶恋花・庭院深深深几许》中一语道破了美好事物的消逝之迅速以及时光的无情。</p>
<p>回首过往，在感情的世界里，我们既是主角，演绎着悲欢离合的故事，也是探索者，追寻着爱与自我的真谛。有时我们会在爱中迷失，如同置身茫茫雾霭，看不清方向，却又在迷茫中逐渐领悟到内心真正的渴望。</p>
<p>这本笔记本所承载的感情经历，是我人生画卷中浓墨重彩的笔触，翻开它，犹如踏入一条回溯时光的河流，使我能重新触摸那些或炽热或温婉的情感温度。</p>
<hr>
<blockquote>
<p>注明：由于实在不想回忆起这些令人患得患失的往事，此页面已弃用，不再记录。</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<br>
<p>“泪眼问花花不语，乱红飞过秋千去”欧阳修在《蝶恋花・庭院深深深几许》中一语道破了美好事物的消逝之迅速以及时光的无情。</p>
<p>回首过往，在感情的世界里，我们既是主角，演绎着悲欢离合的故事，也是探索者，追寻着爱与自我的真谛。有时我们会在爱中迷失，如同置身茫茫雾霭，看不清方向，却又在迷茫中逐渐领悟到内心真正的渴望。</p>
<p>这本笔记本所承载的感情经历，是我人生画卷中浓墨重彩的笔触，翻开它，犹如踏入一条回溯时光的河流，使我能重新触摸那些或炽热或温婉的情感温度。</p>
]]></content>
  </entry>
  <entry>
    <title type="text">惑 · 解</title>
    <id>https://hwchen.top/floatinglife/question/</id>
    <link href="https://hwchen.top/floatinglife/question/"/>
    <updated>2024-12-25T16:04:48.317Z</updated>
    <summary type="html"><![CDATA[<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;学习和生活宛如一幅绚丽却又复杂的拼图，而那些时不时冒出来的问题就像拼图中难以契合的碎片，让人头疼不已。可正是在一次次耐心拼凑、寻找契合之道的过程中，我逐渐找到了让这幅拼图完整的办法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;作为一名合格的代码狗，我们从敲代码的第一天就被告知——控制台报错没关系，代码能跑就行。实则不然，异常是你在开发时候最好的伙伴，要是没有报错，将是一件非常可怕的事情，程序默默停了，你仍被蒙在鼓里，不知道哪个地方出错了。然而当我们真正面对一些异常时，我们内心中不可避免蕴育出知其不可奈何而安之若命的淡世情怀。有些东西，若前人没遇到的类似问题，我们自己也不会轻而易举贸然去探索，解决问题的思路固然重要，对于我们普通人来讲面对的问题，大多仅为前人踩过的坑，前人之车后人之鉴，若先存一套解决方案，我们又何尝要拿出一盏灯一台电脑一行代码看一天的毅力去折磨自己呢？</p>]]></summary>
    <content type="html"><![CDATA[<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;学习和生活宛如一幅绚丽却又复杂的拼图，而那些时不时冒出来的问题就像拼图中难以契合的碎片，让人头疼不已。可正是在一次次耐心拼凑、寻找契合之道的过程中，我逐渐找到了让这幅拼图完整的办法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;作为一名合格的代码狗，我们从敲代码的第一天就被告知——控制台报错没关系，代码能跑就行。实则不然，异常是你在开发时候最好的伙伴，要是没有报错，将是一件非常可怕的事情，程序默默停了，你仍被蒙在鼓里，不知道哪个地方出错了。然而当我们真正面对一些异常时，我们内心中不可避免蕴育出知其不可奈何而安之若命的淡世情怀。有些东西，若前人没遇到的类似问题，我们自己也不会轻而易举贸然去探索，解决问题的思路固然重要，对于我们普通人来讲面对的问题，大多仅为前人踩过的坑，前人之车后人之鉴，若先存一套解决方案，我们又何尝要拿出一盏灯一台电脑一行代码看一天的毅力去折磨自己呢？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;相信此篇目录中点点滴滴的碎片也能成为你应对问题时的有益参考。</p>
]]></content>
  </entry>
  <entry>
    <title type="text">拾 · 记</title>
    <id>https://hwchen.top/floatinglife/iter/</id>
    <link href="https://hwchen.top/floatinglife/iter/"/>
    <updated>2024-12-25T16:04:48.318Z</updated>
    <summary type="html"><![CDATA[<br>
<p>生活，宛如一场盛大而又绵密的旅程，我们皆是这旅途中的行者，怀揣着各自的憧憬与故事，穿梭在岁月交织的阡陌之间。</p>
<p>古人云：“流光容易把人抛，红了樱桃，绿了芭蕉。”岁月的车轮滚滚向前，从不为谁停留，它悄无声息地改变着周遭的一切，却也慷慨地留下了无数值得铭记的瞬间。</p>
<p>生活从来不是一帆风顺的坦途，它既有波澜壮阔的豪迈，亦有细水长流的温婉，更不乏峰回路转的曲折。而记录生活，便是在这起起落落的人生旋律中，为自己寻得一处可以安放心灵的角落。当我们将那些喜悦、悲伤、困惑、释然一一诉诸笔端时，仿佛是在与另一个自己对话，在回溯过往的过程中，梳理着内心的思绪，明晰着人生的方向。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<p>生活，宛如一场盛大而又绵密的旅程，我们皆是这旅途中的行者，怀揣着各自的憧憬与故事，穿梭在岁月交织的阡陌之间。</p>
<p>古人云：“流光容易把人抛，红了樱桃，绿了芭蕉。”岁月的车轮滚滚向前，从不为谁停留，它悄无声息地改变着周遭的一切，却也慷慨地留下了无数值得铭记的瞬间。</p>
<p>生活从来不是一帆风顺的坦途，它既有波澜壮阔的豪迈，亦有细水长流的温婉，更不乏峰回路转的曲折。而记录生活，便是在这起起落落的人生旋律中，为自己寻得一处可以安放心灵的角落。当我们将那些喜悦、悲伤、困惑、释然一一诉诸笔端时，仿佛是在与另一个自己对话，在回溯过往的过程中，梳理着内心的思绪，明晰着人生的方向。</p>
<p>愿在未来的日子里，我能写下更多的故事。待回首翻阅时，犹如漫步在一条由记忆铺就的幽径，再次品味那曾经的点点滴滴，感受生活所赋予的无尽美好与深刻启迪。</p>
]]></content>
  </entry>
  <entry>
    <title type="text">禅 · 思</title>
    <id>https://hwchen.top/floatinglife/thinker/</id>
    <link href="https://hwchen.top/floatinglife/thinker/"/>
    <updated>2024-12-25T16:04:48.319Z</updated>
  </entry>
  <entry>
    <title type="text">筑 · 累</title>
    <id>https://hwchen.top/floatinglife/tool/</id>
    <link href="https://hwchen.top/floatinglife/tool/"/>
    <updated>2024-12-25T16:04:48.319Z</updated>
    <summary type="html"><![CDATA[<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;年少的时期，作者常常对所谓的人情世故不屑一顾，在一些场合下经常口无遮拦，最终导致祸从口出，令自己和对方双双陷入尴尬的处境。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;人们总是会在成长的过程中渐渐活成 “自己曾经讨厌的样子”，即便实在不想处理复杂的人际关系，学会如何与人进行沟通，在一定程度上，可以减少与人发生争执与矛盾的概率。此外，良好的沟通也能加深与家人的情感，减少误会，相互谅解，使家庭关系更加融洽。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不正确的沟通，不恰当的相处方式，缺失的生活经验，都曾令我办事效率低下，僵化朋友关系，甚至是失去自己喜欢的另一半。此目录分享的经验不断警醒自己，也希望能给读到此章的你一些小小的启发。</p>]]></summary>
    <content type="html"><![CDATA[<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;年少的时期，作者常常对所谓的人情世故不屑一顾，在一些场合下经常口无遮拦，最终导致祸从口出，令自己和对方双双陷入尴尬的处境。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;人们总是会在成长的过程中渐渐活成 “自己曾经讨厌的样子”，即便实在不想处理复杂的人际关系，学会如何与人进行沟通，在一定程度上，可以减少与人发生争执与矛盾的概率。此外，良好的沟通也能加深与家人的情感，减少误会，相互谅解，使家庭关系更加融洽。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不正确的沟通，不恰当的相处方式，缺失的生活经验，都曾令我办事效率低下，僵化朋友关系，甚至是失去自己喜欢的另一半。此目录分享的经验不断警醒自己，也希望能给读到此章的你一些小小的启发。</p>
]]></content>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://hwchen.top/codenotes/ui/js/js01.html</id>
    <link href="https://hwchen.top/codenotes/ui/js/js01.html"/>
    <updated>2024-12-25T16:04:48.319Z</updated>
    <summary type="html"><![CDATA[<h2>1. js介绍</h2>
<h3>1.1 简介</h3>
<p>是一种运行在客户端（浏览器）的编程语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画等交互效果</p>
<h3>1.2  书写方式</h3>
<p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p>
<h4>1.2.1 内部方式</h4>
<p>通过 <code>script</code> 标签包裹 JavaScript 代码</p>]]></summary>
    <content type="html"><![CDATA[<h2>1. js介绍</h2>
<h3>1.1 简介</h3>
<p>是一种运行在客户端（浏览器）的编程语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画等交互效果</p>
<h3>1.2  书写方式</h3>
<p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p>
<h4>1.2.1 内部方式</h4>
<p>通过 <code>script</code> 标签包裹 JavaScript 代码</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'嗨，欢迎来传智播学习前端技术！'</span><span class="token punctuation">)</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>1.2.2 外部形式</h4>
<p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// demo.js</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'嗨，欢迎来传智播学习前端技术！'</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">// 此处的代码会被忽略掉！！！！</span></span>
<span class="line">  	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>1.2.3 注释和结束符</h4>
<p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p>
<h4>1.2.4 单行注释</h4>
<p>使用 <code>// </code> 注释单行代码</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 注释<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">// 这种是单行注释的语法</span></span>
<span class="line">    <span class="token comment">// 一次只能注释一行</span></span>
<span class="line">    <span class="token comment">// 可以重复注释</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'嗨，欢迎来传智播学习前端技术！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>1.2.5 多行注释</h4>
<p>使用 <code>/* */</code> 注释多行代码</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 注释<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">/* 这种的是多行注释的语法 */</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">    	更常见的多行注释是这种写法</span>
<span class="line">    	在些可以任意换行</span>
<span class="line">    	多少行都可以</span>
<span class="line">      */</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'嗨，欢迎来传智播学习前端技术！'</span><span class="token punctuation">)</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p>
<h4>1.2.6 结束符</h4>
<p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 结束符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p>
<h3>1.3 输入和输出语句</h3>
<p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p>
<h4>1.3.1 输出语句</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1. 输出语句</span></span>
<span class="line"><span class="token comment">//  1.1 alert 页面弹出警示框</span></span>
<span class="line"><span class="token comment">// alert('你好,js')</span></span>
<span class="line"><span class="token comment">// 1.2 document.write 向页面文档输入内容 显示到页面body标签之内, 可以正常的解析标签</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'今日特价'</span><span class="token punctuation">)</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h4&gt;今日特价&lt;/h4&gt;'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 1.3 console.log 给我们程序员调试使用的   console 控制台</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'给咱们程序员使用的'</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>1.3.2 输入语句</h4>
<p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 输入输出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">    <span class="token comment">// 1. 输入的任意数字，都会以弹窗形式展示</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'要输出的内容'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'要输出的内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span>
<span class="line">    <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的姓名:'</span><span class="token punctuation">)</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>2. 变量</h2>
<h3>2.1 简介</h3>
<blockquote>
<p>理解变量是计算机存储数据的“容器”，掌握变量的声明方式</p>
</blockquote>
<p>变量是计算机中用来存储数据的“容器”，变量不是数据本身，它们仅仅是一个用于存储数值的容器。可以理解为是一个个用来装东西的纸箱子。</p>
<figure><figcaption></figcaption></figure>
<h4>2.1.1 声明</h4>
<p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 声明和赋值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">    <span class="token comment">// let 变量名</span></span>
<span class="line">    <span class="token comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span>
<span class="line">    <span class="token comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span>
<span class="line">    <span class="token comment">// age 即变量的名称，也叫标识符</span></span>
<span class="line">    <span class="token keyword">let</span> age</span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code></p>
<p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p>
<h4>2.1.2 赋值</h4>
<p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 声明和赋值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">    <span class="token comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span>
<span class="line">    <span class="token comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span>
<span class="line">    <span class="token comment">// age 即变量的名称，也叫标识符</span></span>
<span class="line">    <span class="token keyword">let</span> age</span>
<span class="line">    <span class="token comment">// 赋值，将 18 这个数据存入了 age 这个“容器”中</span></span>
<span class="line">    age <span class="token operator">=</span> <span class="token number">18</span></span>
<span class="line">    <span class="token comment">// 这样 age 的值就成了 18</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 也可以声明和赋值同时进行</span></span>
<span class="line">    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello world!'</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.1.3 变量更新</h4>
<p>变量赋值后，还可以通过简单地给它一个不同的值来更新它。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1.更新变量</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">19</span></span>
<span class="line"><span class="token comment">// 注意: 不要多次声明同一个变量</span></span>
<span class="line"><span class="token comment">// let age = 19</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></span>
<span class="line">   </span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.1.4 声明多个变量</h4>
<p><strong>语法</strong>：多个变量中间用逗号隔开。</p>
<p><strong>说明</strong>：看上去代码长度更短，但并不推荐这样。为了更好的可读性，一般情况下我们一行只声明一个变量。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 2. 一次声明多个变量的简写方式 (了解 能认出来就可以了)</span></span>
<span class="line"><span class="token comment">// let uname = 'pink老师', sex = '男'</span></span>
<span class="line"><span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token string">'pink老师'</span></span>
<span class="line"><span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token string">'男'</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> sex<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.1.5 let 和 var 区别</h4>
<p>在较旧的JavaScript，使用关键字 var 来声明变量 ，而不是 let</p>
<p>var 现在开发中一般不再使用它，只是我们可能再老版程序中看到它。</p>
<p>let 为了解决 var 的一些问题。</p>
<p>var 声明一些不合理的地方：</p>
<ol>
<li>可以先使用 在声明 (不合理)</li>
<li>var 声明过的变量可以重复声明(不合理)</li>
<li>比如变量提升、全局变量、没有块级作用域等等</li>
</ol>
<p><strong>结论：</strong></p>
<blockquote>
<p>var 就是个bug，别迷恋它了，以后声明变量我们统一使用 <strong>let</strong></p>
</blockquote>
<h3>2.2 变量的本质</h3>
<p>内存：计算机中存储数据的地方，相当于一个空间</p>
<p>变量本质：是程序在内存中申请的一块用来存放数据的小空间</p>
<figure><figcaption></figcaption></figure>
<h3>2.3 变量名命名规则</h3>
<p>关于变量的名称（标识符）需要遵守：</p>
<p><strong>规则：</strong></p>
<ol>
<li>只能是字母、数字、下划线、$，且不能能数字开头</li>
<li>字母区分大小写，如 Age 和 age 是不同的变量</li>
<li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li>
<li>尽量保证变量具有一定的语义，见字知义</li>
</ol>
<p><strong>规范：</strong></p>
<ol>
<li>起名要有意义</li>
<li>遵守小驼峰命名法
<ol>
<li>第一个单词首字母小写，后面每个单词首字母大写。例：userName</li>
</ol>
</li>
</ol>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1. 规则(法律)</span></span>
<span class="line"><span class="token comment">// 1.1 变量名不能是关键字</span></span>
<span class="line"><span class="token comment">// let let = 10</span></span>
<span class="line"><span class="token comment">// 1.2 变量名的组成: 英文字母 数字 _  $ ，不能以数字开头</span></span>
<span class="line"><span class="token comment">// let 1num = 10 错误</span></span>
<span class="line"><span class="token comment">// let num! = 10 错误</span></span>
<span class="line"><span class="token comment">// 1.3 js严格区分大小写</span></span>
<span class="line"><span class="token comment">// let age = 18</span></span>
<span class="line"><span class="token comment">// console.log(Age)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 规范(道德)</span></span>
<span class="line"><span class="token comment">// 2.1 起名要有意义</span></span>
<span class="line"><span class="token comment">// let age = 18</span></span>
<span class="line"><span class="token comment">// let nl = 19</span></span>
<span class="line"><span class="token comment">// 2.2 我们命名建议采取小驼峰命名法</span></span>
<span class="line"><span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">'pink老师'</span></span>
<span class="line"><span class="token keyword">let</span> myFirstName <span class="token operator">=</span> <span class="token string">'p'</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>3. 常量</h2>
<p><strong>是什么</strong>：也是一个容器，用于保存数据的</p>
<p><strong>和变量的区别</strong>： 常量里面保存的值是不允许改变的</p>
<p><strong>使用场景</strong>：当某个值永远不会改变的时候，我们可以使用常量来保存，目的为了程序的安全</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 常量： 也是一个容器用来保存的数据</span></span>
<span class="line"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 注意事项：</span></span>
<span class="line"><span class="token comment">// 1. 常量里面的值是不允许修改的</span></span>
<span class="line">pi <span class="token operator">=</span> <span class="token number">3.141592653</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 2. 常量必须要初始化(声明常量的时候必须要赋值)</span></span>
<span class="line"><span class="token comment">// const url</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p>
</blockquote>
<h2>3.1 数据类型</h2>
<blockquote>
<p>计算机世界中的万事成物都是数据。</p>
</blockquote>
<p>生活中会把物品进行归类，不同的物品不能混淆在一起。</p>
<p>计算机程序可以处理大量的数据，方便程序员的使用数据。</p>
<figure><figcaption></figcaption></figure>
<h3>3.2 数字型和字符串型</h3>
<p><strong>数字型：</strong></p>
<p>即我们数学中学习到的数字，可以是整数、小数、正数、负数</p>
<p>通过<code>typeof</code>关键字检测数据类型</p>
<p><strong>字符串：</strong></p>
<p>被引号包裹的一段文字信息</p>
<p>JS中的字符串:</p>
<p>通过单引号（ ‘’） 、双引号（ “”）或反引号( `` ) 包裹的数据都属于字符串</p>
<p>单引号和双引号没有本质上的区别，推荐使用单引号。</p>
<blockquote>
<p>注意事项：</p>
<ol>
<li>单引号/双引号可以互相嵌套，但是不以自已嵌套自已（口诀：外双内单，或者外单内双）</li>
<li>一定注意变量名不要加引号，否则认为是字符串</li>
</ol>
</blockquote>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1. 数字型： 用于计算的， js数字类型包含： 整数、小数</span></span>
<span class="line"><span class="token comment">// let num1 = 18</span></span>
<span class="line"><span class="token comment">// let num1 = -18</span></span>
<span class="line"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">18.88</span></span>
<span class="line"><span class="token comment">// let num1 = -18.88</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num1<span class="token punctuation">)</span>  <span class="token comment">// number   typeof 关键字检测数据类型</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 字符串类型: 被引号包裹的一段文字信息   单引号 双引号  反引号</span></span>
<span class="line"><span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token string">'笔记本电脑'</span></span>
<span class="line"><span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token string">"黑马程序员"</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> goods<span class="token punctuation">)</span>  <span class="token comment">// string</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> address<span class="token punctuation">)</span>  <span class="token comment">// string</span></span>
<span class="line"><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">粉红色</span><span class="token template-punctuation string">`</span></span></span>
<span class="line"><span class="token keyword">let</span> tel <span class="token operator">=</span> <span class="token string">'13612342234'</span></span>
<span class="line"><span class="token comment">// 2.1 变量是不能加引号的,变量加了引号就不是盒子了，是一个字符串</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'goods'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 2.2 字符串嵌套的问题. 不能嵌套自己, 外单内双  或者 外双内单</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'今日特价"跳楼大甩卖"速速抢购'</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今日特价'跳楼大甩卖'速速抢购"</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3>3.3 模板字符串</h3>
<p><strong>使用场景:</strong></p>
<p>拼接字符串和变量</p>
<p><strong>语法</strong></p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1. 字符串拼接</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">91</span></span>
<span class="line"><span class="token comment">// console.log('pink老师今年' + age + '岁')</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pink老师今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁'</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 模板字符串</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink老师今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 3. 模板字符串里面的字符串可以换行</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：反引号中间的字符串可以换行的</p>
</blockquote>
<h3>3.4 布尔类型</h3>
<p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 数据类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">    <span class="token comment">//  pink老师帅不帅？回答 是 或 否</span></span>
<span class="line">    <span class="token keyword">let</span> isCool <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 是的，摔死了！</span></span>
<span class="line">    isCool <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 不，套马杆的汉子！</span></span>
<span class="line"></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> isCool<span class="token punctuation">)</span> <span class="token comment">// 结果为 boolean</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3>3.5 undefined</h3>
<p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 数据类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">    <span class="token comment">// 只声明了变量，并末赋值</span></span>
<span class="line">    <span class="token keyword">let</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> tmp<span class="token punctuation">)</span> <span class="token comment">// 结果为 undefined</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>注：JavaScript 中变量的值决定了变量的数据类型。</strong></p>
<h2>4. 运算符</h2>
<h3>4.1 算术运算符</h3>
<p>数字是用来计算的，比如：乘法 * 、除法 / 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p>
<p>算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等</p>
<p>| 运算符 | 作用                                                 |
|</p>
]]></content>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://hwchen.top/codenotes/ui/js/js02.html</id>
    <link href="https://hwchen.top/codenotes/ui/js/js02.html"/>
    <updated>2024-12-25T16:04:48.384Z</updated>
    <summary type="html"><![CDATA[<h2>1. 类型转换</h2>
<p>类型转换：把一种数据类型转换成另外一种数据类型</p>
<p><strong>为什么需要类型转换呢？</strong></p>
<p>例如：使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算</p>
<p>此时需要转换数据类型</p>
<p>数据类型转换可以分为： 显示转换和隐式转换</p>
<h3>1.1 显示转换</h3>
<p>自己手动写代码告诉系统该转成什么类型（数据类型明确、程序员主导）</p>
<h4>1.1.1 转换为数字型</h4>
<ol>
<li>Number(数据)
<ul>
<li>转换成功返回一个数字类型</li>
<li>转换失败则返回 NaN (例如数据里面包含非数字）</li>
</ul>
</li>
<li>parseInt(数据)
<ul>
<li>只保留整数</li>
<li>如果数字开头的字符串，只保留整数数字 比如 12px 返回 12</li>
</ul>
</li>
<li>parseFloat(数据)
<ul>
<li>可以保留小数</li>
<li>如果数字开头的字符串，可以保留小数 比如 12.5px 返回 12.5</li>
</ul>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>1. 类型转换</h2>
<p>类型转换：把一种数据类型转换成另外一种数据类型</p>
<p><strong>为什么需要类型转换呢？</strong></p>
<p>例如：使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算</p>
<p>此时需要转换数据类型</p>
<p>数据类型转换可以分为： 显示转换和隐式转换</p>
<h3>1.1 显示转换</h3>
<p>自己手动写代码告诉系统该转成什么类型（数据类型明确、程序员主导）</p>
<h4>1.1.1 转换为数字型</h4>
<ol>
<li>Number(数据)
<ul>
<li>转换成功返回一个数字类型</li>
<li>转换失败则返回 NaN (例如数据里面包含非数字）</li>
</ul>
</li>
<li>parseInt(数据)
<ul>
<li>只保留整数</li>
<li>如果数字开头的字符串，只保留整数数字 比如 12px 返回 12</li>
</ul>
</li>
<li>parseFloat(数据)
<ul>
<li>可以保留小数</li>
<li>如果数字开头的字符串，可以保留小数 比如 12.5px 返回 12.5</li>
</ul>
</li>
</ol>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 第一个数字</span></span>
<span class="line"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第一个月工资:'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 第二个数字</span></span>
<span class="line"><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第二个月工资:'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//  输出结果</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 通过显示转换的方式把其他类型转换为数字型</span></span>
<span class="line"><span class="token comment">// 1. Number() 最常用的一种方式 推荐 </span></span>
<span class="line"><span class="token comment">// 1.1 把字符串转换为数字型</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1   number</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN 如果无法完成转换则返回NaN </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.2 把布尔值转换为数字型 true false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.3 把 null undefined 转换为数字型</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. parseInt() 和 parseFloat() 固定使用场景的   100px 只要100 不要px </span></span>
<span class="line"><span class="token comment">// 使用场景：把以数字开头的字符串，只保留数字这种情况下就可以使用 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'100.5px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100  parseInt() 只保留整数</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'100.5px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100.5 parseFloat() 可以返回小数</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>1.1.2 转换为字符串和布尔型</h4>
<figure><figcaption></figcaption></figure>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1. 转换为字符串类型 </span></span>
<span class="line"><span class="token comment">// 1.1 String(数据) 开发中提倡使用这种方式 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// '1'     string</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'true'     string</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.2 变量.toString(进制)</span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  string </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  string   '10'</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  string   '12'</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 转换为布尔型 Boolean  (重点) 因为接下来我们要学习分支语句需要用到</span></span>
<span class="line"><span class="token comment">// 2.1 有6种情况为false： false 0 '' null undefined NaN (无，没有)</span></span>
<span class="line"><span class="token comment">// 2.2 其余的都为true </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3>1.2 隐式转换</h3>
<p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p>
<figure><figcaption></figcaption></figure>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// // 第一个数字</span></span>
<span class="line"><span class="token comment">// let num1 = +prompt('请输入第一个月工资:')</span></span>
<span class="line"><span class="token comment">// // 第二个数字</span></span>
<span class="line"><span class="token comment">// let num2 = +prompt('请输入第二个月工资:')</span></span>
<span class="line"><span class="token comment">// //  输出结果</span></span>
<span class="line"><span class="token comment">// alert(num1 + num2)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 隐式转换为数字型的运算符</span></span>
<span class="line"><span class="token comment">// 1.1 算术运算符 - *  /   比较运算符  &gt;   ==</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment">// 5</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1999'</span> <span class="token operator">*</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//  3998</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token string">'1'</span><span class="token punctuation">)</span>   <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.2 + 正号使用的时候，也会把字符串转换为 数字型</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token comment">// '123'</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">+</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token comment">// number</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 隐式转换为字符串型的运算符   + 拼接字符串 两侧只要有一个是字符串，结果就是字符串</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pink'</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment">// '18'</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 隐式转换为布尔型的运算符  ！逻辑非</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">'pink'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>2. 语句</h2>
<h3>2.1 表达式和语句</h3>
<figure><figcaption></figcaption></figure>
<h3>2.2 分支语句</h3>
<p>分支语句可以根据条件判定真假，来选择性的执行想要的代码</p>
<p>分支语句包含：</p>
<ol>
<li>if分支语句（重点）</li>
<li>三元运算符</li>
<li>switch语句</li>
</ol>
<h4>2.2.1 if 分支语句</h4>
<p>语法：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 满足条件要执行的语句</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为false，则不执行大括号里面代码</p>
<p>小括号内的结果若不是布尔类型时，会发生类型转换为布尔值，类似Boolean()</p>
<p>如果大括号只有一个语句，大括号可以省略，但是，俺们不提倡这么做~</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// if 分支语句 选择性的执行代码</span></span>
<span class="line"><span class="token comment">// 1. 语法规范</span></span>
<span class="line"><span class="token comment">// if (条件) {</span></span>
<span class="line"><span class="token comment">//   满足条件要执行的代码</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 体验</span></span>
<span class="line"><span class="token comment">// console.log('我想要被表扬')</span></span>
<span class="line"><span class="token comment">// if (false) {</span></span>
<span class="line"><span class="token comment">//   console.log('我想要被表扬')</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// if (3 &lt; 5) {</span></span>
<span class="line"><span class="token comment">//   console.log('我想要被表扬')</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 类型转换 类似于 Boolean()</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我想要被表扬'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 需求： 用户输入高考成绩，如果分数大于等于700分，则提示 '恭喜考入黑马程序员'</span></span>
<span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入高考成绩:'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'恭喜您考入黑马程序员'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.2.2 if双分支语句</h4>
<p>如果有两个条件的时候，可以使用 if else 双分支语句</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 满足条件要执行的语句</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 不满足条件要执行的语句</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// if 双分支语句</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例1： 考试成绩判断</span></span>
<span class="line"><span class="token comment">// 1. 如果成绩大于等于700分，提示 '恭喜您，考入黑马程序员'</span></span>
<span class="line"><span class="token comment">// 2. 否则则提示 '非常抱歉，你没有考入黑马程序员，明年再战!'</span></span>
<span class="line"><span class="token comment">// let score = +prompt('请您输入考试成绩:')</span></span>
<span class="line"><span class="token comment">// if (score &gt;= 700) {</span></span>
<span class="line"><span class="token comment">//   alert('恭喜您，考入黑马程序员')</span></span>
<span class="line"><span class="token comment">// } else {</span></span>
<span class="line"><span class="token comment">//   alert('非常抱歉，你没有考入黑马程序员，明年再战!')</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例2： 用户登录案例</span></span>
<span class="line"><span class="token comment">// 1. 如果用户名是刘德华并且密码是123456 则提示登录成功</span></span>
<span class="line"><span class="token comment">// 2. 否则则提示登录失败</span></span>
<span class="line"><span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入用户名:'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> pwd <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入密码:'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">===</span> <span class="token string">'刘德华'</span> <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">===</span> <span class="token string">'123456'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功，欢迎回来~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录失败，您输入的用户名和密码错误~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.2.3 if 多分支语句</h4>
<p>使用场景： 适合于有多个条件的时候</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// if 多分支语句</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例： 根据成绩输出评语</span></span>
<span class="line"><span class="token comment">// (1).成绩90以上是 优秀</span></span>
<span class="line"><span class="token comment">// (2).成绩70~90是  良好</span></span>
<span class="line"><span class="token comment">// (3).成绩是60~70之间是 及格</span></span>
<span class="line"><span class="token comment">// (4).成绩60分以下是 不及格</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 用户输入成绩</span></span>
<span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入考试成绩:'</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 根据成绩判断输出不同的结果</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'优秀，棒棒棒~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'良好，棒棒~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'及格，棒~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不及格，好好加油，你可以的~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 注意事项</span></span>
<span class="line"><span class="token comment">// 3.1 因为我们判断用的是大于等于，则里面的成绩要从大往小写</span></span>
<span class="line"><span class="token comment">// 3.2 else if 可以有任意多个， else 不是必须的</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.2.4 三元运算符（三元表达式）</h4>
<p><strong>使用场景</strong>： 一些简单的双分支，可以使用  三元运算符（三元表达式），写起来比 if  else双分支 更简单</p>
<p><strong>符号</strong>：? 与 : 配合使用</p>
<p>语法：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">条件 <span class="token operator">?</span> 表达式<span class="token number">1</span> ： 表达式<span class="token number">2</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 三元运算符（三元表达式）</span></span>
<span class="line"><span class="token comment">// 1. 语法格式</span></span>
<span class="line"><span class="token comment">// 条件 ? 表达式1 : 表达式2 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 执行过程 </span></span>
<span class="line"><span class="token comment">// 2.1 如果条件为真，则执行表达式1</span></span>
<span class="line"><span class="token comment">// 2.2 如果条件为假，则执行表达式2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 验证</span></span>
<span class="line"><span class="token comment">// 5 &gt; 3 ? '真的' : '假的'</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">'真的'</span> <span class="token operator">:</span> <span class="token string">'假的'</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 练习  求2个数字的最大值</span></span>
<span class="line"><span class="token comment">// let x = 10</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.2.5 switch语句（了解）</h4>
<p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同</p>
<p>注意：</p>
<ol>
<li>switch case语句一般用于等值判断, if适合于区间判断</li>
<li>switchcase一般需要配合break关键字使用 没有break会造成case穿透</li>
<li>if 多分支语句开发要比switch更重要，使用也更多</li>
</ol>
<p>例如：</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// switch分支语句</span></span>
<span class="line"><span class="token comment">// 1. 语法</span></span>
<span class="line"><span class="token comment">// switch (表达式) {</span></span>
<span class="line"><span class="token comment">//   case 值1:</span></span>
<span class="line"><span class="token comment">//     代码1</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//   case 值2:</span></span>
<span class="line"><span class="token comment">//     代码2</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"><span class="token comment">//   ...</span></span>
<span class="line"><span class="token comment">//   default:</span></span>
<span class="line"><span class="token comment">//     代码n</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 体验: 查询水果价格，输入水果，得到当前水果价格</span></span>
<span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token string">'苹果'</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">'香蕉'</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'香蕉的价格是: 3元/斤'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">'苹果'</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'苹果的价格是: 4元/斤'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">'橘子'</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'橘子的价格是: 2元/斤'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'没有查到此水果'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 注意事项</span></span>
<span class="line"><span class="token comment">// 3.1  switch适合于等值判断， if多分支适合于区间判断</span></span>
<span class="line"><span class="token comment">// 3.2  表达式的值要求 全等于 === case的值，才是能匹配上</span></span>
<span class="line"><span class="token comment">// 3.3  break如果落下了，容易造成case穿透</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.2.6 断点调试</h4>
<p>**作用：**学习时可以帮助更好的理解代码运行，工作时可以更快找到bug</p>
<p>浏览器打开调试界面</p>
<ol>
<li>按F12打开开发者工具</li>
<li>点到源代码一栏 （ sources ）</li>
<li>选择代码文件</li>
</ol>
<p>**断点：**在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p>
<figure><figcaption></figcaption></figure>
<h3>2.3 循环语句</h3>
<p>使用场景：重复执行 指定的一段代码，比如我们想要输出10次 '我学的很棒'</p>
<p>学习路径：</p>
<p>1.while循环</p>
<p>2.for 循环（重点）</p>
<h4>2.3.1 while循环</h4>
<p>while :  在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。</p>
<p><strong>语法：</strong></p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// 循环体    </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// while循环: 重复执行代码</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 需求: 利用循环重复打印3次 '月薪过万不是梦，毕业时候见英雄'</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'月薪过万不是梦，毕业时候见英雄~&lt;br&gt;'</span><span class="token punctuation">)</span></span>
<span class="line">  i<span class="token operator">++</span>   <span class="token comment">// 这里千万不要忘了变量自增否则造成死循环</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环三要素：</p>
<p>1.初始值 （经常用变量）</p>
<p>2.循环条件</p>
<p>3.变量计数（常用自增或者自减）</p>
<h4>2.3.2 for 循环</h4>
<p>作用：重复执行指定的一段代码</p>
<p>好处：把声明初始值、循环条件、变量计数写到一起，让人一目了然，它是最常使用的循环形式</p>
<p><strong>语法：</strong></p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始值<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变量计数<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 满足条件执行的循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// for循环：重复执行一段代码</span></span>
<span class="line"><span class="token comment">// 1. 语法</span></span>
<span class="line"><span class="token comment">// for(初始值; 循环条件; 变量计数) {</span></span>
<span class="line"><span class="token comment">//   // 循环体</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 需求： 重复打印3次</span></span>
<span class="line"><span class="token comment">// '月薪过万不是梦，毕业时候见英雄。键盘敲烂要行动，前端行业一览众'</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'键盘敲烂要行动，前端行业一览众~ &lt;br&gt;'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.3.3 中止循环</h4>
<p><code>break</code>   中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）</p>
<p><code>continue</code>  中止本次循环，一般用于排除或者跳过某一个选项的时候</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1.break中止整个for循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用</span></span>
<span class="line"><span class="token comment">// for (let i = 1; i &lt;= 6; i++) {</span></span>
<span class="line"><span class="token comment">//   document.write(`我是第${i}个孩子 &lt;br&gt;`)</span></span>
<span class="line"><span class="token comment">//   if (i === 3) {</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"><span class="token comment">//   }</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.continue中止本次循环，一般用于排除或者跳过某一个选项的时候</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 先验票，再进入电影院</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">continue</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">个孩子可以进入电影院&lt;br&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.3.4 无限循环</h4>
<p>1.while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p>
<p>2.for(;😉 也可以来构造“无限”循环，同样需要使用break退出循环。</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 无限循环  </span></span>
<span class="line"><span class="token comment">// 需求： 页面会一直弹窗询问你爱我吗？</span></span>
<span class="line"><span class="token comment">// (1). 如果用户输入的是 '爱'，则退出弹窗</span></span>
<span class="line"><span class="token comment">// (2). 否则一直弹窗询问</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. while(true) 无限循环</span></span>
<span class="line"><span class="token comment">// while (true) {</span></span>
<span class="line"><span class="token comment">//   let love = prompt('你爱我吗?')</span></span>
<span class="line"><span class="token comment">//   if (love === '爱') {</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"><span class="token comment">//   }</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. for(;;) 无限循环</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> love <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'你爱我吗?'</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>love <span class="token operator">===</span> <span class="token string">'爱'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>今日重点单词：</p>
<figure><figcaption></figcaption></figure>
]]></content>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://hwchen.top/codenotes/ui/js/js03.html</id>
    <link href="https://hwchen.top/codenotes/ui/js/js03.html"/>
    <updated>2024-12-25T16:04:48.414Z</updated>
    <summary type="html"><![CDATA[<h2>1. 循环嵌套</h2>
<p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p>
<figure><figcaption></figcaption></figure>
<p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p>
<p>基本语法：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span>（初始化<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span>变量计数） <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 循环条件；变量计数）<span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//  要重复执行的代码</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2>1. 循环嵌套</h2>
<p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p>
<figure><figcaption></figcaption></figure>
<p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p>
<p>基本语法：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span>（初始化<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span>变量计数） <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 循环条件；变量计数）<span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//  要重复执行的代码</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">// 1. 外面的循环 记录第n天 </span>
<span class="line">for (let i = 1; i &lt; 4; i++) {</span>
<span class="line">    document.write(`第${i}天 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>`)</span>
<span class="line">    // 2. 里层的循环记录 几个单词</span>
<span class="line">    for (let j = 1; j &lt; 6; j++) {</span>
<span class="line">        document.write(`记住第${j}个单词<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>`)</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住，外层循环循环一次，里层循环循环全部</p>
<h3>1.1 三角型</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token comment">// 外层打印几行</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 里层打印几个星星</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'★'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br&gt;'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3>1.2 九九乘法表</h3>
<p>样式css</p>
<div class="language-css line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="css" data-title="css" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token selector">span</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid pink<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">margin</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 2px 2px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 192<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 192<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>javascript</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"> <span class="token comment">// 外层打印几行</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 里层打印几个星星</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 只需要把 ★ 换成  1 x 2 = 2   </span></span>
<span class="line">        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></span>
<span class="line">				&lt;div&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> x </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>j <span class="token operator">*</span> i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/div&gt;</span>
<span class="line">     </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br&gt;'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><figure><figcaption></figcaption></figure>
<h2>2. 数组</h2>
<blockquote>
<p>知道什么是数组及其应用的场景，掌握数组声明及访问的语法。</p>
</blockquote>
<h3>2.1 数组是什么？</h3>
<p><strong>数组</strong>：(Array) 是一种数据类型，属于引用数据类型</p>
<p><strong>作用</strong>: 在单个变量名下存储多个数据</p>
<p>例如我要保存咱们班同学的姓名，使用数组非常方便</p>
<h3>2.2 数组的基本使用</h3>
<h4>2.2.1 定义数组</h4>
<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 1. 语法，使用 [] 来定义一个空数组</span></span>
<span class="line">  <span class="token comment">// 定义一个空数组，然后赋值给变量 classes</span></span>
<span class="line">  <span class="token comment">// let classes = []</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 定义非空数组</span></span>
<span class="line">  <span class="token keyword">let</span> classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小刚'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小丽'</span><span class="token punctuation">,</span> <span class="token string">'小米'</span><span class="token punctuation">]</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p>
<h4>2.2.2 访问数组和数组索引</h4>
<p>使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。</p>
<p>我们将数据单元在数组中的编号称为索引值，也有人称其为下标。</p>
<p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从<code> 0</code> 开始的，如下图所示：</p>
<figure><figcaption></figcaption></figure>
<p>观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 数组： 可以单个变量下存储多个数据</span></span>
<span class="line">  <span class="token comment">// 1. 声明数组</span></span>
<span class="line">  <span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小刚'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小丽'</span><span class="token punctuation">,</span> <span class="token string">'小米'</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// let names = ['小明', '小刚', true, '小丽', 1]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 1.1 数组是按照顺序来存储的，每个数据都有自己的编号</span></span>
<span class="line">  <span class="token comment">// 1.2 编号是从0开始的， 0 1 2 3... 也称为 索引 或者 下标</span></span>
<span class="line">  <span class="token comment">// 1.3 数组里面可以存放任意的数据类型</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 数组取值  数组名[下标]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// '小明'</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// '小刚'</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// '小红'</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// '小丽'</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// '小米'</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>数组做为数据的集合，它的单元值可以是任意数据类型</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 6. 数组单值类型可以是任意数据类型</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// a) 数组单元值的类型为字符类型</span></span>
<span class="line">  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// b) 数组单元值的类型为数值类型</span></span>
<span class="line">  <span class="token keyword">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// c) 混合多种类型</span></span>
<span class="line">  <span class="token keyword">let</span> mixin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.2.3 遍历数组</h4>
<p><strong>遍历数组</strong>：把数组中每个数据都访问到</p>
<p><strong>数组长度</strong>： 数组.<code>length</code></p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'迪丽热巴'</span><span class="token punctuation">,</span> <span class="token string">'古力娜扎'</span><span class="token punctuation">,</span> <span class="token string">'佟丽丫丫'</span><span class="token punctuation">,</span> <span class="token string">'玛尔扎哈'</span><span class="token punctuation">,</span> <span class="token string">'哈尼克孜'</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// console.log(arr[0])</span></span>
<span class="line">  <span class="token comment">// console.log(arr[1])</span></span>
<span class="line">  <span class="token comment">// console.log(arr[2])</span></span>
<span class="line">  <span class="token comment">// console.log(arr[3])</span></span>
<span class="line">  <span class="token comment">// 遍历数组： 把数组里面的数据每个都会访问到</span></span>
<span class="line">  <span class="token comment">// for (let i = 0; i &lt; 4; i++) {</span></span>
<span class="line">  <span class="token comment">//   // console.log(i)  数组名[索引号]</span></span>
<span class="line">  <span class="token comment">//   console.log(arr[i])</span></span>
<span class="line">  <span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 1. 数组的长度 数组.length </span></span>
<span class="line">  <span class="token comment">// console.log(arr.length)  // 4</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 2. 数组里面的数据也称为 数组元素</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3>2.3 操作数组</h3>
<p>数组本质是数据集合, 操作数据无非就是 增 删 改 查 语法</p>
<figure><figcaption></figcaption></figure>
<h4>2.3.1 查询和修改数组</h4>
<p><strong>查询：</strong></p>
<p>​	语法：数组[索引]</p>
<p>​	返回值：如果查询不到则返回 undefined</p>
<p><strong>修改：</strong></p>
<p>​	语法：数组[索引]  = 新值</p>
<p>​	返回值：如果下标不存在，则是新增一个数组元素，并修改了数组长度（尽量避免）</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 1. 查询数组元素</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'迪丽热巴'</span><span class="token punctuation">,</span> <span class="token string">'古丽扎娜'</span><span class="token punctuation">]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  '迪丽热巴'</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  '古丽扎娜'</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  undefined</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 修改数组元素   数组[索引] = 新值</span></span>
<span class="line">  arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'佟丽丫丫'</span></span>
<span class="line">  <span class="token comment">// console.log(arr)</span></span>
<span class="line">  arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'古丽扎娜'</span>  <span class="token comment">// 如果索引号不存在，则是增加数组元素 （不提倡）</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 4 修改了数组长度</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.3.2 新增</h4>
<figure><figcaption></figcaption></figure>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 数组新增元素</span></span>
<span class="line"><span class="token comment">// 1. 可以向数组的末尾新增1个或者多个数组元素 数组.push(元素1...元素n)</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'迪丽热巴'</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// console.log(arr.push('佟丽丫丫'))  // 返回的是新数组的长度 2</span></span>
<span class="line"><span class="token comment">// arr.push('佟丽丫丫', '古丽扎娜')</span></span>
<span class="line"><span class="token comment">// console.log(arr)  // 修改原数组</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 可以向数组的开头增加1个或者多个数组元素 数组.unshift(元素1,...元素n)</span></span>
<span class="line"><span class="token comment">// console.log(arr.unshift('佟丽丫丫'))  // 返回的是新数组的长度 2</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'佟丽丫丫'</span><span class="token punctuation">,</span> <span class="token string">'古丽扎娜'</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 修改原数组</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.3.3 删除</h4>
<figure><figcaption></figcaption></figure>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 删除元素</span></span>
<span class="line">  <span class="token comment">// 1. 删除数组中的最后一个元素  数组.pop()  修改原数组</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// arr.pop()</span></span>
<span class="line"><span class="token comment">// console.log(arr.pop())  // 返回的是被删除的元素</span></span>
<span class="line"><span class="token comment">// console.log(arr)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 删除数组中的第一个元素 数组.shift() 修改原数组的</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// console.log(arr.shift())  // 返回的是被删除的元素</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>2.3.4 数组 splice方法</h4>
<p>数组.splice() 方法  可以添加也可以删除数组元素</p>
<p>说明：可以从指定位置删除或者增加的数组元素，注意它修改原数组</p>
<blockquote>
<p>splice(start,deleteCount, item1, item2...)</p>
</blockquote>
<ol>
<li>
<p>start 起始位置:</p>
<ul>
<li>指定修改的开始位置（从0计数）</li>
</ul>
</li>
<li>
<p>deleteCount 删除个数:</p>
<ul>
<li>
<p>表示要移除的数组元素的个数</p>
</li>
<li>
<p>可选的。如果省略则默认从指定的起始位置删除到最后</p>
</li>
</ul>
</li>
<li>
<p>item1, item2...</p>
<ul>
<li>新增的元素</li>
</ul>
</li>
</ol>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// splice 删除和增加数组元素</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'迪丽热巴'</span><span class="token punctuation">,</span> <span class="token string">'古力娜扎'</span><span class="token punctuation">,</span> <span class="token string">'佟丽丫丫'</span><span class="token punctuation">,</span> <span class="token string">'玛尔扎哈'</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 1. splice 删除  数组.splice(起始位置, 删除几个)</span></span>
<span class="line"><span class="token comment">// arr.splice(1, 1) // 记住起始位置是索引号，从0 开始数</span></span>
<span class="line"><span class="token comment">// arr.splice(1) // 如果第二个参数（删除几个）省略了，则默认删除到最后</span></span>
<span class="line"><span class="token comment">// console.log(arr)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. splice 增加  数组.splice(起始位置, 删除几个, 新增元素1,...新增元素n)</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token string">'pink老师'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 2.1 注意如果是新增，则起始位置是目标位置的索引号， 删除几个（第二个参数）不能省略我们写为 0， 后面写新增的元素</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. splice 不是替换pop shift  unshift push.  arr.splice(0, 1)</span></span>
<span class="line"><span class="token comment">// 开头结尾找前面 pop shift  unshift push</span></span>
<span class="line"><span class="token comment">// splice管中间</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>3. 拓展知识</h2>
<h3>3.1 数组排序sort</h3>
<p>数组. sort()  方法可以排序</p>
<p>语法：</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token comment">// 数组排序  数组.sort()  修改原数组</span></span>
<span class="line">    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment">// arr.sort()</span></span>
<span class="line">    <span class="token comment">// console.log(arr)  // [100, 34, 78, 88, 99]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1. 升序排序</span></span>
<span class="line">    <span class="token comment">// arr.sort(function (a, b) {</span></span>
<span class="line">    <span class="token comment">//   return a - b</span></span>
<span class="line">    <span class="token comment">// })</span></span>
<span class="line">    <span class="token comment">// console.log(arr)  // [34, 78, 88, 99, 100]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. 降序排序</span></span>
<span class="line">    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> b <span class="token operator">-</span> a</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//  [100, 99, 88, 78, 34]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 获取数组最大值和最小值</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">数组的最大值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">数组的最小值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3>3.2 选择排序（了解）</h3>
<p>选择排序原理：（了解）</p>
<p>就是从第一个数开始，与后面所有的数相比较，找出最小（最大）的数，放在第一个位置</p>
<p>以此类推，每一轮确定一个相对于这一轮最小（最大）的数</p>
<p>算法可视化网站地址： https://visualgo.net/zh/sorting</p>
<p>核心：利用循环嵌套比较，根据索引号来交换变量</p>
<p>①：外层循环是一共进行几轮相比较，通过观察，一共进行数组长度-1 次比较</p>
<ul>
<li>for (let i = 0; i &lt; arr.length - 1; i++)</li>
<li>把 i作为最小值起始索引  minIndex</li>
</ul>
<p>②：里层循环是每一轮的比较来查找最小值</p>
<ul>
<li>里层循环起始值是 i + 1 个元素开始查找</li>
<li>for (let j = i + 1; j &lt; arr.length; j++)</li>
<li>进行比较的时候，发现最小的数组元素，把当前元素索引号给 minIndex</li>
</ul>
<p>③：如果 minIndex 和 i 位置不一致，则交换变量</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 选择排序算法</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 1  [1, 2, 5, 4, 3]</span></span>
<span class="line"><span class="token comment">// 2  [1, 2, 5, 4, 3]</span></span>
<span class="line"><span class="token comment">// 3  [1, 2, 3, 4, 5]</span></span>
<span class="line"><span class="token comment">// 4  [1, 2, 3, 4, 5]</span></span>
<span class="line"><span class="token comment">// 1. 外层循环控制是几轮能够比较出来</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 最小值的索引号</span></span>
<span class="line">  <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 里层循环来查找最小值，并且记录最小值的索引号</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      minIndex <span class="token operator">=</span> j</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3. 交换变量  </span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span></span>
<span class="line">    arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>今日单词：</p>
<figure><figcaption></figcaption></figure>
]]></content>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://hwchen.top/codenotes/ui/js/js04.html</id>
    <link href="https://hwchen.top/codenotes/ui/js/js04.html"/>
    <updated>2024-12-25T16:04:48.450Z</updated>
    <summary type="html"><![CDATA[<h2>1. 函数的基本使用</h2>
<p><strong>函数:</strong> 是可以被重复使用的代码块</p>
<p>**作用：**函数可以把具有相同或相似逻辑的代码“包裹”起来，这么做的优势是有利于代码复用</p>
<h3>1.1 声明（定义）函数</h3>
<p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p>
<p>利用关键字 function 定义函数 （声明函数）</p>
<p>语法：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数： 是可以被重复使用的代码块，作用是有利于代码复用</span></span>
<span class="line"><span class="token comment">// 1. 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'嗨~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2>1. 函数的基本使用</h2>
<p><strong>函数:</strong> 是可以被重复使用的代码块</p>
<p>**作用：**函数可以把具有相同或相似逻辑的代码“包裹”起来，这么做的优势是有利于代码复用</p>
<h3>1.1 声明（定义）函数</h3>
<p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p>
<p>利用关键字 function 定义函数 （声明函数）</p>
<p>语法：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数： 是可以被重复使用的代码块，作用是有利于代码复用</span></span>
<span class="line"><span class="token comment">// 1. 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'嗨~'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p>
<ol>
<li>函数名命名跟变量一致，采用<code>小驼峰</code>命名法</li>
<li>函数名经常采用 动词</li>
</ol>
<h3>1.2 调用</h3>
<p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 声明和调用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'嗨~'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span>
<span class="line">    <span class="token comment">// 函数名()</span></span>
<span class="line">        </span>
<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 可以重复被调用，多少次都可以</span></span>
<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><blockquote>
<p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。</p>
</blockquote>
<h2>2. 函数的整体认知</h2>
<figure><figcaption></figcaption></figure>
<p><strong>语法：</strong></p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> 结果</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 输出函数返回的结果</span></span>
<span class="line"></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p>
<ol>
<li>函数参数，如果有多个则用逗号分隔，用于接受传递过来的数据</li>
<li>return 关键字可以把结果返回给调用者</li>
</ol>
<h2>3. 函数参数</h2>
<p>通过向函数传递参数，可以让函数更加灵活多变</p>
<figure><figcaption></figcaption></figure>
<p>**形参：**声明函数时小括号里的叫形参（形式上的参数）</p>
<p>**实参：**调用函数时小括号里的叫实参（实际上的参数）</p>
<p><strong>执行过程：</strong> 会把实参的数据传递给形参，从而提供给函数内部使用，我们可以把形参理解为变量</p>
<p>我们曾经使用过的 alert('打印')，parseInt('11px')，Number('11')本质上都是函数调用的传参</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 函数的参数  形参和实参个数不匹配</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 1. 形参个数过多， 会自动补充 undefined </span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 形参 </span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 实参   3</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 实参  NaN  x = 1  y 没有给值默认值是 undefined</span></span>
<span class="line">  <span class="token comment">//  1 + undefined  = NaN</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 实参个数过多，则多余的实参会被忽略</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 实参 3</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3. 开发中提倡要保证实参和形参个数统一</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>在Javascript中 实参的个数和形参的个数可以不一致</p>
<ul>
<li>如果形参过多 会自动填上undefined</li>
<li>如果实参过多 那么多余的实参会被忽略</li>
</ul>
<h2>4. 逻辑中断</h2>
<p>逻辑中断： 存在于逻辑运算符 &amp;&amp; 和 || 中，左边如果满足一定条件会中断代码执行，也称为逻辑短路</p>
<blockquote>
<p>false &amp;&amp; anything    // 逻辑与左边false则中断，如果左边为true，则返回右边代码的值</p>
<p>true || anything       // 逻辑或左边true则中断，如果左边为false，则返回右边代码的值</p>
</blockquote>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 逻辑中断   &amp;&amp; ||</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 逻辑与中断：如果左边为假，则中断，如果左边为真，则返回右边的值</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// ''</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 3 此处不会发生逻辑中断</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 3 此处不会发生逻辑中断</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 逻辑或中断，如果左侧为真，则中断，如果左侧为假，则返回右边的值</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true  发生了中断</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1  发生了中断</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3 此处不会发生逻辑中断</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 使用场景</span></span>
<span class="line"><span class="token comment">// function sum(x, y) {</span></span>
<span class="line"><span class="token comment">//   return x + y</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"><span class="token comment">// console.log(sum(1, 2)) // 3</span></span>
<span class="line"><span class="token comment">// console.log(sum()) // NaN</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// x = undefined</span></span>
<span class="line">  <span class="token comment">//  x = undefined || 0</span></span>
<span class="line">  <span class="token comment">// x = 1 || 0</span></span>
<span class="line">  x <span class="token operator">=</span> x <span class="token operator">||</span> <span class="token number">0</span></span>
<span class="line">  y <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>5. 函数默认参数</h2>
<p>默认参数：可以给形参设置默认值</p>
<blockquote>
<p>说明：这个默认值只会在缺少实参传递或者实参是undefined才会被执行</p>
</blockquote>
<p><strong>默认参数和逻辑中断使用场景区别：</strong></p>
<ol>
<li>默认参数主要处理函数形参（处理参数要比逻辑中断更简单）</li>
<li>逻辑中断除了参数还可以处理更多的需求</li>
</ol>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 默认参数: 给形参一个默认值</span></span>
<span class="line">  <span class="token comment">// 1. 默认参数里面的值执行：</span></span>
<span class="line">  <span class="token comment">// 1.1 没有实参传递过来 x = 0 </span></span>
<span class="line">  <span class="token comment">// 1.2 有实参传递但是传递的是undefined  x = 0</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 默认参数和逻辑中断使用场景的区别：</span></span>
<span class="line">  <span class="token comment">// 2.1 默认参数主要针对的是形参</span></span>
<span class="line">  <span class="token comment">// 2.2 逻辑中断除了处理参数之外，还可以做更多</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>6. 函数返回值</h2>
<p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？</p>
<p>要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p>
<blockquote>
<p>返回值：把处理结果返回给调用者</p>
</blockquote>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">// 函数返回值细节</span></span>
<span class="line">    <span class="token comment">// 1. return 结束函数，return 后面的代码不会执行了， break退出循环或者switch</span></span>
<span class="line">    <span class="token comment">// function sum(x, y) {</span></span>
<span class="line">    <span class="token comment">//   return x + y</span></span>
<span class="line">    <span class="token comment">//   console.log('我不会执行')</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token comment">// console.log(sum(1, 3))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. return 和被返回的结果不要换行</span></span>
<span class="line">    <span class="token comment">// function sum(x, y) {</span></span>
<span class="line">    <span class="token comment">//   return</span></span>
<span class="line">    <span class="token comment">//   x + y</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token comment">// console.log(sum(1, 3))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 如果函数没有return 则默认返回的是 undefined</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>总结：</p>
<ol>
<li>return会立即结束当前函数，所以后面代码不会再被执行</li>
<li>在 return 关键字和被返回的表达式之间不允许使用换行符，否则内部执行相当于会自动补充分号</li>
<li>函数可以没有 return，这种情况函数默认返回值为 undefined</li>
</ol>
<h2>7. 作用域</h2>
<p><strong>作用域（scope）</strong>： 变量或者值在代码中可用性的范围</p>
<p>**作用：**作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<h3>7.1 全局作用域</h3>
<p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p>
<p>处于全局作用域内的变量，称为全局变量</p>
<h3>7.2 局部作用域</h3>
<ol>
<li>函数作用域。作用于函数内的代码环境</li>
<li>块级作用域。{ } 大括号内部</li>
</ol>
<p>处于局部作用域内的变量称为局部变量</p>
<blockquote>
<p>注意：</p>
<ol>
<li>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</li>
<li>但是有一种情况，函数内部的形参可以看做是局部变量。</li>
</ol>
</blockquote>
<h3>7.3 变量的访问原则</h3>
<p>访问原则：在能够访问到的情况下先局部，局部没有再找全局，总结： <code>就近原则</code></p>
<h2>8. 匿名函数</h2>
<p>函数可以分为具名函数和匿名函数</p>
<p>匿名函数：没有名字的函数,无法直接使用。</p>
<h3>8.1 函数表达式</h3>
<p>将匿名函数赋值给一个变量，并且通过变量名称进行调用 我们将这个称为函数表达式</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 声明</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数表达式'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 调用</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p>
<ol>
<li>其实函数也是一种数据类型</li>
<li>函数表达式必须先定义，后使用</li>
<li>函数的形参和实参使用跟具名函数一致</li>
</ol>
<h3>8.2 立即执行函数</h3>
<p>IIFE (立即执行函数表达式) (Immediately Invoked Function Expression)</p>
<p><strong>场景介绍:</strong> 避免全局变量之间的污染</p>
<p>**注意：**多个立即执行函数要用 ; 隔开，要不然会报错</p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> xxx  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>xxxx<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://hwchen.top/codenotes/ui/js/js05.html</id>
    <link href="https://hwchen.top/codenotes/ui/js/js05.html"/>
    <updated>2024-12-25T16:04:48.470Z</updated>
    <summary type="html"><![CDATA[<h2>1. 对象</h2>
<blockquote>
<p>对象（Object）：JavaScript里的一种数据类型（引用类型），也是用于存储数据的</p>
<p>好处：可以用来详细的描述某个事物，是用键值对形式存储语义更明了</p>
<p>特点：对象数据是无序的，数组有序的</p>
</blockquote>
<h3>1.1 对象基本使用</h3>
<p>对象有属性和方法组成</p>
<h4>1.1.1对象属性</h4>
<p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p>
<ol>
<li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>属性就是依附在对象上的变量（对象外是变量，对象内是属性）</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>1. 对象</h2>
<blockquote>
<p>对象（Object）：JavaScript里的一种数据类型（引用类型），也是用于存储数据的</p>
<p>好处：可以用来详细的描述某个事物，是用键值对形式存储语义更明了</p>
<p>特点：对象数据是无序的，数组有序的</p>
</blockquote>
<h3>1.1 对象基本使用</h3>
<p>对象有属性和方法组成</p>
<h4>1.1.1对象属性</h4>
<p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p>
<ol>
<li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>属性就是依附在对象上的变量（对象外是变量，对象内是属性）</li>
</ol>
<p><strong>1. 定义对象属性</strong></p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 对象也是一种数据类型，保存数据同时可以更直观的描述事物</span></span>
<span class="line">  <span class="token comment">// 1. 定义对象属性</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">12.6</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>2. 访问对象属性</strong></p>
<p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 获得对象中属性对应的值，我称之为属性访问</p>
<div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 对象也是一种数据类型，保存数据同时可以更直观的描述事物</span></span>
<span class="line">  <span class="token comment">// 1. 定义对象属性</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">12.6</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 访问对象属性  对象.属性</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment">// 4</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>  <span class="token comment">// 12.6</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>1.1.2 对象方法</h4>
<p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p>
<ol>
<li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>方法是依附在对象中的函数（对象外是函数，对象内是方法）</li>
</ol>
<p><strong>1.定义对象方法</strong></p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// let fn = function() {}</span></span>
<span class="line"><span class="token comment">// 对象方法</span></span>
<span class="line"><span class="token comment">// 1. 定义对象方法</span></span>
<span class="line"><span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'唱歌'</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">dance</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳舞'</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>2.调用对象方法</strong></p>
<p>声明对象，并添加了若干方法后，可以使用 <code>.</code>  调用对象中函数，我称之为方法调用。</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// let fn = function() {}</span></span>
<span class="line"><span class="token comment">// 对象方法</span></span>
<span class="line"><span class="token comment">// 1. 定义对象方法</span></span>
<span class="line"><span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'唱歌'</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">dance</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳舞'</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 2</span></span>
<span class="line">    <span class="token comment">// console.log(x + y)</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 调用对象方法</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 唱歌</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 跳舞</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 方法可以传递参数也可以有返回值，跟函数使用基本类似</span></span>
<span class="line"><span class="token keyword">let</span> re <span class="token operator">=</span> pig<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1 实参</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p>
<h3>1.2 操作对象</h3>
<p>对象本质是无序的数据集合, 操作对象数据无非就是 <strong>增 删 改 查</strong></p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 操作对象：对数据 查、增、改、删</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'唱歌'</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 查： 对象.属性 对象.方法</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">.</span>uname<span class="token punctuation">)</span>  <span class="token comment">// 得到属性值</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 增：对象.新属性 = 新值   对象.新方法 = function(){}</span></span>
<span class="line">pig<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function-variable function">dance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳舞'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 改：对象.属性 = 新值  对象.方法 = 新匿名函数</span></span>
<span class="line">pig<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">'小猪佩奇'</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'哼哼哼！！'</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 删： 了解，因为我们很少对对象里面的数据做删除操作  delete</span></span>
<span class="line"><span class="token keyword">delete</span> pig<span class="token punctuation">.</span>age</span>
<span class="line"><span class="token keyword">delete</span> pig<span class="token punctuation">.</span>dance</span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4>1.2.1 查找属性的另外写法</h4>
<p>对于多词属性比如中横线分割的属性，点操作就不能用了</p>
<p>我们可以采取：  对象['属性'] 方式， 单引号和双引号都阔以，当然也可以用于其他正常属性</p>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 查询属性的另外写法  对象['属性'] 这个属性必须加引号</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">'pig-name'</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// console.log(pig.pig - name)  // NaN</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">[</span><span class="token string">'pig-name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 佩奇</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 4    === pig.age </span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><blockquote>
<p>总结：多词属性或者需要解析变量的时候使用 [] 语法，其余的直接使用点语法</p>
</blockquote>
<h3>1.3 遍历对象</h3>
<p>for 遍历对象的问题：</p>
<ul>
<li>对象没有长度length，而且是无序的</li>
</ul>
<p>所以我们要利用 for in 遍历对象</p>
<p><strong>语法:</strong></p>
<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> 变量 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token comment">// 属性名</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>对象<span class="token punctuation">[</span>变量<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 属性值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>for in语法中的 k 是一个变量, 在循环的过程中依次代表对象的属性名</li>
<li>由于 k 是变量, 所以必须使用 [ ] 语法解析</li>
<li>一定记住： k 是获得对象的属性名， 对象名[k] 是获得 属性值</li>
<li>一般不用这种方式遍历数组、主要是用来遍历对象</li>
</ol>
<div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 遍历对象</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">12.6</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// for (let key in pig) {</span></span>
<span class="line"><span class="token comment">//   console.log(key)  // key 是属性  </span></span>
<span class="line"><span class="token comment">//   console.log(pig[key]) // 对象[变量] 是值</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> pig<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment">// key 是属性   对象.属性</span></span>
<span class="line">  <span class="token comment">// console.log(pig.key)   // pig.key  undefined  因为key是个变量不是属性</span></span>
<span class="line">  <span class="token comment">// key  'sex'  'age'    对象[key]  对象['sex']  对象['age']</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注意：数组遍历用传统for， for in 主要用来遍历对象</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">// 得到字符串类型的索引号</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2>2. 内置对象</h2>
<p>内置对象：JavaScript内部提供的对象，包含各种属性和方法给开发者调用</p>
<p>回想一下我们曾经使用过的 <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code></p>
<p>除了 <code>console</code> 对象外，JavaScritp 还有其它的内置的对象</p>
<h3>2.1 Math</h3>
<p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p>
<p>| 属性/方法 | 作用         | 说明                                                         |
|</p>
]]></content>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://hwchen.top/codenotes/back/spring/spring/7%E5%BA%95%E5%B1%82.html</id>
    <link href="https://hwchen.top/codenotes/back/spring/spring/7%E5%BA%95%E5%B1%82.html"/>
    <updated>2024-12-25T16:04:48.500Z</updated>
    <summary type="html"><![CDATA[<h2>1. 基础</h2>
<ul>
<li><code>@Scope(value = "prototype")</code>：默认单例，加上后创建的是多例的对象</li>
<li><code>@PostConstruct</code>：通过注解指定在构造器完成后执行的方法，即完成初始化任务</li>
<li><code>@EnableAspectJAutoProxy</code>：AOP 实现 Spring 可以通过给加了这个注解的类</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<ol>
<li>AOP 底层是基于 BeanPostProcessor 机制的</li>
<li>即在 Bean 创建好后，根据是否需要 AOP 处理，决定返回代理对象，还是原生Bean</li>
<li>在返回代理对象时，就可以根据要代理的类和方法来返回</li>
<li>其实这个机制并不难，本质就是在 BeanPostProcessor 机制+ 动态代理技术</li>
<li></li>
</ol>
</div>]]></summary>
    <content type="html"><![CDATA[<h2>1. 基础</h2>
<ul>
<li><code>@Scope(value = "prototype")</code>：默认单例，加上后创建的是多例的对象</li>
<li><code>@PostConstruct</code>：通过注解指定在构造器完成后执行的方法，即完成初始化任务</li>
<li><code>@EnableAspectJAutoProxy</code>：AOP 实现 Spring 可以通过给加了这个注解的类</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<ol>
<li>AOP 底层是基于 BeanPostProcessor 机制的</li>
<li>即在 Bean 创建好后，根据是否需要 AOP 处理，决定返回代理对象，还是原生Bean</li>
<li>在返回代理对象时，就可以根据要代理的类和方法来返回</li>
<li>其实这个机制并不难，本质就是在 BeanPostProcessor 机制+ 动态代理技术</li>
<li></li>
</ol>
</div>
<h2>2. Spring 底层实现 AOP</h2>
<h3>2.1 整体架构分析</h3>
<figure><figcaption></figcaption></figure>
]]></content>
  </entry>
</feed>