import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as t}from"./app-eWV4nnR8.js";const l={};function p(i,n){return t(),e("div",null,n[0]||(n[0]=[a(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>Listener 监听器是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener监听器。</p><p>Listener 它是 JavaEE 的规范，就是接口</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><p>监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理</p><h2 id="_2-servletcontextlistener-监听器" tabindex="-1"><a class="header-anchor" href="#_2-servletcontextlistener-监听器"><span>2. ServletContextListener 监听器</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁</p><p>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁</p><p>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈</p><h3 id="两个方法" tabindex="-1"><a class="header-anchor" href="#两个方法"><span>两个方法</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 在 ServletContext 对象创建之后马上调用，做初始化</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 在 ServletContext 对象销毁之后调用</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><ol><li>编写一个类去实现 ServletContextListener</li><li>实现其两个回调方法</li><li>web.xml 中去配置监听器</li></ol><p>监听器实现类</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletContext 对象被创建了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletContext 对象被销毁了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>web.xml 中的配置</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!--配置监听器--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.listener.MyServletContextListenerImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const r=s(l,[["render",p],["__file","Listener.html.vue"]]),d=JSON.parse('{"path":"/codenotes/back/javaweb/Listener.html","title":"Listener","lang":"zh-CN","frontmatter":{"title":"Listener","author":[{"name":"尚硅谷"},{"name":"Ahzy"}],"category":["计算机"],"tag":["javaweb"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"headerDepth":2,"description":"1. 简介 Listener 监听器是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener监听器。 Listener 它是 JavaEE 的规范，就是接口 作用 监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理 2. ServletContextLis...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javaweb/Listener.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"Listener"}],["meta",{"property":"og:description","content":"1. 简介 Listener 监听器是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener监听器。 Listener 它是 JavaEE 的规范，就是接口 作用 监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理 2. ServletContextLis..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"尚硅谷"}],["meta",{"property":"article:tag","content":"javaweb"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Listener\\",\\"description\\":\\"1. 简介 Listener 监听器是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener监听器。 Listener 它是 JavaEE 的规范，就是接口 作用 监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理 2. ServletContextLis...\\"}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]}]},{"level":2,"title":"2. ServletContextListener 监听器","slug":"_2-servletcontextlistener-监听器","link":"#_2-servletcontextlistener-监听器","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"两个方法","slug":"两个方法","link":"#两个方法","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]}],"git":{},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"codenotes/back/javaweb/Listener.md","excerpt":"<h2>1. 简介</h2>\\n<p>Listener 监听器是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener监听器。</p>\\n<p>Listener 它是 JavaEE 的规范，就是接口</p>\\n<h3>作用</h3>\\n<p>监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理</p>\\n<h2>2. ServletContextListener 监听器</h2>\\n<h3>简介</h3>\\n<p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁</p>","autoDesc":true}');export{r as comp,d as data};
