import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-eWV4nnR8.js";const l="/assets/image-20241130215524612-BCwdyQqy.png",p="/assets/image-20241130232022615-Bl1oWt_q.png",i="/assets/image-20241130233429873-2SSvf9MV.png",o="/assets/image-20241130235641907-CBHNnJQ8.png",c="/assets/image-20241203004613300-DVmC-Ks8.png",r="/assets/image-20241203004731794-CElTAVIC.png",u="/assets/image-20241203010246457-CdhAPLLb.png",d="/assets/image-20241203010257165-DkGJXCdq.png",m={};function k(h,n){return t(),a("div",null,n[0]||(n[0]=[e('<p>请求和响应是成对出现的，有请求就有响应。</p><h2 id="_1-web基础" tabindex="-1"><a class="header-anchor" href="#_1-web基础"><span>1. Web基础</span></a></h2><h3 id="_1-1-web-资源的分类" tabindex="-1"><a class="header-anchor" href="#_1-1-web-资源的分类"><span>1.1 Web 资源的分类</span></a></h3><blockquote><p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片</p><p>动态资源： jsp 页面、Servlet 程序</p></blockquote><h3 id="_1-2-常用的web-服务器" tabindex="-1"><a class="header-anchor" href="#_1-2-常用的web-服务器"><span>1.2 常用的Web 服务器</span></a></h3><p>Tomcat、Jboss、GlassFish、Resin、WebLogic</p><h3 id="_1-3-bs模式" tabindex="-1"><a class="header-anchor" href="#_1-3-bs模式"><span>1.3 BS模式</span></a></h3><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>兼容性差</li><li>安全性不易控制</li><li>易用性好，不用下载</li><li>拓展性统一，只需写Server</li></ul><h3 id="_1-4-web服务本质" tabindex="-1"><a class="header-anchor" href="#_1-4-web服务本质"><span>1.4 Web服务本质</span></a></h3><p>本质是一个 java程序，处理来自浏览器的HTTP请求</p><h3 id="_1-5-手写简单web服务" tabindex="-1"><a class="header-anchor" href="#_1-5-手写简单web服务"><span>1.5 手写简单web服务</span></a></h3><p><strong>暂时运行不了</strong></p><p>查看端口占用：<code>netstat -anp |more</code></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> </span>
<span class="line"> * <span class="token keyword">@version</span> </span>
<span class="line"> * 这是我们自己写的一个web服务, 可以返回hello.html给浏览器</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTomcat</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1.在9999端口监听</span></span>
<span class="line">        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//如果serverSocket 没有关闭，就等待连接, 不停的等待</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>serverSocket<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=====我的web服务在 9999端口监听=====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//2. 等待浏览器/客户端连接, 得到socket</span></span>
<span class="line">            <span class="token comment">//   该socket用于通信</span></span>
<span class="line">            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">//3. 通过socket 得到 输出流，[]</span></span>
<span class="line">            <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//   返回给浏览器/客户端</span></span>
<span class="line">            <span class="token comment">//4. 读取 hello.html 文件返回即可=&gt; 如何读取文件内容</span></span>
<span class="line">            <span class="token comment">//   得到文件输入流(字符输入流), 和 src/hello.html</span></span>
<span class="line">            <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/hello.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> buf <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//   循环读取hello.html</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buf <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-6-版本的对应关系" tabindex="-1"><a class="header-anchor" href="#_1-6-版本的对应关系"><span>1. 6 版本的对应关系</span></a></h3><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241001115805003.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-tomcat使用" tabindex="-1"><a class="header-anchor" href="#_2-tomcat使用"><span>2. Tomcat使用</span></a></h2><p>解压即可使用</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>server.xml</strong>：基本设置（端口、主机名）</li><li><strong>wex.mxl</strong>：运行时配置（serlvet....）</li></ul><h3 id="_2-1-启动" tabindex="-1"><a class="header-anchor" href="#_2-1-启动"><span>2.1 启动</span></a></h3><blockquote><ol><li>bin 目录下的 startup.bat 文件，双击</li><li>cd 到 bin 下，执行catalina run</li></ol></blockquote><h3 id="_2-2-停止" tabindex="-1"><a class="header-anchor" href="#_2-2-停止"><span>2.2 停止</span></a></h3><blockquote><ol><li>点击 tomcat 服务器窗口的 x 关闭按钮</li><li>把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C</li><li>bin 目录下的 shutdown.bat，双击（<span style="color:red;">推荐</span>）</li></ol></blockquote><h3 id="_2-3-改端口" tabindex="-1"><a class="header-anchor" href="#_2-3-改端口"><span>2.3 改端口</span></a></h3><p>Tomcat默认端口8080，http默认端口80（可隐藏）</p><p>conf / server.xml 的connector 标签</p><h3 id="_2-4-部署" tabindex="-1"><a class="header-anchor" href="#_2-4-部署"><span>2.4 部署</span></a></h3><blockquote><ol><li><span style="color:red;">拷贝工程</span>：webapps下一个目录等于一个工程</li><li><span style="color:red;">映射</span>：conf / Catalina / localhost / xml 文件，<strong>解决磁盘爆满</strong></li></ol></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/网站名<span class="token punctuation">&quot;</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>E:\\工程名<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-5-访问" tabindex="-1"><a class="header-anchor" href="#_2-5-访问"><span>2.5 访问</span></a></h3><p><code>http://ip:port/ </code> ====&gt;&gt;&gt;&gt; 没有工程名的时候，默认访问的是 ROOT 工程。</p><p><code>http://ip:port/工程名/</code> ====&gt;&gt;&gt;&gt; 没有资源名，默认访问 index.html 页面</p><h2 id="_3-uml时序图" tabindex="-1"><a class="header-anchor" href="#_3-uml时序图"><span>3. UML时序图</span></a></h2><p>浏览器访问web服务器文件的UML时序图</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-idea配置tomcat" tabindex="-1"><a class="header-anchor" href="#_4-idea配置tomcat"><span>4. IDEA配置Tomcat</span></a></h2><p><a href="./img/IDEA2020.2%E4%B8%AD%E5%BC%80%E5%8F%91JavaWeb%E5%B7%A5%E7%A8%8B.pdf">IDEA2020.2中开发JavaWeb工程.pdf</a></p><h3 id="_4-1-热加载选项说明" tabindex="-1"><a class="header-anchor" href="#_4-1-热加载选项说明"><span>4.1 热加载选项说明</span></a></h3><ul><li><strong>on update action</strong> : 表示当我们更新操作是, Tomcat 会自动更新类和资源(当jsp/html文件修改时，可以生效, 但是如果你修改的 java 文件, 需要 Redepoly 才会生效)</li><li><strong>on frame deactivation</strong> : 表示 IDEA 失去焦点(比如最小化), 也会导致jsp/html 发生更新 , 但是 java 修改了，还是需要 redeploy</li></ul><p><strong>推荐配置</strong></p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2-端口修改" tabindex="-1"><a class="header-anchor" href="#_4-2-端口修改"><span>4.2 端口修改</span></a></h3><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>这里修改的端口， 只会 <strong>影响到当前的项目</strong>，而 <span style="color:red;">不会修改 server.xml</span></p></blockquote><h3 id="_4-3-out目录" tabindex="-1"><a class="header-anchor" href="#_4-3-out目录"><span>4.3 out目录</span></a></h3><p>当 tomcat 启动时，会生成 <strong>out 目录</strong>，该目录就是原项目资源的 <strong>映射</strong>，我们浏览器访问的资源是 out 目录</p><p><strong>rebuild</strong> 意味着 删除 out目录 并 重新生成</p><p>当我们 **从外部拷贝 **资源到项目(图片, 文件, js , css 等), 如果出现404 不能访问错误, 解决方式 <strong>rebulid project -&gt; 重启 Tomcat</strong></p><h3 id="_4-4-javaweb工程目录" tabindex="-1"><a class="header-anchor" href="#_4-4-javaweb工程目录"><span>4.4 javaweb工程目录</span></a></h3><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',54)]))}const v=s(m,[["render",k],["__file","Tomcat.html.vue"]]),_=JSON.parse('{"path":"/codenotes/back/javaweb/Tomcat.html","title":"Tomcat","lang":"zh-CN","frontmatter":{"title":"Tomcat","icon":"/icon/tomcat.svg","author":[{"name":"Ahzy"}],"category":["计算机"],"tag":["javaweb"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"headerDepth":2,"date":"2024-10-07T00:00:00.000Z","description":"请求和响应是成对出现的，有请求就有响应。 1. Web基础 1.1 Web 资源的分类 静态资源： html、css、js、txt、mp4 视频 , jpg 图片 动态资源： jsp 页面、Servlet 程序 1.2 常用的Web 服务器 Tomcat、Jboss、GlassFish、Resin、WebLogic 1.3 BS模式 兼容性差 安全性不...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javaweb/Tomcat.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"Tomcat"}],["meta",{"property":"og:description","content":"请求和响应是成对出现的，有请求就有响应。 1. Web基础 1.1 Web 资源的分类 静态资源： html、css、js、txt、mp4 视频 , jpg 图片 动态资源： jsp 页面、Servlet 程序 1.2 常用的Web 服务器 Tomcat、Jboss、GlassFish、Resin、WebLogic 1.3 BS模式 兼容性差 安全性不..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/image-20241001115805003.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Ahzy"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:published_time","content":"2024-10-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Tomcat\\",\\"description\\":\\"请求和响应是成对出现的，有请求就有响应。 1. Web基础 1.1 Web 资源的分类 静态资源： html、css、js、txt、mp4 视频 , jpg 图片 动态资源： jsp 页面、Servlet 程序 1.2 常用的Web 服务器 Tomcat、Jboss、GlassFish、Resin、WebLogic 1.3 BS模式 兼容性差 安全性不...\\"}"]]},"headers":[{"level":2,"title":"1. Web基础","slug":"_1-web基础","link":"#_1-web基础","children":[{"level":3,"title":"1.1 Web 资源的分类","slug":"_1-1-web-资源的分类","link":"#_1-1-web-资源的分类","children":[]},{"level":3,"title":"1.2 常用的Web 服务器","slug":"_1-2-常用的web-服务器","link":"#_1-2-常用的web-服务器","children":[]},{"level":3,"title":"1.3 BS模式","slug":"_1-3-bs模式","link":"#_1-3-bs模式","children":[]},{"level":3,"title":"1.4 Web服务本质","slug":"_1-4-web服务本质","link":"#_1-4-web服务本质","children":[]},{"level":3,"title":"1.5 手写简单web服务","slug":"_1-5-手写简单web服务","link":"#_1-5-手写简单web服务","children":[]},{"level":3,"title":"1. 6 版本的对应关系","slug":"_1-6-版本的对应关系","link":"#_1-6-版本的对应关系","children":[]}]},{"level":2,"title":"2. Tomcat使用","slug":"_2-tomcat使用","link":"#_2-tomcat使用","children":[{"level":3,"title":"2.1 启动","slug":"_2-1-启动","link":"#_2-1-启动","children":[]},{"level":3,"title":"2.2 停止","slug":"_2-2-停止","link":"#_2-2-停止","children":[]},{"level":3,"title":"2.3 改端口","slug":"_2-3-改端口","link":"#_2-3-改端口","children":[]},{"level":3,"title":"2.4 部署","slug":"_2-4-部署","link":"#_2-4-部署","children":[]},{"level":3,"title":"2.5 访问","slug":"_2-5-访问","link":"#_2-5-访问","children":[]}]},{"level":2,"title":"3. UML时序图","slug":"_3-uml时序图","link":"#_3-uml时序图","children":[]},{"level":2,"title":"4. IDEA配置Tomcat","slug":"_4-idea配置tomcat","link":"#_4-idea配置tomcat","children":[{"level":3,"title":"4.1 热加载选项说明","slug":"_4-1-热加载选项说明","link":"#_4-1-热加载选项说明","children":[]},{"level":3,"title":"4.2 端口修改","slug":"_4-2-端口修改","link":"#_4-2-端口修改","children":[]},{"level":3,"title":"4.3 out目录","slug":"_4-3-out目录","link":"#_4-3-out目录","children":[]},{"level":3,"title":"4.4 javaweb工程目录","slug":"_4-4-javaweb工程目录","link":"#_4-4-javaweb工程目录","children":[]}]}],"git":{},"readingTime":{"minutes":3.27,"words":980},"filePathRelative":"codenotes/back/javaweb/Tomcat.md","localizedDate":"2024年10月7日","excerpt":"<p>请求和响应是成对出现的，有请求就有响应。</p>\\n<h2>1. Web基础</h2>\\n<h3>1.1 Web 资源的分类</h3>\\n<blockquote>\\n<p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片</p>\\n<p>动态资源： jsp 页面、Servlet 程序</p>\\n</blockquote>\\n<h3>1.2 常用的Web 服务器</h3>\\n<p>Tomcat、Jboss、GlassFish、Resin、WebLogic</p>\\n<h3>1.3 BS模式</h3>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{v as comp,_ as data};
