import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-eWV4nnR8.js";const p={};function l(i,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h2 id="_1-requestmapping注解" tabindex="-1"><a class="header-anchor" href="#_1-requestmapping注解"><span>1. @RequestMapping注解</span></a></h2><h3 id="_1-1-功能" tabindex="-1"><a class="header-anchor" href="#_1-1-功能"><span>1.1 功能</span></a></h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="_1-2-位置" tabindex="-1"><a class="header-anchor" href="#_1-2-位置"><span>1.2 位置</span></a></h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestMappingController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRequestMapping&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-3-value属性" tabindex="-1"><a class="header-anchor" href="#_1-3-value属性"><span>1.3 value属性</span></a></h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/testRequestMapping}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/test}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span></span>
<span class="line">        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/testRequestMapping&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/test&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-method属性" tabindex="-1"><a class="header-anchor" href="#_1-4-method属性"><span>1.4 method属性</span></a></h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method &#39;POST&#39; not supported</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/test}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/test}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span></span>
<span class="line">        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/testRequestMapping&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/test&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射--&gt;@GetMapping</p><p>处理post请求的映射--&gt;@PostMapping</p><p>处理put请求的映射--&gt;@PutMapping</p><p>处理delete请求的映射--&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="_1-5-params属性" tabindex="-1"><a class="header-anchor" href="#_1-5-params属性"><span>1.5 params属性</span></a></h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>&quot;param&quot;：要求请求映射所匹配的请求必须携带param请求参数</p><p>&quot;!param&quot;：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>&quot;param=value&quot;：要求请求映射所匹配的请求必须携带param请求参数且 param=value</p><p>&quot;param!=value&quot;：要求请求映射所匹配的请求必须携带param请求参数但是 param!=value</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/test(username=&#39;admin&#39;,password=123456)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的params属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span></span>
<span class="line">        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/testRequestMapping&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/test&quot;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">,</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;password!=123456&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：<code>Parameter conditions &quot;username, password!=123456&quot; not met for actual request parameters: username={admin}, password={123456}</code></p></blockquote><h3 id="_1-6-headers属性" tabindex="-1"><a class="header-anchor" href="#_1-6-headers属性"><span>1.6 headers属性</span></a></h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>&quot;header&quot;：要求请求映射所匹配的请求必须携带header请求头信息</p><p>&quot;!header&quot;：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>&quot;header=value&quot;：要求请求映射所匹配的请求必须携带header请求头信息且 header=value</p><p>&quot;header!=value&quot;：要求请求映射所匹配的请求必须携带header请求头信息且 header!=value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="_1-7-springmvc支持ant风格的路径" tabindex="-1"><a class="header-anchor" href="#_1-7-springmvc支持ant风格的路径"><span>1.7 SpringMVC支持ant风格的路径</span></a></h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用/**/xxx的方式</p><h3 id="_1-8-springmvc支持路径中的占位符" tabindex="-1"><a class="header-anchor" href="#_1-8-springmvc支持路径中的占位符"><span>1.8 SpringMVC支持路径中的占位符</span></a></h3><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/testRest/1/admin}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试路径中的占位符--&gt;/testRest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRest/{id}/{username}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;id:&quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;,username:&quot;</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//最终输出的内容为--&gt;id:1,username:admin</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50)]))}const u=s(p,[["render",l],["__file","2@RequestMapping注解.html.vue"]]),r=JSON.parse('{"path":"/codenotes/back/spring/springmvc/2@RequestMapping%E6%B3%A8%E8%A7%A3.html","title":"RequestMapping 注解","lang":"zh-CN","frontmatter":{"title":"RequestMapping 注解","category":["计算机"],"tag":["SpringMVC"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-11-07T00:00:00.000Z","headerDepth":2,"description":"1. @RequestMapping注解 1.1 功能 从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。 1.2 位置 @RequestMapping标识一个类：设置映射请求的请求路径的...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/spring/springmvc/2@RequestMapping%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"RequestMapping 注解"}],["meta",{"property":"og:description","content":"1. @RequestMapping注解 1.1 功能 从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。 1.2 位置 @RequestMapping标识一个类：设置映射请求的请求路径的..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"SpringMVC"}],["meta",{"property":"article:published_time","content":"2024-11-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"RequestMapping 注解\\",\\"description\\":\\"1. @RequestMapping注解 1.1 功能 从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。 1.2 位置 @RequestMapping标识一个类：设置映射请求的请求路径的...\\"}"]]},"headers":[{"level":2,"title":"1. @RequestMapping注解","slug":"_1-requestmapping注解","link":"#_1-requestmapping注解","children":[{"level":3,"title":"1.1 功能","slug":"_1-1-功能","link":"#_1-1-功能","children":[]},{"level":3,"title":"1.2 位置","slug":"_1-2-位置","link":"#_1-2-位置","children":[]},{"level":3,"title":"1.3 value属性","slug":"_1-3-value属性","link":"#_1-3-value属性","children":[]},{"level":3,"title":"1.4 method属性","slug":"_1-4-method属性","link":"#_1-4-method属性","children":[]},{"level":3,"title":"1.5 params属性","slug":"_1-5-params属性","link":"#_1-5-params属性","children":[]},{"level":3,"title":"1.6 headers属性","slug":"_1-6-headers属性","link":"#_1-6-headers属性","children":[]},{"level":3,"title":"1.7 SpringMVC支持ant风格的路径","slug":"_1-7-springmvc支持ant风格的路径","link":"#_1-7-springmvc支持ant风格的路径","children":[]},{"level":3,"title":"1.8 SpringMVC支持路径中的占位符","slug":"_1-8-springmvc支持路径中的占位符","link":"#_1-8-springmvc支持路径中的占位符","children":[]}]}],"git":{},"readingTime":{"minutes":4.65,"words":1396},"filePathRelative":"codenotes/back/spring/springmvc/2@RequestMapping注解.md","localizedDate":"2024年11月7日","excerpt":"<h2>1. @RequestMapping注解</h2>\\n<h3>1.1 功能</h3>\\n<p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>\\n<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>\\n<h3>1.2 位置</h3>\\n<p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>\\n<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>\\n<div class=\\"language-java line-numbers-mode has-collapsed-lines collapsed\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--vp-collapsed-lines:10;\\"><pre><code><span class=\\"line\\"><span class=\\"token annotation punctuation\\">@Controller</span></span>\\n<span class=\\"line\\"><span class=\\"token annotation punctuation\\">@RequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/test\\"</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RequestMappingController</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span>\\n<span class=\\"line\\">    <span class=\\"token annotation punctuation\\">@RequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/testRequestMapping\\"</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">testRequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"success\\"</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div><div class=\\"collapsed-lines\\"></div></div>","autoDesc":true}');export{u as comp,r as data};
