import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-eWV4nnR8.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_1-单元测试junit" tabindex="-1"><a class="header-anchor" href="#_1-单元测试junit"><span>1. 单元测试Junit</span></a></h1><h2 id="_1-1-什么是单元测试-掌握" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是单元测试-掌握"><span>1.1 什么是单元测试？（掌握）</span></a></h2><p>对部分代码进行测试。</p><h2 id="_1-2-junit的特点-掌握" tabindex="-1"><a class="header-anchor" href="#_1-2-junit的特点-掌握"><span>1.2 Junit的特点？（掌握）</span></a></h2><ul><li><p>是一个第三方的工具。（把别人写的代码导入项目中）（专业叫法：导jar包）</p></li><li><p>如果运行结果显示绿色，表示运行结果是正确的。</p><p>如果运行结果显示红色，表示运行结果是错误的。</p></li></ul><h2 id="_1-3-基本用法-掌握" tabindex="-1"><a class="header-anchor" href="#_1-3-基本用法-掌握"><span>1.3 基本用法：（掌握）</span></a></h2><p>1，一定要先写一个方法。</p><p>2，在这个方法的上面写@Test</p><p>3，鼠标点一下@Test 按alt + 回车，点击Junit4</p><p>​ 此时就可以自动导包。</p><p>​ 如果自动导包失败（连接外网，或者自己手动导包）</p><p>​ 如果导包成功在左下角就会出现Junit4的相关jar包</p><h3 id="手动导包-掌握" tabindex="-1"><a class="header-anchor" href="#手动导包-掌握"><span>手动导包（掌握）</span></a></h3><p>1，在当前模块下，右键新建一个文件夹（lib）</p><p>2，把今天资料里面的两个jar包，拷贝到lib文件夹里面</p><p>3，选中两个jar右键点击add as a lib....</p><p>4，到代码中，找到@Test，按alt + 回车，再来导入。</p><h3 id="运行测试代码-掌握" tabindex="-1"><a class="header-anchor" href="#运行测试代码-掌握"><span>运行测试代码（掌握）</span></a></h3><ul><li>只能直接运行无参无返回值的非静态方法</li><li>想要运行谁，就右键点击哪个方法。如果想要运行一个类里面所有的测试方法，选择类名，有点点击即可。</li></ul><h3 id="junit正确的打开方式-正确的使用方式-掌握" tabindex="-1"><a class="header-anchor" href="#junit正确的打开方式-正确的使用方式-掌握"><span>Junit正确的打开方式（正确的使用方式）（掌握）</span></a></h3><p>注意点：并不是直接在要测试的方法上面直接加@Test</p><p>原因：因为要测试的方法有可能是有参数的，有返回值，或者是静态的。</p><h3 id="正确的使用方式-掌握" tabindex="-1"><a class="header-anchor" href="#正确的使用方式-掌握"><span>正确的使用方式：（掌握）</span></a></h3><p>1，新建测试类</p><p>2，新建测试方法（要测试的方法名 + Test） methodTest</p><p>3，在这个方法中直接调用要测试的方法</p><p>4，在测试方法的上面写@Test</p><p>代码示例：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">//真正用来测试的类</span></span>
<span class="line"><span class="token comment">//测试用例（测试类）</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//在这个类里面再写无参无返回值的非静态方法</span></span>
<span class="line">    <span class="token comment">//在方法中调用想要测试的方法</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//调用要测试的方法</span></span>
<span class="line">        <span class="token class-name">JunitDemo1</span> jd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JunitDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        jd<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="实际开发中单元测试的使用方式-掌握" tabindex="-1"><a class="header-anchor" href="#实际开发中单元测试的使用方式-掌握"><span>实际开发中单元测试的使用方式（掌握）</span></a></h3><p>需求：测试File中的delete方法，写的是否正确（掌握）</p><p>开发中的测试原则：</p><p>不污染原数据。</p><p>代码示例：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitDemo3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//在实际开发中，真正完整的单元测试该怎么写？</span></span>
<span class="line">    <span class="token comment">//前提：</span></span>
<span class="line">    <span class="token comment">//以后在工作的时候，测试代码不能污染原数据。（修改，篡改）</span></span>
<span class="line">    <span class="token comment">//1.利用Before去对数据做一个初始化的动作</span></span>
<span class="line">    <span class="token comment">//2.利用Test真正的去测试方法</span></span>
<span class="line">    <span class="token comment">//3.利用After去还原数据</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//需求：测试File类中的delete方法是否书写正确？？？</span></span>
<span class="line">    <span class="token annotation punctuation">@Before</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforemethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//先备份</span></span>
<span class="line">        <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\moon\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\moon\\\\Desktop\\\\copy.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> b<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//作为一个标准的测试人员，运行完单元测试之后，不能污染原数据</span></span>
<span class="line">    <span class="token comment">//需要达到下面两个要求：</span></span>
<span class="line">    <span class="token comment">//1.得到结果</span></span>
<span class="line">    <span class="token comment">//2.a.txt还在而且其他的备份文件消失</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\moon\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> delete <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//检查a.txt是否存在</span></span>
<span class="line">        <span class="token keyword">boolean</span> exists <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//只有同时满足了下面所有的断言，才表示delete方法编写正确</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;delete方法出错了&quot;</span><span class="token punctuation">,</span>delete<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;delete方法出错了&quot;</span><span class="token punctuation">,</span>exists<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@After</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aftermethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//还要对a.txt做一个还原</span></span>
<span class="line">        <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\moon\\\\Desktop\\\\copy.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\moon\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> b<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//备份数据要删除</span></span>
<span class="line">        src<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>作业：</p><p>​ 测试Properties类中的store方法是否书写正确？</p><p>开发心得：</p><p>1.Before 准备数据</p><p>2.Test 测试方法</p><p>3.After 还原</p><p>Before</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">准备数据</span>
<span class="line"><span class="token number">1.</span>创建<span class="token class-name">Properties</span>的对象</span>
<span class="line"><span class="token number">2.</span>put数据到集合当中</span>
<span class="line"><span class="token comment">//只不过在下面的方法中，我们也需要用到Properties的对象，所以写完之后要挪到成员位置</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line">调用store方法，保存数据到本地文件</span>
<span class="line"></span>
<span class="line">断言<span class="token number">1</span>：</span>
<span class="line">	判断当前文件是否存在</span>
<span class="line">断言<span class="token number">2</span>：</span>
<span class="line">	文件的大小一定是大于<span class="token number">0</span></span>
<span class="line">断言<span class="token number">3</span>：</span>
<span class="line">	再次读取文件中的数据，判断是否跟集合中一致</span>
<span class="line"></span>
<span class="line">结论：</span>
<span class="line">	如果所有的断言都通过了，表示store方法是正确的</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>After</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">把本地文件给删除</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="扩展点" tabindex="-1"><a class="header-anchor" href="#扩展点"><span>扩展点：</span></a></h3><p>在单元测试中，相对路径是相对当前模块而言的。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;aweihaoshuai.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//此时是把aweihaoshuai.txt这个文件新建到模块中了。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51)]))}const u=s(t,[["render",l],["__file","单元测试.html.vue"]]),d=JSON.parse('{"path":"/codenotes/back/javacore/javaadvance/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","title":"单元测试","lang":"zh-CN","frontmatter":{"title":"单元测试","author":"黑马_阿玮","category":["计算机"],"tag":["java"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-11-07T00:00:00.000Z","headerDepth":2,"description":"1. 单元测试Junit 1.1 什么是单元测试？（掌握） 对部分代码进行测试。 1.2 Junit的特点？（掌握） 是一个第三方的工具。（把别人写的代码导入项目中）（专业叫法：导jar包） 如果运行结果显示绿色，表示运行结果是正确的。 如果运行结果显示红色，表示运行结果是错误的。 1.3 基本用法：（掌握） 1，一定要先写一个方法。 2，在这个方法的...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javacore/javaadvance/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"单元测试"}],["meta",{"property":"og:description","content":"1. 单元测试Junit 1.1 什么是单元测试？（掌握） 对部分代码进行测试。 1.2 Junit的特点？（掌握） 是一个第三方的工具。（把别人写的代码导入项目中）（专业叫法：导jar包） 如果运行结果显示绿色，表示运行结果是正确的。 如果运行结果显示红色，表示运行结果是错误的。 1.3 基本用法：（掌握） 1，一定要先写一个方法。 2，在这个方法的..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"黑马_阿玮"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-11-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"单元测试\\",\\"description\\":\\"1. 单元测试Junit 1.1 什么是单元测试？（掌握） 对部分代码进行测试。 1.2 Junit的特点？（掌握） 是一个第三方的工具。（把别人写的代码导入项目中）（专业叫法：导jar包） 如果运行结果显示绿色，表示运行结果是正确的。 如果运行结果显示红色，表示运行结果是错误的。 1.3 基本用法：（掌握） 1，一定要先写一个方法。 2，在这个方法的...\\"}"]]},"headers":[{"level":1,"title":"1. 单元测试Junit","slug":"_1-单元测试junit","link":"#_1-单元测试junit","children":[{"level":2,"title":"1.1 什么是单元测试？（掌握）","slug":"_1-1-什么是单元测试-掌握","link":"#_1-1-什么是单元测试-掌握","children":[]},{"level":2,"title":"1.2 Junit的特点？（掌握）","slug":"_1-2-junit的特点-掌握","link":"#_1-2-junit的特点-掌握","children":[]},{"level":2,"title":"1.3 基本用法：（掌握）","slug":"_1-3-基本用法-掌握","link":"#_1-3-基本用法-掌握","children":[{"level":3,"title":"手动导包（掌握）","slug":"手动导包-掌握","link":"#手动导包-掌握","children":[]},{"level":3,"title":"运行测试代码（掌握）","slug":"运行测试代码-掌握","link":"#运行测试代码-掌握","children":[]},{"level":3,"title":"Junit正确的打开方式（正确的使用方式）（掌握）","slug":"junit正确的打开方式-正确的使用方式-掌握","link":"#junit正确的打开方式-正确的使用方式-掌握","children":[]},{"level":3,"title":"正确的使用方式：（掌握）","slug":"正确的使用方式-掌握","link":"#正确的使用方式-掌握","children":[]},{"level":3,"title":"实际开发中单元测试的使用方式（掌握）","slug":"实际开发中单元测试的使用方式-掌握","link":"#实际开发中单元测试的使用方式-掌握","children":[]},{"level":3,"title":"扩展点：","slug":"扩展点","link":"#扩展点","children":[]}]}]}],"git":{},"readingTime":{"minutes":4.25,"words":1275},"filePathRelative":"codenotes/back/javacore/javaadvance/单元测试.md","localizedDate":"2024年11月7日","excerpt":"\\n<h2>1.1 什么是单元测试？（掌握）</h2>\\n<p>对部分代码进行测试。</p>\\n<h2>1.2 Junit的特点？（掌握）</h2>\\n<ul>\\n<li>\\n<p>是一个第三方的工具。（把别人写的代码导入项目中）（专业叫法：导jar包）</p>\\n</li>\\n<li>\\n<p>如果运行结果显示绿色，表示运行结果是正确的。</p>\\n<p>如果运行结果显示红色，表示运行结果是错误的。</p>\\n</li>\\n</ul>\\n<h2>1.3 基本用法：（掌握）</h2>\\n<p>1，一定要先写一个方法。</p>\\n<p>2，在这个方法的上面写@Test</p>\\n<p>3，鼠标点一下@Test  按alt + 回车，点击Junit4</p>","autoDesc":true}');export{u as comp,d as data};
