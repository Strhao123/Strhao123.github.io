import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as e}from"./app-eWV4nnR8.js";const t="/assets/1671089373948-DaUoEBNo.png",l="/assets/1671089523994-BZpxUsTv.png",c={};function o(i,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h2 id="_1-函数的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-函数的基本使用"><span>1. 函数的基本使用</span></a></h2><p><strong>函数:</strong> 是可以被重复使用的代码块</p><p>**作用：**函数可以把具有相同或相似逻辑的代码“包裹”起来，这么做的优势是有利于代码复用</p><h3 id="_1-1-声明-定义-函数" tabindex="-1"><a class="header-anchor" href="#_1-1-声明-定义-函数"><span>1.1 声明（定义）函数</span></a></h3><p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p><p>利用关键字 function 定义函数 （声明函数）</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数： 是可以被重复使用的代码块，作用是有利于代码复用</span></span>
<span class="line"><span class="token comment">// 1. 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;嗨~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>函数名命名跟变量一致，采用<code>小驼峰</code>命名法</li><li>函数名经常采用 动词</li></ol><h3 id="_1-2-调用" tabindex="-1"><a class="header-anchor" href="#_1-2-调用"><span>1.2 调用</span></a></h3><p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 基础 - 声明和调用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;嗨~&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span>
<span class="line">    <span class="token comment">// 函数名()</span></span>
<span class="line">        </span>
<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 可以重复被调用，多少次都可以</span></span>
<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><blockquote><p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。</p></blockquote><h2 id="_2-函数的整体认知" tabindex="-1"><a class="header-anchor" href="#_2-函数的整体认知"><span>2. 函数的整体认知</span></a></h2><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> 结果</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 输出函数返回的结果</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ol><li>函数参数，如果有多个则用逗号分隔，用于接受传递过来的数据</li><li>return 关键字可以把结果返回给调用者</li></ol><h2 id="_3-函数参数" tabindex="-1"><a class="header-anchor" href="#_3-函数参数"><span>3. 函数参数</span></a></h2><p>通过向函数传递参数，可以让函数更加灵活多变</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>**形参：**声明函数时小括号里的叫形参（形式上的参数）</p><p>**实参：**调用函数时小括号里的叫实参（实际上的参数）</p><p><strong>执行过程：</strong> 会把实参的数据传递给形参，从而提供给函数内部使用，我们可以把形参理解为变量</p><p>我们曾经使用过的 alert(&#39;打印&#39;)，parseInt(&#39;11px&#39;)，Number(&#39;11&#39;)本质上都是函数调用的传参</p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 函数的参数  形参和实参个数不匹配</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 1. 形参个数过多， 会自动补充 undefined </span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 形参 </span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 实参   3</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 实参  NaN  x = 1  y 没有给值默认值是 undefined</span></span>
<span class="line">  <span class="token comment">//  1 + undefined  = NaN</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 实参个数过多，则多余的实参会被忽略</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 实参 3</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3. 开发中提倡要保证实参和形参个数统一</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>在Javascript中 实参的个数和形参的个数可以不一致</p><ul><li>如果形参过多 会自动填上undefined</li><li>如果实参过多 那么多余的实参会被忽略</li></ul><h2 id="_4-逻辑中断" tabindex="-1"><a class="header-anchor" href="#_4-逻辑中断"><span>4. 逻辑中断</span></a></h2><p>逻辑中断： 存在于逻辑运算符 &amp;&amp; 和 || 中，左边如果满足一定条件会中断代码执行，也称为逻辑短路</p><blockquote><p>false &amp;&amp; anything // 逻辑与左边false则中断，如果左边为true，则返回右边代码的值</p><p>true || anything // 逻辑或左边true则中断，如果左边为false，则返回右边代码的值</p></blockquote><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 逻辑中断   &amp;&amp; ||</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 逻辑与中断：如果左边为假，则中断，如果左边为真，则返回右边的值</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 3 此处不会发生逻辑中断</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 3 此处不会发生逻辑中断</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 逻辑或中断，如果左侧为真，则中断，如果左侧为假，则返回右边的值</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true  发生了中断</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1  发生了中断</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3 此处不会发生逻辑中断</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 使用场景</span></span>
<span class="line"><span class="token comment">// function sum(x, y) {</span></span>
<span class="line"><span class="token comment">//   return x + y</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"><span class="token comment">// console.log(sum(1, 2)) // 3</span></span>
<span class="line"><span class="token comment">// console.log(sum()) // NaN</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// x = undefined</span></span>
<span class="line">  <span class="token comment">//  x = undefined || 0</span></span>
<span class="line">  <span class="token comment">// x = 1 || 0</span></span>
<span class="line">  x <span class="token operator">=</span> x <span class="token operator">||</span> <span class="token number">0</span></span>
<span class="line">  y <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_5-函数默认参数" tabindex="-1"><a class="header-anchor" href="#_5-函数默认参数"><span>5. 函数默认参数</span></a></h2><p>默认参数：可以给形参设置默认值</p><blockquote><p>说明：这个默认值只会在缺少实参传递或者实参是undefined才会被执行</p></blockquote><p><strong>默认参数和逻辑中断使用场景区别：</strong></p><ol><li>默认参数主要处理函数形参（处理参数要比逻辑中断更简单）</li><li>逻辑中断除了参数还可以处理更多的需求</li></ol><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 默认参数: 给形参一个默认值</span></span>
<span class="line">  <span class="token comment">// 1. 默认参数里面的值执行：</span></span>
<span class="line">  <span class="token comment">// 1.1 没有实参传递过来 x = 0 </span></span>
<span class="line">  <span class="token comment">// 1.2 有实参传递但是传递的是undefined  x = 0</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 默认参数和逻辑中断使用场景的区别：</span></span>
<span class="line">  <span class="token comment">// 2.1 默认参数主要针对的是形参</span></span>
<span class="line">  <span class="token comment">// 2.2 逻辑中断除了处理参数之外，还可以做更多</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_6-函数返回值" tabindex="-1"><a class="header-anchor" href="#_6-函数返回值"><span>6. 函数返回值</span></a></h2><p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？</p><p>要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p><blockquote><p>返回值：把处理结果返回给调用者</p></blockquote><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">// 函数返回值细节</span></span>
<span class="line">    <span class="token comment">// 1. return 结束函数，return 后面的代码不会执行了， break退出循环或者switch</span></span>
<span class="line">    <span class="token comment">// function sum(x, y) {</span></span>
<span class="line">    <span class="token comment">//   return x + y</span></span>
<span class="line">    <span class="token comment">//   console.log(&#39;我不会执行&#39;)</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token comment">// console.log(sum(1, 3))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. return 和被返回的结果不要换行</span></span>
<span class="line">    <span class="token comment">// function sum(x, y) {</span></span>
<span class="line">    <span class="token comment">//   return</span></span>
<span class="line">    <span class="token comment">//   x + y</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token comment">// console.log(sum(1, 3))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 如果函数没有return 则默认返回的是 undefined</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>总结：</p><ol><li>return会立即结束当前函数，所以后面代码不会再被执行</li><li>在 return 关键字和被返回的表达式之间不允许使用换行符，否则内部执行相当于会自动补充分号</li><li>函数可以没有 return，这种情况函数默认返回值为 undefined</li></ol><h2 id="_7-作用域" tabindex="-1"><a class="header-anchor" href="#_7-作用域"><span>7. 作用域</span></a></h2><p><strong>作用域（scope）</strong>： 变量或者值在代码中可用性的范围</p><p>**作用：**作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h3 id="_7-1-全局作用域" tabindex="-1"><a class="header-anchor" href="#_7-1-全局作用域"><span>7.1 全局作用域</span></a></h3><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p><p>处于全局作用域内的变量，称为全局变量</p><h3 id="_7-2-局部作用域" tabindex="-1"><a class="header-anchor" href="#_7-2-局部作用域"><span>7.2 局部作用域</span></a></h3><ol><li>函数作用域。作用于函数内的代码环境</li><li>块级作用域。{ } 大括号内部</li></ol><p>处于局部作用域内的变量称为局部变量</p><blockquote><p>注意：</p><ol><li>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</li><li>但是有一种情况，函数内部的形参可以看做是局部变量。</li></ol></blockquote><h3 id="_7-3-变量的访问原则" tabindex="-1"><a class="header-anchor" href="#_7-3-变量的访问原则"><span>7.3 变量的访问原则</span></a></h3><p>访问原则：在能够访问到的情况下先局部，局部没有再找全局，总结： <code>就近原则</code></p><h2 id="_8-匿名函数" tabindex="-1"><a class="header-anchor" href="#_8-匿名函数"><span>8. 匿名函数</span></a></h2><p>函数可以分为具名函数和匿名函数</p><p>匿名函数：没有名字的函数,无法直接使用。</p><h3 id="_8-1-函数表达式" tabindex="-1"><a class="header-anchor" href="#_8-1-函数表达式"><span>8.1 函数表达式</span></a></h3><p>将匿名函数赋值给一个变量，并且通过变量名称进行调用 我们将这个称为函数表达式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 声明</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数表达式&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 调用</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>其实函数也是一种数据类型</li><li>函数表达式必须先定义，后使用</li><li>函数的形参和实参使用跟具名函数一致</li></ol><h3 id="_8-2-立即执行函数" tabindex="-1"><a class="header-anchor" href="#_8-2-立即执行函数"><span>8.2 立即执行函数</span></a></h3><p>IIFE (立即执行函数表达式) (Immediately Invoked Function Expression)</p><p><strong>场景介绍:</strong> 避免全局变量之间的污染</p><p>**注意：**多个立即执行函数要用 ; 隔开，要不然会报错</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> xxx  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>xxxx<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,72)]))}const d=s(c,[["render",o],["__file","js04.html.vue"]]),k=JSON.parse(`{"path":"/codenotes/ui/js/js04.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 函数的基本使用 函数: 是可以被重复使用的代码块 **作用：**函数可以把具有相同或相似逻辑的代码“包裹”起来，这么做的优势是有利于代码复用 1.1 声明（定义）函数 声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分 利用关键字 function 定义函数 （声明函数） 语法： 注意： 函数名命名跟变量一致，采用小驼峰...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/ui/js/js04.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:description","content":"1. 函数的基本使用 函数: 是可以被重复使用的代码块 **作用：**函数可以把具有相同或相似逻辑的代码“包裹”起来，这么做的优势是有利于代码复用 1.1 声明（定义）函数 声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分 利用关键字 function 定义函数 （声明函数） 语法： 注意： 函数名命名跟变量一致，采用小驼峰..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ahzy\\",\\"url\\":\\"https://gitee.com/private_crh\\"}]}"]]},"headers":[{"level":2,"title":"1. 函数的基本使用","slug":"_1-函数的基本使用","link":"#_1-函数的基本使用","children":[{"level":3,"title":"1.1 声明（定义）函数","slug":"_1-1-声明-定义-函数","link":"#_1-1-声明-定义-函数","children":[]},{"level":3,"title":"1.2 调用","slug":"_1-2-调用","link":"#_1-2-调用","children":[]}]},{"level":2,"title":"2. 函数的整体认知","slug":"_2-函数的整体认知","link":"#_2-函数的整体认知","children":[]},{"level":2,"title":"3. 函数参数","slug":"_3-函数参数","link":"#_3-函数参数","children":[]},{"level":2,"title":"4. 逻辑中断","slug":"_4-逻辑中断","link":"#_4-逻辑中断","children":[]},{"level":2,"title":"5. 函数默认参数","slug":"_5-函数默认参数","link":"#_5-函数默认参数","children":[]},{"level":2,"title":"6. 函数返回值","slug":"_6-函数返回值","link":"#_6-函数返回值","children":[]},{"level":2,"title":"7. 作用域","slug":"_7-作用域","link":"#_7-作用域","children":[{"level":3,"title":"7.1 全局作用域","slug":"_7-1-全局作用域","link":"#_7-1-全局作用域","children":[]},{"level":3,"title":"7.2 局部作用域","slug":"_7-2-局部作用域","link":"#_7-2-局部作用域","children":[]},{"level":3,"title":"7.3 变量的访问原则","slug":"_7-3-变量的访问原则","link":"#_7-3-变量的访问原则","children":[]}]},{"level":2,"title":"8. 匿名函数","slug":"_8-匿名函数","link":"#_8-匿名函数","children":[{"level":3,"title":"8.1 函数表达式","slug":"_8-1-函数表达式","link":"#_8-1-函数表达式","children":[]},{"level":3,"title":"8.2 立即执行函数","slug":"_8-2-立即执行函数","link":"#_8-2-立即执行函数","children":[]}]}],"git":{},"readingTime":{"minutes":6.9,"words":2069},"filePathRelative":"codenotes/ui/js/js04.md","excerpt":"<h2>1. 函数的基本使用</h2>\\n<p><strong>函数:</strong> 是可以被重复使用的代码块</p>\\n<p>**作用：**函数可以把具有相同或相似逻辑的代码“包裹”起来，这么做的优势是有利于代码复用</p>\\n<h3>1.1 声明（定义）函数</h3>\\n<p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p>\\n<p>利用关键字 function 定义函数 （声明函数）</p>\\n<p>语法：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre><code><span class=\\"line\\"><span class=\\"token operator\\">&lt;</span>script<span class=\\"token operator\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 函数： 是可以被重复使用的代码块，作用是有利于代码复用</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 1. 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">sayHi</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'嗨~'</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,k as data};
