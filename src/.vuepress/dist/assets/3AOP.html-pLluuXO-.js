import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as e}from"./app-eWV4nnR8.js";const t="/assets/image-20241221114515973-ZnDFmoue.png",l="/assets/image-20241221132820252-CWEJFexx.png",c="/assets/image-20241221132832863-bHQihlyQ.png",o="/assets/image-20241221142940743-CekifOrM.png",i="/assets/image-20241222094129264-WxjYEu8c.png",u={};function r(k,n){return e(),a("div",null,n[0]||(n[0]=[p('<br><h2 id="_1-动态代理" tabindex="-1"><a class="header-anchor" href="#_1-动态代理"><span>1. 动态代理</span></a></h2><h3 id="_1-1-需求" tabindex="-1"><a class="header-anchor" href="#_1-1-需求"><span>1.1 需求</span></a></h3><p>有 Vehicle(交通工具接口, 有一个 run 方法), 下面有两个实现类Car 和Ship</p><p>当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后有统一的输出</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>动态代理就是拿来解决代码的冗余，并能更好维护</p><p>OOP =&gt; AOP 思想的转换</p><h3 id="_1-2-入门案例" tabindex="-1"><a class="header-anchor" href="#_1-2-入门案例"><span>1.2 入门案例</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>proxy2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * VehicleProxyProvider 该类可以返回一个代理对象.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VehicleProxyProvider</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个属性</span></span>
<span class="line">    <span class="token comment">//target_vehicle 表示真正要执行的对象</span></span>
<span class="line">    <span class="token comment">//该对象实现了Vehicle接口</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Vehicle</span> target_vehicle<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//构造器，传入的值必须是实现了接口的对象</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">VehicleProxyProvider</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span> target_vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>target_vehicle <span class="token operator">=</span> target_vehicle<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//编写一个方法，可以返回一个代理对象, 该代理对象可以通过反射机制调用到被代理对象（目标对象）的方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Vehicle</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//得到类加载器</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span></span>
<span class="line">                target_vehicle<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//得到要代理的对象/被执行对象 的接口信息,底层是通过接口来完成调用</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> target_vehicle<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//创建InvocationHandler 对象</span></span>
<span class="line">        <span class="token comment">//因为 InvocationHandler 是接口，所以我们可以通过匿名对象的方式来创建该对象</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         *</span>
<span class="line">         * public interface InvocationHandler <span class="token punctuation">{</span></span>
<span class="line">         *  public Object invoke(Object proxy, Method method, Object[] args)</span>
<span class="line">         *         throws Throwable;</span>
<span class="line">         * <span class="token punctuation">}</span></span>
<span class="line">         * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span>
<span class="line">         *</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token doc-comment comment">/**</span>
<span class="line">             * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span>
<span class="line">             * <span class="token keyword">@param</span> <span class="token parameter">o</span> 表示代理对象</span>
<span class="line">             * <span class="token keyword">@param</span> <span class="token parameter">method</span> 就是通过代理对象调用方法时，的哪个方法 代理对象.run()</span>
<span class="line">             * <span class="token keyword">@param</span> <span class="token parameter">args</span> : 表示调用 代理对象.run(xx) 传入的参数</span>
<span class="line">             * <span class="token keyword">@return</span> 表示 代理对象.run(xx) 执行后的结果.</span>
<span class="line">             * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span></span>
<span class="line">             */</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交通工具开始运行了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">//这里是我们的反射基础 =&gt; OOP</span></span>
<span class="line">                <span class="token comment">//method 是？: public abstract void com.hspedu.spring.proxy2.Vehicle.run()</span></span>
<span class="line">                <span class="token comment">//target_vehicle 是? Ship对象</span></span>
<span class="line">                <span class="token comment">//args 是null</span></span>
<span class="line">                <span class="token comment">//这里通过反射+动态绑定机制，就会执行到被代理对象的方法</span></span>
<span class="line">                <span class="token comment">//执行完毕就返回</span></span>
<span class="line">                <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target_vehicle<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交通工具停止运行了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line"></span>
<span class="line">          public static Object newProxyInstance(ClassLoader loader,</span>
<span class="line">                                          Class&lt;?&gt;[] interfaces,</span>
<span class="line">                                          InvocationHandler h)</span>
<span class="line"></span>
<span class="line">          老师解读</span>
<span class="line">          1. Proxy.newProxyInstance() 可以返回一个代理对象</span>
<span class="line">          2. ClassLoader loader: 类的加载器.</span>
<span class="line">          3. Class&lt;?&gt;[] interfaces 就是将来要代理的对象的接口信息</span>
<span class="line">          4. InvocationHandler h 调用处理器/对象 有一个非常重要的方法invoke</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token class-name">Vehicle</span> proxy <span class="token operator">=</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>proxy2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestVehicle</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//OOP基础=&gt;java基础</span></span>
<span class="line">        <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ship</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//动态绑定</span></span>
<span class="line">        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">proxyRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//创建Ship对象</span></span>
<span class="line">        <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//创建VehicleProxyProvider对象, 并且我们传入的要代理的对象</span></span>
<span class="line">        <span class="token class-name">VehicleProxyProvider</span> vehicleProxyProvider <span class="token operator">=</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">VehicleProxyProvider</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取代理对象, 该对象可以代理执行方法</span></span>
<span class="line">        <span class="token comment">//老师解读</span></span>
<span class="line">        <span class="token comment">//1. porxy 编译类型 Vehicle</span></span>
<span class="line">        <span class="token comment">//2. 运行类型 是代理类型 class com.sun.proxy.$Proxy9</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Vehicle</span> proxy <span class="token operator">=</span> vehicleProxyProvider<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;proxy的编译类型是 Vehicle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;proxy的运行类型是 &quot;</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//下面老韩就要给大家解读/debug怎么 执行到 代理对象的 public Object invoke(Object o, Method method, Object[] args)</span></span>
<span class="line">        <span class="token comment">//梳理完毕. proxy的编译类型是 Vehicle, 运行类型是 class com.sun.proxy.$Proxy9</span></span>
<span class="line">        <span class="token comment">//所以当执行run方法时，会执行到 代理对象的invoke</span></span>
<span class="line">        <span class="token comment">//如何体现动态 [1. 被代理的对象 2. 方法]</span></span>
<span class="line">        <span class="token comment">//proxy.run();</span></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result=&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-3-引出横切关注点概念" tabindex="-1"><a class="header-anchor" href="#_1-3-引出横切关注点概念"><span>1.3 引出横切关注点概念</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 可以返回一个动态代理对象, 可以执行SmartDog对象的方法</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxyProvider</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义我们要执行的目标对象, 该对象需要实现SmartAnimalable</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SmartAnimalable</span> target_obj<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//构造器</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyProxyProvider</span><span class="token punctuation">(</span><span class="token class-name">SmartAnimalable</span> target_obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>target_obj <span class="token operator">=</span> target_obj<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//方法, 可以返回代理对象，该代理对象可以执行目标对象</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SmartAnimalable</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1. 先到的类加载器/对象</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> target_obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2. 得到要执行的目标对象的接口信息</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> target_obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3. 创建InvocationHandler</span></span>
<span class="line">        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行前-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-参数 &quot;</span></span>
<span class="line">                            <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里从AOP看，就是一个横切关注点-前置通知</span></span>
<span class="line">                    <span class="token comment">//使用反射调用方法</span></span>
<span class="line">                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target_obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行正常结束-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-结果result= &quot;</span></span>
<span class="line">                            <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从AOP看, 也是一个横切关注点-返回通知</span></span>
<span class="line"></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token comment">//如果反射执行方法时，出现异常,就会进入到catch{}</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行异常-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token operator">+</span> <span class="token string">&quot;-异常类型=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从AOP看, 也是一个横切关注点-异常通知</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment">//不管你是否出现异常,最终都会执行到finally{}</span></span>
<span class="line">                    <span class="token comment">//从AOP的角度看, 也是一个横切关注点-最终通知</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法最终结束-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//创建代理对象</span></span>
<span class="line">        <span class="token class-name">SmartAnimalable</span> proxy <span class="token operator">=</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token class-name">SmartAnimalable</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-4-动态代理局限性" tabindex="-1"><a class="header-anchor" href="#_1-4-动态代理局限性"><span>1.4 动态代理局限性</span></a></h3><p>在 <code>MyProxyProvider.java</code> 中, 我们的输出语句功能比较弱，在实际开发中，我们希望以一个方法的形式，嵌入到真正执行的目标方法前后</p><p>但是为了解耦，将方法写到另一个类（该类称为切面类）中</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>proxy3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 我们自己编写一个一个极简的AOP类</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HspAOP</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//我们一个方法,在目标对象执行前执行</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HspAOP-方法执行前-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-参数 &quot;</span></span>
<span class="line">                <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里从AOP看，就是一个横切关注点-前置通知</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//我们一个方法,在目标对象执行后执行</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HspAOP-方法执行正常结束-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-结果result= &quot;</span></span>
<span class="line">                <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从AOP看, 也是一个横切关注点-返回通知</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>proxy3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> 韩顺平</span>
<span class="line"> * <span class="token keyword">@version</span> 1.0</span>
<span class="line"> * 可以返回一个动态代理对象, 可以执行SmartDog对象的方法</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxyProvider</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义我们要执行的目标对象, 该对象需要实现SmartAnimalable</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SmartAnimalable</span> target_obj<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//构造器</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyProxyProvider</span><span class="token punctuation">(</span><span class="token class-name">SmartAnimalable</span> target_obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>target_obj <span class="token operator">=</span> target_obj<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//我们一个方法,在目标对象执行前执行</span></span>
<span class="line">    <span class="token comment">//public void before(Object proxy, Method method, Object[] args) {</span></span>
<span class="line">    <span class="token comment">//    System.out.println(&quot;before-方法执行前-日志-方法名-&quot; + method.getName() + &quot;-参数 &quot;</span></span>
<span class="line">    <span class="token comment">//            + Arrays.asList(args)); //这里从AOP看，就是一个横切关注点-前置通知</span></span>
<span class="line">    <span class="token comment">//}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">////我们一个方法,在目标对象执行后执行</span></span>
<span class="line">    <span class="token comment">//public void after(Method method, Object result) {</span></span>
<span class="line">    <span class="token comment">//    System.out.println(&quot;after-方法执行正常结束-日志-方法名-&quot; + method.getName() + &quot;-结果result= &quot;</span></span>
<span class="line">    <span class="token comment">//            + result);//从AOP看, 也是一个横切关注点-返回通知</span></span>
<span class="line">    <span class="token comment">//}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//方法, 可以返回代理对象，该代理对象可以执行目标对象</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SmartAnimalable</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1. 先到的类加载器/对象</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> target_obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2. 得到要执行的目标对象的接口信息</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> target_obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3. 创建InvocationHandler</span></span>
<span class="line">        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                    <span class="token comment">//before(proxy, method, args);</span></span>
<span class="line">                    <span class="token class-name">HspAOP</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                    <span class="token comment">//使用反射调用方法</span></span>
<span class="line">                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target_obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                    <span class="token comment">//after(method, result);</span></span>
<span class="line">                    <span class="token class-name">HspAOP</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token comment">//如果反射执行方法时，出现异常,就会进入到catch{}</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行异常-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token operator">+</span> <span class="token string">&quot;-异常类型=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从AOP看, 也是一个横切关注点-异常通知</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment">//不管你是否出现异常,最终都会执行到finally{}</span></span>
<span class="line">                    <span class="token comment">//从AOP的角度看, 也是一个横切关注点-最终通知</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法最终结束-日志-方法名-&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//创建代理对象</span></span>
<span class="line">        <span class="token class-name">SmartAnimalable</span> proxy <span class="token operator">=</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token class-name">SmartAnimalable</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-5-简易aop的局限" tabindex="-1"><a class="header-anchor" href="#_1-5-简易aop的局限"><span>1.5 简易AOP的局限</span></a></h3><ol><li>不灵活（一下子控制了所有的方法）</li><li>复用性差（接口类型也被写死了）</li><li>还是一种硬编码 (因为没有注解和反射支撑)</li><li>Spring AOP 闪亮登场-底层是 ASPECTJ</li></ol><h2 id="_2-aop介绍" tabindex="-1"><a class="header-anchor" href="#_2-aop介绍"><span>2. AOP介绍</span></a></h2><p>AOP 的全称(aspect oriented programming) ，面向切面编程</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-快速入门" tabindex="-1"><a class="header-anchor" href="#_3-快速入门"><span>3. 快速入门</span></a></h2><p>导入 AOP 编程需要的包</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在切面类声明通知</p><ol><li>前置通知@Before</li><li>返回通知@AfterReturning</li><li>异常通知@AfterThrowing</li><li>后置通知@After</li><li>环绕通知@Around</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SmartAnimalable</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">float</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">float</span> i<span class="token punctuation">,</span> <span class="token keyword">float</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">float</span> <span class="token function">getSub</span><span class="token punctuation">(</span><span class="token keyword">float</span> i<span class="token punctuation">,</span> <span class="token keyword">float</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartDog</span> <span class="token keyword">implements</span> <span class="token class-name">SmartAnimalable</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">float</span> i<span class="token punctuation">,</span> <span class="token keyword">float</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">float</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;getSum() 方法内部打印 result= &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getSub</span><span class="token punctuation">(</span><span class="token keyword">float</span> i<span class="token punctuation">,</span> <span class="token keyword">float</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">float</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;getSub() 方法内部打印 result= &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 使用切面编程来替代原来的动态代理类，机制是一样的. * @author Administrator</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//表示这个类是一个切面类</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span> <span class="token comment">//需要加入到 IOC 容器</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//这个就对应动态代理类的</span></span>
<span class="line">	<span class="token comment">//System.out.println(&quot; 日 志 -- 方 法 名 ： &quot;+methodName+&quot;-- 方法开始-- 参数：&quot;+Arrays.asList(args));</span></span>
<span class="line">	<span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public float com.hspedu.spring.aop.springaop.SmartDog.getSum(float ,float))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showBeginLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;前置通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">// 1. 在调用目标方法之前打印“方法开始”日志</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日志--方法名：&quot;</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;--方法开始--参数：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//这个就对应动态代理类的</span></span>
<span class="line">	<span class="token comment">//System.out.println(&quot;日志--方法名：&quot;+methodName+&quot;-- 方法正常结束--结果：result=&quot;+result);</span></span>
<span class="line">	<span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public float com.hspedu.spring.aop.springaop.SmartDog.getSum(float ,float))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showSuccessEndLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;返回通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">// 3. 在目标方法结束后打印“方法结束”日志</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日志--方法名：&quot;</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;--方法正常结束--~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//这个就对应动态代理类的</span></span>
<span class="line">	<span class="token comment">//System.out.println(&quot;日志--方法名：&quot;+methodName+&quot;--方法抛出异常--异常类型：&quot;+e.getClass().getName());</span></span>
<span class="line">	<span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public float com.hspedu.spring.aop.springaop.SmartDog.getSum(float ,float))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showExceptionLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">//这个就对应动态代理类的</span></span>
<span class="line">	<span class="token comment">//System.out.println(&quot;日志--方法名：&quot;+methodName+&quot;--方法最终结束&quot;);</span></span>
<span class="line">	<span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public float com.hspedu.spring.aop.springaop.SmartDog.getSum(float ,float))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showFinallyEndLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最终通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- 配置自动扫描的包,根据实际情况配置即可 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hspedu.spring.aop.aspectj<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token comment">&lt;!-- 开启基于注解的 AOP 功能 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopAspectjTest</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * spring aop 方式切入前置 before 和 后置 after 方法</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smartDogTestByProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;beans6.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//通过接口来获取</span></span>
<span class="line">	<span class="token class-name">SmartAnimalable</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SmartAnimalable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">float</span> sum <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">101.0f</span><span class="token punctuation">,</span> <span class="token number">11.2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sum= &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//getSub 没有 AOP 注解，所以就是普通调用</span></span>
<span class="line">	<span class="token comment">//bean.getSub(30.6f, 43.2f);</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-1-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-1-注意事项"><span>3.1 注意事项</span></a></h3><ol><li><p>关于切面类方法命名可以自己规范一下, 比如 showBeginLog() 、 showSuccessEndLog()、showExceptionLog()、showFinallyEndLog()</p></li><li><p>切入表达式的更多配置，比如使用模糊配置 <code>@Before(value=&quot;execution(* com.hspedu.aop.proxy.SmartDog.*(..))&quot;)</code></p></li><li><p>表示所有访问权限，所有包的下所有有类的所方法，都会被执行该前置通知方法 <code>@Before(value=&quot;execution(* *.*(..))&quot;)</code></p></li><li><p>当 spring 容器开启了 , 我们获取注入的对象, 需要以接口的类型来获取, 因为你注入的对象.getClass() 已经是代理类型了</p></li><li><p>当 spring 容器开启了 , 我们获取注入的对象, 也可以通过 id 来获取, 但是也要转成接口类型</p></li></ol><h2 id="_4-切入表达式" tabindex="-1"><a class="header-anchor" href="#_4-切入表达式"><span>4. 切入表达式</span></a></h2><h3 id="_4-1-作用" tabindex="-1"><a class="header-anchor" href="#_4-1-作用"><span>4.1 作用</span></a></h3><p>通过表达式的方式定位一个或多个具体的连接点</p><h3 id="_4-2-语法" tabindex="-1"><a class="header-anchor" href="#_4-2-语法"><span>4.2 语法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token punctuation">[</span>权限修饰符<span class="token punctuation">]</span> <span class="token punctuation">[</span>返回值类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>简单类名<span class="token operator">/</span>全类名<span class="token punctuation">]</span><span class="token punctuation">[</span>方法名<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-3-举例" tabindex="-1"><a class="header-anchor" href="#_4-3-举例"><span>4.3 举例</span></a></h3><p><code>execution(com.sina.spring.ArithmeticCalculator.*(..))</code></p><ul><li>ArithmeticCalculator 接口中声明的所有方法</li><li>第一个<code>*</code> ，代表任意修饰符及任意返回值</li><li>第二个<code>*</code> ，代表任意方法</li><li><code>..</code> 匹配任意数量、任意类型的参数</li><li>若目标类、接口与该切面类在同一个包中可以 <strong>省略包名</strong></li></ul><p><code>execution(* *.add(int,..)) || execution(* *.sub(int,..))</code></p><ul><li><p>在 AspectJ 中，切入点表达式可以通过 <code>|| &amp;&amp; !</code> 等操作符结合起来。</p></li><li><p>任意类中第一个参数为 int 类型的 add 方法或 sub 方法</p></li></ul><h3 id="_4-4-细节" tabindex="-1"><a class="header-anchor" href="#_4-4-细节"><span>4.4 细节</span></a></h3><ol><li>切入表达式也可以指向类的方法, 这时切入表达式会对该类/对象生效</li><li>切入表达式也可以指向接口的方法, 这时切入表达式会对实现了接口的类/对象生效</li><li>切入表达式也可以对没有实现接口的类，进行切入</li></ol><h3 id="_4-5-两种代理方式" tabindex="-1"><a class="header-anchor" href="#_4-5-两种代理方式"><span>4.5 两种代理方式</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Car</span> car <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若Car类没有实现接口，此处返回的仍然为代理对象，只不过不是 jdk 的 Proxy，而是Spring 的 CGlib的代理对象</p><p>动态代理 jdk 的 Proxy 与 Spring 的 CGlib区别 <a href="https://www.cnblogs.com/threeAgePie/p/15832586.html" target="_blank" rel="noopener noreferrer">原文出处</a> <a href="./img/daili.pdf">文档</a></p><h2 id="_5-joinpoint-连接点" tabindex="-1"><a class="header-anchor" href="#_5-joinpoint-连接点"><span>5. JoinPoint 连接点</span></a></h2><p>实际是一个连接点对象，通过 JoinPoint 可以获取到调用方法的签名</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取目标方法名</td></tr><tr><td>getDeclaringType().getSimpleName()</td><td>获取目标方法所属类的简单类名</td></tr><tr><td>getDeclaringTypeName()</td><td>获取目标方法所属类的类名</td></tr><tr><td>getModifiers()</td><td>获取目标方法声明类型(public、private、protected)</td></tr><tr><td>getArgs()</td><td>获取传入目标方法的参数，返回一个数组</td></tr><tr><td>getTarget()</td><td>获取被代理的对象</td></tr><tr><td>getThis()</td><td>获取代理对象自己</td></tr></tbody></table><h2 id="_6-返回通知获取结果" tabindex="-1"><a class="header-anchor" href="#_6-返回通知获取结果"><span>6. 返回通知获取结果</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public floatcom.hspedu.spring.aop.joinpoint.SmartDog.getSum(float, float))&quot;</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">&quot;res&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showSuccessEndLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;返回通知&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;--结果是--&quot;</span> <span class="token operator">+</span> res <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>returning = &quot;res&quot;, Object res <strong>名称保持一致</strong></li><li>res 调用 getSum() 返回的结果</li></ul><h2 id="_7-异常通知中获取异常" tabindex="-1"><a class="header-anchor" href="#_7-异常通知中获取异常"><span>7. 异常通知中获取异常</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public floatcom.hspedu.spring.aop.joinpoint.SmartDog.getSum(float, float))&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;throwable&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showExceptionLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常通知 -- 异常信息--&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-环绕通知" tabindex="-1"><a class="header-anchor" href="#_8-环绕通知"><span>8. 环绕通知</span></a></h2><p>环绕通知可以完成其它四个通知要做的事情</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定...)]</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span> <span class="token comment">//会注入SmartAnimalAspect2到容器</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect2</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//1. @Around: 表示这是一个环绕通知[完成其它四个通知的功能]</span></span>
<span class="line">    <span class="token comment">//2. value = &quot;execution(public float com.hspedu.spring.aop.aspectj.SmartDog.getSum(float, float)) 切入点表达式</span></span>
<span class="line">    <span class="token comment">//3. doAround 表示要切入的方法 - 调用结构 try-catch-finally</span></span>
<span class="line">    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public float com.hspedu.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//1.相当于前置通知完成的事情</span></span>
<span class="line">            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> argList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AOP环绕通知[-前置通知]&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;方法开始了--参数有：&quot;</span> <span class="token operator">+</span> argList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//在环绕通知中一定要调用joinPoint.proceed()来执行目标方法</span></span>
<span class="line">            result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//2.相当于返回通知完成的事情</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AOP环绕通知[-返回通知]&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;方法结束了--结果是：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//3.相当于异常通知完成的事情</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AOP环绕通知[-异常通知]&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;方法抛异常了--异常对象：&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//4.相当于最终通知完成的事情</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AOP环绕通知[-后置通知]&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;方法最终结束了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><code>result = joinPoint.proceed();</code> 这个就对应动态代理类的 <code>Object result = method.invoke(target_vehicle, args);</code></p><h2 id="_9-切入点表达式" tabindex="-1"><a class="header-anchor" href="#_9-切入点表达式"><span>9. 切入点表达式</span></a></h2><p>为了统一管理切入点表达式，可以使用切入点表达式重用技术</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//表示这个类是一个切面类</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span> <span class="token comment">//需要加入到 IOC 容器</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    </span>
<span class="line">	<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(public floatcom.hspedu.spring.aop.joinpoint.SmartDog.getSum(float, float))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;myPointCut()&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;throwable&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showExceptionLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常通知 -- 异常信息--&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span>   </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_10-切面优先级问题" tabindex="-1"><a class="header-anchor" href="#_10-切面优先级问题"><span>10. 切面优先级问题</span></a></h2><p>@order(value=n) 来控制 n 值越小，优先级越高</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//表示这个类是一个切面类</span></span>
<span class="line"><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span> <span class="token comment">//需要加入 IOC 容器</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect2</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_11-基于-xml-配置-aop" tabindex="-1"><a class="header-anchor" href="#_11-基于-xml-配置-aop"><span>11. 基于 XML 配置 AOP</span></a></h2><div class="language-xml line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="xml" data-title="xml" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span></span>
<span class="line">       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/aop<span class="token punctuation">&quot;</span></span></span>
<span class="line">       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!--使用XML配置，完成AOP编程--&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!--配置一个切面类对象-bean--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hspedu.spring.aop.xml.SmartAnimalAspect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>smartAnimalAspect<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!--配置一个SmartDog对象-bean--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hspedu.spring.aop.xml.SmartDog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>smartDog<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!--配置切面类, 细节一定要引入 xmlns:aop--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!--配置切入点--&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPointCut<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(public float com.hspedu.spring.aop.xml.SmartDog.getSum(float, float)))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!--配置切面的前置，返回, 异常, 最终通知--&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>smartAnimalAspect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!--配置前置通知--&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showBeginLog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPointCut<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!--返回通知--&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showSuccessEndLog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPointCut<span class="token punctuation">&quot;</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>res<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!--异常通知--&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showExceptionLog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPointCut<span class="token punctuation">&quot;</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>throwable<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!--最终通知--&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showFinallyEndLog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPointCut<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!--配置环绕通知--&gt;</span></span>
<span class="line">            <span class="token comment">&lt;!--&lt;aop:around method=&quot;&quot;/&gt;--&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li>配好<code> &lt;aop:pointcut&gt;</code> 才能配<code>&lt;aop:aspect</code></li><li>一定要引入 <code>xmlns:aop</code></li></ul>`,75)]))}const v=s(u,[["render",r],["__file","3AOP.html.vue"]]),b=JSON.parse('{"path":"/codenotes/back/spring/spring/3AOP.html","title":"AOP","lang":"zh-CN","frontmatter":{"title":"AOP","category":["计算机"],"tag":["Spring"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-12-20T00:00:00.000Z","headerDepth":2,"description":"1. 动态代理 1.1 需求 有 Vehicle(交通工具接口, 有一个 run 方法), 下面有两个实现类Car 和Ship 当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后有统一的输出 动态代理就是拿来解决代码的冗余，并能更好维护 OOP => AOP 思想的转换 1.2 入门案例 1.3 引...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/spring/spring/3AOP.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"AOP"}],["meta",{"property":"og:description","content":"1. 动态代理 1.1 需求 有 Vehicle(交通工具接口, 有一个 run 方法), 下面有两个实现类Car 和Ship 当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后有统一的输出 动态代理就是拿来解决代码的冗余，并能更好维护 OOP => AOP 思想的转换 1.2 入门案例 1.3 引..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-12-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"AOP\\",\\"description\\":\\"1. 动态代理 1.1 需求 有 Vehicle(交通工具接口, 有一个 run 方法), 下面有两个实现类Car 和Ship 当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后有统一的输出 动态代理就是拿来解决代码的冗余，并能更好维护 OOP => AOP 思想的转换 1.2 入门案例 1.3 引...\\"}"]]},"headers":[{"level":2,"title":"1. 动态代理","slug":"_1-动态代理","link":"#_1-动态代理","children":[{"level":3,"title":"1.1 需求","slug":"_1-1-需求","link":"#_1-1-需求","children":[]},{"level":3,"title":"1.2 入门案例","slug":"_1-2-入门案例","link":"#_1-2-入门案例","children":[]},{"level":3,"title":"1.3 引出横切关注点概念","slug":"_1-3-引出横切关注点概念","link":"#_1-3-引出横切关注点概念","children":[]},{"level":3,"title":"1.4 动态代理局限性","slug":"_1-4-动态代理局限性","link":"#_1-4-动态代理局限性","children":[]},{"level":3,"title":"1.5 简易AOP的局限","slug":"_1-5-简易aop的局限","link":"#_1-5-简易aop的局限","children":[]}]},{"level":2,"title":"2. AOP介绍","slug":"_2-aop介绍","link":"#_2-aop介绍","children":[]},{"level":2,"title":"3. 快速入门","slug":"_3-快速入门","link":"#_3-快速入门","children":[{"level":3,"title":"3.1 注意事项","slug":"_3-1-注意事项","link":"#_3-1-注意事项","children":[]}]},{"level":2,"title":"4.  切入表达式","slug":"_4-切入表达式","link":"#_4-切入表达式","children":[{"level":3,"title":"4.1 作用","slug":"_4-1-作用","link":"#_4-1-作用","children":[]},{"level":3,"title":"4.2 语法","slug":"_4-2-语法","link":"#_4-2-语法","children":[]},{"level":3,"title":"4.3 举例","slug":"_4-3-举例","link":"#_4-3-举例","children":[]},{"level":3,"title":"4.4 细节","slug":"_4-4-细节","link":"#_4-4-细节","children":[]},{"level":3,"title":"4.5 两种代理方式","slug":"_4-5-两种代理方式","link":"#_4-5-两种代理方式","children":[]}]},{"level":2,"title":"5. JoinPoint 连接点","slug":"_5-joinpoint-连接点","link":"#_5-joinpoint-连接点","children":[]},{"level":2,"title":"6. 返回通知获取结果","slug":"_6-返回通知获取结果","link":"#_6-返回通知获取结果","children":[]},{"level":2,"title":"7. 异常通知中获取异常","slug":"_7-异常通知中获取异常","link":"#_7-异常通知中获取异常","children":[]},{"level":2,"title":"8. 环绕通知","slug":"_8-环绕通知","link":"#_8-环绕通知","children":[]},{"level":2,"title":"9. 切入点表达式","slug":"_9-切入点表达式","link":"#_9-切入点表达式","children":[]},{"level":2,"title":"10. 切面优先级问题","slug":"_10-切面优先级问题","link":"#_10-切面优先级问题","children":[]},{"level":2,"title":"11. 基于 XML 配置 AOP","slug":"_11-基于-xml-配置-aop","link":"#_11-基于-xml-配置-aop","children":[]}],"git":{},"readingTime":{"minutes":13.66,"words":4098},"filePathRelative":"codenotes/back/spring/spring/3AOP.md","localizedDate":"2024年12月20日","excerpt":"<br>\\n<h2>1. 动态代理</h2>\\n<h3>1.1 需求</h3>\\n<p>有 Vehicle(交通工具接口, 有一个 run 方法), 下面有两个实现类Car 和Ship</p>\\n<p>当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后有统一的输出</p>\\n<figure><figcaption></figcaption></figure>\\n<p>动态代理就是拿来解决代码的冗余，并能更好维护</p>\\n<p>OOP =&gt; AOP 思想的转换</p>\\n<h3>1.2 入门案例</h3>\\n<div class=\\"language-java line-numbers-mode has-collapsed-lines collapsed\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--vp-collapsed-lines:10;\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>hspedu<span class=\\"token punctuation\\">.</span>spring<span class=\\"token punctuation\\">.</span>proxy2</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">InvocationHandler</span></span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Method</span></span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Proxy</span></span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token doc-comment comment\\">/**</span>\\n<span class=\\"line\\"> * VehicleProxyProvider 该类可以返回一个代理对象.</span>\\n<span class=\\"line\\"> */</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">VehicleProxyProvider</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">//定义一个属性</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">//target_vehicle 表示真正要执行的对象</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">//该对象实现了Vehicle接口</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Vehicle</span> target_vehicle<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">//构造器，传入的值必须是实现了接口的对象</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">VehicleProxyProvider</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vehicle</span> target_vehicle<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>target_vehicle <span class=\\"token operator\\">=</span> target_vehicle<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">//编写一个方法，可以返回一个代理对象, 该代理对象可以通过反射机制调用到被代理对象（目标对象）的方法</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Vehicle</span> <span class=\\"token function\\">getProxy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">//得到类加载器</span></span>\\n<span class=\\"line\\">        <span class=\\"token class-name\\">ClassLoader</span> classLoader <span class=\\"token operator\\">=</span></span>\\n<span class=\\"line\\">                target_vehicle<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClassLoader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">//得到要代理的对象/被执行对象 的接口信息,底层是通过接口来完成调用</span></span>\\n<span class=\\"line\\">        <span class=\\"token class-name\\">Class</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> interfaces <span class=\\"token operator\\">=</span> target_vehicle<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInterfaces</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">//创建InvocationHandler 对象</span></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">//因为 InvocationHandler 是接口，所以我们可以通过匿名对象的方式来创建该对象</span></span>\\n<span class=\\"line\\">        <span class=\\"token doc-comment comment\\">/**</span>\\n<span class=\\"line\\">         *</span>\\n<span class=\\"line\\">         * public interface InvocationHandler <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">         *  public Object invoke(Object proxy, Method method, Object[] args)</span>\\n<span class=\\"line\\">         *         throws Throwable;</span>\\n<span class=\\"line\\">         * <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">         * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span>\\n<span class=\\"line\\">         *</span>\\n<span class=\\"line\\">         */</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token class-name\\">InvocationHandler</span> invocationHandler <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InvocationHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token doc-comment comment\\">/**</span>\\n<span class=\\"line\\">             * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span>\\n<span class=\\"line\\">             * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">o</span> 表示代理对象</span>\\n<span class=\\"line\\">             * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">method</span> 就是通过代理对象调用方法时，的哪个方法 代理对象.run()</span>\\n<span class=\\"line\\">             * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">args</span> : 表示调用 代理对象.run(xx) 传入的参数</span>\\n<span class=\\"line\\">             * <span class=\\"token keyword\\">@return</span> 表示 代理对象.run(xx) 执行后的结果.</span>\\n<span class=\\"line\\">             * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Throwable</span></span></span>\\n<span class=\\"line\\">             */</span></span>\\n<span class=\\"line\\">            <span class=\\"token annotation punctuation\\">@Override</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> o<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Method</span> method<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">                    <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Throwable</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"交通工具开始运行了....\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">//这里是我们的反射基础 =&gt; OOP</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">//method 是？: public abstract void com.hspedu.spring.proxy2.Vehicle.run()</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">//target_vehicle 是? Ship对象</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">//args 是null</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">//这里通过反射+动态绑定机制，就会执行到被代理对象的方法</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">//执行完毕就返回</span></span>\\n<span class=\\"line\\">                <span class=\\"token class-name\\">Object</span> result <span class=\\"token operator\\">=</span> method<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">invoke</span><span class=\\"token punctuation\\">(</span>target_vehicle<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"交通工具停止运行了....\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">/*</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">          public static Object newProxyInstance(ClassLoader loader,</span>\\n<span class=\\"line\\">                                          Class&lt;?&gt;[] interfaces,</span>\\n<span class=\\"line\\">                                          InvocationHandler h)</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">          老师解读</span>\\n<span class=\\"line\\">          1. Proxy.newProxyInstance() 可以返回一个代理对象</span>\\n<span class=\\"line\\">          2. ClassLoader loader: 类的加载器.</span>\\n<span class=\\"line\\">          3. Class&lt;?&gt;[] interfaces 就是将来要代理的对象的接口信息</span>\\n<span class=\\"line\\">          4. InvocationHandler h 调用处理器/对象 有一个非常重要的方法invoke</span>\\n<span class=\\"line\\">         */</span></span>\\n<span class=\\"line\\">        <span class=\\"token class-name\\">Vehicle</span> proxy <span class=\\"token operator\\">=</span></span>\\n<span class=\\"line\\">                <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vehicle</span><span class=\\"token punctuation\\">)</span><span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newProxyInstance</span><span class=\\"token punctuation\\">(</span>classLoader<span class=\\"token punctuation\\">,</span> interfaces<span class=\\"token punctuation\\">,</span> invocationHandler<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">return</span> proxy<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div><div class=\\"collapsed-lines\\"></div></div>","autoDesc":true}');export{v as comp,b as data};
