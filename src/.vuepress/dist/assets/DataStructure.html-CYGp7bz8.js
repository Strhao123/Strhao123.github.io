import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,b as c,d as p,e,r as o,o as k,f as n,a as s}from"./app-eWV4nnR8.js";const d={};function v(b,a){const i=o("Tabs"),u=o("CodeTabs");return k(),m("div",null,[a[22]||(a[22]=c(`<h2 id="_1-绪论" tabindex="-1"><a class="header-anchor" href="#_1-绪论"><span>1. 绪论</span></a></h2><h3 id="意义" tabindex="-1"><a class="header-anchor" href="#意义"><span>意义</span></a></h3><ul><li>如何用程序代码把现实世界的问题信息化</li><li>如何用计算机高效地处理这些信息从而创造价值</li></ul><br><br><br><br><h2 id="_2-基础数据结构" tabindex="-1"><a class="header-anchor" href="#_2-基础数据结构"><span>2. 基础数据结构</span></a></h2><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><p><strong>概述</strong></p><p>在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识</p><p>因为数组内的元素是<span style="color:red;">连续存储</span><span style="color:red;">连续存储</span>的，所以数组中元素的地址，可以通过其索引计算出来<br> 知道数组的数据起始地址 <strong>BaseAddress</strong> ，根据公式 <span style="color:red;">BaseAddress + i * size</span> 计算出索引 <strong>i</strong> 元素的地址</p><ul><li>i 即索引，在 Java、C 等语言都是从 0 开始</li><li>size 是每个元素占用字节，例如 int 占 4，double 占 8</li></ul><br><br><p><strong>性能</strong><strong>空间占用</strong></p><div style="text-align:left;"><p> <img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241031111837824.png" alt="" width="400" height="250" loading="lazy"></p></div><ul><li>8 字节 markword</li><li>4 字节 class 指针（压缩 class 指针的情况）</li><li>4 字节 数组大小（决定了数组最大容量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span>）</li><li>数组元素 + 对齐字节（java 中所有对象大小都是 8 字节的整数倍<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> ，不足的要用对齐字节补足）</li></ul><p>例如</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 大小: 8 + 4 + 4 + 5*4 + 4(alignment) = 40 字节</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><br><br><p><strong>随机访问性能</strong><br> 即根据索引查找元素<br> 知道起始地址和索引，就间接知道元素地址，与数据规模无关，因此时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><br><br><p><strong>动态数组</strong><br> 自己实现, 不使用java提供的</p>`,26)),p(i,{id:"89",data:[{id:"定义类"},{id:"添加元素"},{id:"删除元素"},{id:"查询元素"}]},{title0:e(({value:t,isActive:l})=>a[0]||(a[0]=[n("定义类")])),title1:e(({value:t,isActive:l})=>a[1]||(a[1]=[n("添加元素")])),title2:e(({value:t,isActive:l})=>a[2]||(a[2]=[n("删除元素")])),title3:e(({value:t,isActive:l})=>a[3]||(a[3]=[n("查询元素")])),tab0:e(({value:t,isActive:l})=>a[4]||(a[4]=[s("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"DynamicArray"),n(),s("span",{class:"token keyword"},"implements"),n(),s("span",{class:"token class-name"},"Iterable"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" size "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 逻辑大小")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" capacity "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 容量")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" array "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[5]||(a[5]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"DynamicArray"),n(),s("span",{class:"token keyword"},"implements"),n(),s("span",{class:"token class-name"},"Iterable"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" size "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 逻辑大小")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" capacity "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 容量")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" array "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},"    "),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 向最后位置 [size] 添加元素"),n(`
`),s("span",{class:"line"},"     *"),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"element"),n(" 待添加元素")]),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"addLast"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" element"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),n("size"),s("span",{class:"token punctuation"},","),n(" element"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 向 [0 .. size] 位置添加元素"),n(`
`),s("span",{class:"line"},"     *"),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"index"),n("   索引位置")]),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"element"),n(" 待添加元素")]),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" index"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"int"),n(" element"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token function"},"checkAndGrow"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token comment"},"// 添加逻辑")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("index "),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"0"),n(),s("span",{class:"token operator"},"&&"),n(" index "),s("span",{class:"token operator"},"<"),n(" size"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token comment"},"// 向后挪动, 空出待插入位置")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"arraycopy"),s("span",{class:"token punctuation"},"("),n("array"),s("span",{class:"token punctuation"},","),n(" index"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("                    array"),s("span",{class:"token punctuation"},","),n(" index "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(" size "),s("span",{class:"token operator"},"-"),n(" index"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("        array"),s("span",{class:"token punctuation"},"["),n("index"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" element"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        size"),s("span",{class:"token operator"},"++"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"checkAndGrow"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token comment"},"// 容量检查")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("size "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            array "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),n("capacity"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("size "),s("span",{class:"token operator"},"=="),n(" capacity"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token comment"},"// 进行扩容, 1.5 1.618 2")]),n(`
`),s("span",{class:"line"},[n("            capacity "),s("span",{class:"token operator"},"+="),n(" capacity "),s("span",{class:"token operator"},">>"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" newArray "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),n("capacity"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"arraycopy"),s("span",{class:"token punctuation"},"("),n("array"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("                    newArray"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(" size"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("            array "),s("span",{class:"token operator"},"="),n(" newArray"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,null,-1)])),tab2:e(({value:t,isActive:l})=>a[6]||(a[6]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"DynamicArray"),n(),s("span",{class:"token keyword"},"implements"),n(),s("span",{class:"token class-name"},"Iterable"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" size "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 逻辑大小")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" capacity "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 容量")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" array "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 从 [0 .. size) 范围删除元素"),n(`
`),s("span",{class:"line"},"     *"),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"index"),n(" 索引位置")]),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@return"),n(" 被删除元素")]),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"remove"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" index"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"// [0..size)")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"int"),n(" removed "),s("span",{class:"token operator"},"="),n(" array"),s("span",{class:"token punctuation"},"["),n("index"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("index "),s("span",{class:"token operator"},"<"),n(" size "),s("span",{class:"token operator"},"-"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token comment"},"// 向前挪动")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"arraycopy"),s("span",{class:"token punctuation"},"("),n("array"),s("span",{class:"token punctuation"},","),n(" index "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("                    array"),s("span",{class:"token punctuation"},","),n(" index"),s("span",{class:"token punctuation"},","),n(" size "),s("span",{class:"token operator"},"-"),n(" index "),s("span",{class:"token operator"},"-"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("        size"),s("span",{class:"token operator"},"--"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"return"),n(" removed"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,null,-1)])),tab3:e(({value:t,isActive:l})=>a[7]||(a[7]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"DynamicArray"),n(),s("span",{class:"token keyword"},"implements"),n(),s("span",{class:"token class-name"},"Iterable"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" size "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 逻辑大小")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),n(" capacity "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 容量")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" array "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 查询元素"),n(`
`),s("span",{class:"line"},"     *"),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"index"),n(" 索引位置, 在 [0..size) 区间内")]),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@return"),n(" 该索引位置的元素")]),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"get"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" index"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"return"),n(" array"),s("span",{class:"token punctuation"},"["),n("index"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 遍历方法1"),n(`
`),s("span",{class:"line"},"     *"),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"consumer"),n(" 遍历要执行的操作, 入参: 每个元素")]),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"foreach"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Consumer"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(" consumer"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" i "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(" i "),s("span",{class:"token operator"},"<"),n(" size"),s("span",{class:"token punctuation"},";"),n(" i"),s("span",{class:"token operator"},"++"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token comment"},"// 提供 array[i]")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token comment"},"// 返回 void")]),n(`
`),s("span",{class:"line"},[n("            consumer"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"accept"),s("span",{class:"token punctuation"},"("),n("array"),s("span",{class:"token punctuation"},"["),n("i"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 遍历方法2 - 迭代器遍历"),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token annotation punctuation"},"@Override")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"Iterator"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"iterator"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"Iterator"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token keyword"},"int"),n(" i "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token annotation punctuation"},"@Override")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"boolean"),n(),s("span",{class:"token function"},"hasNext"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"// 有没有下一个元素")]),n(`
`),s("span",{class:"line"},[n("                "),s("span",{class:"token keyword"},"return"),n(" i "),s("span",{class:"token operator"},"<"),n(" size"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token annotation punctuation"},"@Override")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"Integer"),n(),s("span",{class:"token function"},"next"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"// 返回当前元素,并移动到下一个元素")]),n(`
`),s("span",{class:"line"},[n("                "),s("span",{class:"token keyword"},"return"),n(" array"),s("span",{class:"token punctuation"},"["),n("i"),s("span",{class:"token operator"},"++"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token doc-comment comment"},"/**"),n(`
`),s("span",{class:"line"},"     * 遍历方法3 - stream 遍历"),n(`
`),s("span",{class:"line"},"     *"),n(`
`),s("span",{class:"line"},[n("     * "),s("span",{class:"token keyword"},"@return"),n(" stream 流")]),n(`
`),s("span",{class:"line"},"     */")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"IntStream"),n(),s("span",{class:"token function"},"stream"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token class-name"},"IntStream"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"of"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Arrays"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"copyOfRange"),s("span",{class:"token punctuation"},"("),n("array"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(" size"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),a[23]||(a[23]=c(`<p><span style="color:red;">注意: 这些方法实现，都简化了 index 的有效性判断，假设输入的 index 都是合法的</span></p><br><br><p><strong>插入与删除性能</strong></p><ul><li>头部位置，时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>中间位置，时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>尾部位置，时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（均摊来说）</li></ul><br><br><p><strong>二维数组</strong></p><p>内存图如下:</p><div style="text-align:left;"><p> <img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241031212820020.png" alt="" width="600" height="300" loading="lazy"></p></div><ul><li>二维数组占 32 个字节，其中 array[0]，array[1]，array[2] 三个元素分别保存了指向三个一维数组的引用</li><li>三个一维数组各占 40 个字节</li><li>它们在内层布局上是<strong>连续</strong>的</li><li>当访问 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Array[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">rr</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mi>m</mi><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>j</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">0\\leq i \\lt m, 0\\leq j \\lt n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>时，就相当于 <ul><li>先找到第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 个内层数组（行）</li><li>再找到此内层数组中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 个元素（列）</li></ul></li></ul><br><br><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已知 array 对象起始地址是 0x1000，那么 23 这个元素的地址是什么？</p><blockquote><ul><li>外层数组大小：16字节对象头 + 3元素 * 每个引用4字节 + 4 对齐字节 = 32 = 0x20</li><li>第一个内层数组大小：16字节对象头 + 5元素 * 每个byte1字节 + 3 对齐字节 = 24 = 0x18</li><li>第二个内层数组，16字节对象头 = 0x10，待查找元素索引为 2</li><li>最后结果 = 0x1000 + 0x20 + 0x18 + 0x10 + 2*1 = 0x104a</li></ul></blockquote><p><br><br></p><p><strong>局部性原理</strong></p><p>这里只讨论空间局部性</p><ul><li>cpu 读取内存（速度慢）数据后，会将其放入高速缓存（速度快）当中，如果后来的计算再用到此数据，在缓存中能读到的话，就不必读内存了</li><li>缓存的最小存储单位是缓存行（cache line），一般是 64 bytes，一次读的数据少了不划算啊，因此最少读 64 bytes 填满一个缓存行，因此读入某个数据时也会读取其<strong>临近的数据</strong>，这就是所谓<strong>空间局部性</strong></li></ul><p><br><br> 先遍历行比先遍历列速度快</p><ul><li>当循环要读入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 这条数据，由于局部性原理，读入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 的同时也读入了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>13</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1] ... [0,13]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">13</span><span class="mclose">]</span></span></span></span></li><li>当循环要的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 这条数据，缓存中没有, 又从内存去读</li><li>若是先遍历列的话, 等到读入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>时, 缓存早已被覆盖, 又要从内存去读</li></ul><br><br><p><strong>越界检查</strong></p><p>java 中对数组元素的读写都有越界检查</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">bool <span class="token function">is_within_bounds</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span>        </span>
<span class="line"><span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> index <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此检查代码，不需要由程序员自己来调用，JVM 会帮我们调用</p><br><br><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h3><p>链表是有序的列表，但是它在内存中是存储如下</p><div style="text-align:left;"><p> <img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241105084326828.png" alt="" loading="lazy"></p></div><ul><li>链表是以节点的方式来存储,是链式存储</li><li>每个节点包含 data 域， next 域：指向下一个节点</li><li>链表的各个节点不一定是连续存储</li><li>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</li><li>单链表(带头结点) 逻辑结构示意图如下</li></ul><div style="text-align:left;"><p> <img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241105084524389.png" alt="" loading="lazy"></p></div><div class="hint-container info"><p class="hint-container-title">示例</p><p>使用带 head 头的单向链表实现 –水浒英雄排行榜管理完成对英雄人物的增删改查操作</p><ol><li>第一种方法在添加英雄时，直接添加到链表的尾部</li><li>第二种方式在添加英雄时，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示)</li></ol></div>`,36)),p(u,{id:"321",data:[{id:"测试"},{id:"添加节点1"},{id:"添加节点2"},{id:"修改节点"},{id:"删除节点"},{id:"遍历"},{id:"定义节点"}]},{title0:e(({value:t,isActive:l})=>a[8]||(a[8]=[n("测试")])),title1:e(({value:t,isActive:l})=>a[9]||(a[9]=[n("添加节点1")])),title2:e(({value:t,isActive:l})=>a[10]||(a[10]=[n("添加节点2")])),title3:e(({value:t,isActive:l})=>a[11]||(a[11]=[n("修改节点")])),title4:e(({value:t,isActive:l})=>a[12]||(a[12]=[n("删除节点")])),title5:e(({value:t,isActive:l})=>a[13]||(a[13]=[n("遍历")])),title6:e(({value:t,isActive:l})=>a[14]||(a[14]=[n("定义节点")])),tab0:e(({value:t,isActive:l})=>a[15]||(a[15]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"SingleLinkedListDemo"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"static"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"main"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"String"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" args"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// 进行测试")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// 先创建节点")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"HeroNode"),n(" hero1 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"宋江"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"及时雨"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"HeroNode"),n(" hero2 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"卢俊义"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"玉麒麟"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"HeroNode"),n(" hero3 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"吴用"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"智多星"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"HeroNode"),n(" hero4 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"林冲"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"豹子头"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// 创建要给链表")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"SingleLinkedList"),n(" singleLinkedList "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"SingleLinkedList"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// 加入")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// singleLinkedList.add(hero1);")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// singleLinkedList.add(hero4);")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// singleLinkedList.add(hero2);")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// singleLinkedList.add(hero3);")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// 加入按照编号的顺序")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addByOrder"),s("span",{class:"token punctuation"},"("),n("hero1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addByOrder"),s("span",{class:"token punctuation"},"("),n("hero4"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addByOrder"),s("span",{class:"token punctuation"},"("),n("hero2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addByOrder"),s("span",{class:"token punctuation"},"("),n("hero3"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//显示一把")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"list"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//测试修改节点的代码")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"HeroNode"),n(" newHeroNode "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"小卢"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"玉麒麟~~"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"update"),s("span",{class:"token punctuation"},"("),n("newHeroNode"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"修改后的链表情况~~"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"list"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//删除一个节点")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"del"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"del"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"删除后的链表情况~~"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    singleLinkedList"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"list"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:e(({value:t,isActive:l})=>a[16]||(a[16]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"//定义 SingleLinkedList 管理我们的英雄")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"SingleLinkedList"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//先初始化一个头节点, 头节点不要动, 不存放具体的数据")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"HeroNode"),n(" head "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'""'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'""'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//添加节点到单向链表")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//思路，当不考虑编号顺序时")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//1. 找到当前链表的最后节点")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//2. 将最后这个节点的 next 指向 新的节点")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"HeroNode"),n(" heroNode"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//因为 head 节点不能动，因此我们需要一个辅助遍历 temp")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"HeroNode"),n(" temp "),s("span",{class:"token operator"},"="),n(" head"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//遍历链表，找到最后")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//找到链表的最后")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token comment"},"//")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//如果没有找到最后, 将将 temp 后移")]),n(`
`),s("span",{class:"line"},[n("      temp "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},"  "),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//当退出 while 循环时，temp 就指向了链表的最后")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//将最后这个节点的 next 指向 新的节点")]),n(`
`),s("span",{class:"line"},[n("    temp"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"="),n(" heroNode"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab2:e(({value:t,isActive:l})=>a[17]||(a[17]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"//第二种方式在添加英雄时，根据排名将英雄插入到指定位置")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"//(如果有这个排名，则添加失败，并给出提示)")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"addByOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"HeroNode"),n(" heroNode"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//因为单链表，因为我们找的 temp 是位于 添加位置的前一个节点，否则插入不了")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token class-name"},"HeroNode"),n(" temp "),s("span",{class:"token operator"},"="),n(" head"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"boolean"),n(" flag "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"false"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// flag 标志添加的编号是否存在，默认为 false")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token comment"},"//说明 temp 已经在链表的最后")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},"."),n("no "),s("span",{class:"token operator"},">"),n(" heroNode"),s("span",{class:"token punctuation"},"."),n("no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"//位置找到，就在 temp 的后面插入")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},"."),n("no "),s("span",{class:"token operator"},"=="),n(" heroNode"),s("span",{class:"token punctuation"},"."),n("no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token comment"},"//说明希望添加的 heroNode 的编号已然存在")]),n(`
`),s("span",{class:"line"},[n("      flag "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//说明编号存在")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    temp "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//后移，遍历当前链表")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},"  "),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//判断 flag 的值")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("flag"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"//不能添加，说明编号存在")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"printf"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"准备插入的英雄的编号 %d 已经存在了, 不能加入\\n"'),s("span",{class:"token punctuation"},","),n(" heroNode"),s("span",{class:"token punctuation"},"."),n("no"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//插入到链表中, temp 的后面")]),n(`
`),s("span",{class:"line"},[n("    heroNode"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    temp"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"="),n(" heroNode"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab3:e(({value:t,isActive:l})=>a[18]||(a[18]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"//修改节点的信息, 根据 no 编号来修改，即 no 编号不能改.")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"//说明")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"//1. 根据 newHeroNode 的 no 来修改即可")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"update"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"HeroNode"),n(" newHeroNode"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//判断是否空")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("head"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"链表为空~"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},"  "),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//找到需要修改的节点, 根据 no 编号")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//定义一个辅助变量")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token class-name"},"HeroNode"),n(" temp "),s("span",{class:"token operator"},"="),n(" head"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"boolean"),n(" flag "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"false"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//表示是否找到该节点")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("temp "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//已经遍历完链表")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("no "),s("span",{class:"token operator"},"=="),n(" newHeroNode"),s("span",{class:"token punctuation"},"."),n("no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token comment"},"//找到")]),n(`
`),s("span",{class:"line"},[n("      flag "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    temp "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},"  "),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//根据 flag 判断是否找到要修改的节点")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("flag"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    temp"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(" newHeroNode"),s("span",{class:"token punctuation"},"."),n("name"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    temp"),s("span",{class:"token punctuation"},"."),n("nickname "),s("span",{class:"token operator"},"="),n(" newHeroNode"),s("span",{class:"token punctuation"},"."),n("nickname"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"//没有找到")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"printf"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"没有找到 编号 %d 的节点，不能修改\\n"'),s("span",{class:"token punctuation"},","),n(" newHeroNode"),s("span",{class:"token punctuation"},"."),n("no"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab4:e(({value:t,isActive:l})=>a[19]||(a[19]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"//思路")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"//1. head 不能动，因此我们需要一个 temp 辅助节点找到待删除节点的前一个节点")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"//2. 说明我们在比较时，是 temp.next.no 和 需要删除的节点的 no 比较")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"del"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token class-name"},"HeroNode"),n(" temp "),s("span",{class:"token operator"},"="),n(" head"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"boolean"),n(" flag "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"false"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 标志是否找到待删除节点的")]),n(`
`),s("span",{class:"line"},"  "),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"//已经到链表的最后")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},"."),n("no "),s("span",{class:"token operator"},"=="),n(" no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token comment"},"//找到的待删除节点的前一个节点 temp")]),n(`
`),s("span",{class:"line"},[n("      flag "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    temp "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//temp 后移，遍历")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},"  "),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//判断 flag")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("flag"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"//找到")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//可以删除")]),n(`
`),s("span",{class:"line"},[n("    temp"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"printf"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"要删除的 %d 节点不存在\\n"'),s("span",{class:"token punctuation"},","),n(" no"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab5:e(({value:t,isActive:l})=>a[20]||(a[20]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"//显示链表[遍历]")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"list"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//判断链表是否为空")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("head"),s("span",{class:"token punctuation"},"."),n("next "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"链表为空"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//因为头节点，不能动，因此我们需要一个辅助变量来遍历")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token class-name"},"HeroNode"),n(" temp "),s("span",{class:"token operator"},"="),n(" head"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"//判断是否到链表最后")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("temp "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//输出节点的信息")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),n("temp"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//将 temp 后移， 一定小心")]),n(`
`),s("span",{class:"line"},[n("  temp "),s("span",{class:"token operator"},"="),n(" temp"),s("span",{class:"token punctuation"},"."),n("next"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab6:e(({value:t,isActive:l})=>a[21]||(a[21]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"prismjs","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"10"}},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"//定义 HeroNode ， 每个 HeroNode 对象就是一个节点")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"HeroNode"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"int"),n(" no"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"String"),n(" name"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"String"),n(" nickname"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"HeroNode"),n(" next"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//指向下一个节点")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//构造器")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"HeroNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),n(" no"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"String"),n(" name"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"String"),n(" nickname"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("no "),s("span",{class:"token operator"},"="),n(" no"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(" name"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("nickname "),s("span",{class:"token operator"},"="),n(" nickname"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"//为了显示方法，我们重新 toString")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token annotation punctuation"},"@Override")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"String"),n(),s("span",{class:"token function"},"toString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token string"},'"HeroNode [no="'),n(),s("span",{class:"token operator"},"+"),n(" no "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'", name="'),n(),s("span",{class:"token operator"},"+"),n(" name "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'", nickname="'),n(),s("span",{class:"token operator"},"+"),n(" nickname "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'"]"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),a[24]||(a[24]=c('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>jdk 版本有关，64位jdk，按8字节对齐 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const g=r(d,[["render",v],["__file","DataStructure.html.vue"]]),w=JSON.parse('{"path":"/codenotes/back/Algorithms/DataStructure.html","title":"数据结构","lang":"zh-CN","frontmatter":{"title":"数据结构","icon":"/icon/jiegou.svg","category":["计算机"],"tag":["数据结构"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"description":"1. 绪论 意义 如何用程序代码把现实世界的问题信息化 如何用计算机高效地处理这些信息从而创造价值 2. 基础数据结构 数组 概述 在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识 因为数组内的元素是连续存储连续存储的，所以数组中元素的地址，可以通过其索引计算出来 知道数组的数据起始地址 BaseAddres...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/Algorithms/DataStructure.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"1. 绪论 意义 如何用程序代码把现实世界的问题信息化 如何用计算机高效地处理这些信息从而创造价值 2. 基础数据结构 数组 概述 在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识 因为数组内的元素是连续存储连续存储的，所以数组中元素的地址，可以通过其索引计算出来 知道数组的数据起始地址 BaseAddres..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/image-20241031111837824.png =400x250"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"数据结构"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据结构\\",\\"description\\":\\"1. 绪论 意义 如何用程序代码把现实世界的问题信息化 如何用计算机高效地处理这些信息从而创造价值 2. 基础数据结构 数组 概述 在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识 因为数组内的元素是连续存储连续存储的，所以数组中元素的地址，可以通过其索引计算出来 知道数组的数据起始地址 BaseAddres...\\"}"]]},"headers":[{"level":2,"title":"1. 绪论","slug":"_1-绪论","link":"#_1-绪论","children":[{"level":3,"title":"意义","slug":"意义","link":"#意义","children":[]}]},{"level":2,"title":"2. 基础数据结构","slug":"_2-基础数据结构","link":"#_2-基础数据结构","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]}]}],"git":{},"readingTime":{"minutes":10.19,"words":3057},"filePathRelative":"codenotes/back/Algorithms/DataStructure.md","excerpt":"<h2>1. 绪论</h2>\\n<h3>意义</h3>\\n<ul>\\n<li>如何用程序代码把现实世界的问题信息化</li>\\n<li>如何用计算机高效地处理这些信息从而创造价值</li>\\n</ul>\\n<br>\\n<br>\\n<br>\\n<br>\\n<h2>2. 基础数据结构</h2>\\n<h3>数组</h3>\\n<p><strong>概述</strong></p>\\n<p>在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识</p>\\n<p>因为数组内的元素是<span style=\\"color: red;\\">连续存储</span><span style=\\"color: red;\\">连续存储</span>的，所以数组中元素的地址，可以通过其索引计算出来<br>\\n知道数组的数据起始地址 <strong>BaseAddress</strong> ，根据公式 <span style=\\"color: red;\\">BaseAddress + i * size</span>  计算出索引  <strong>i</strong> 元素的地址</p>","autoDesc":true}');export{g as comp,w as data};
