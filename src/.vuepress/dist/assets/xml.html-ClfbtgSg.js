import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-eWV4nnR8.js";const p="/assets/image-20241130204710031-B6FP3zjS.png",l={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>xml 是可扩展的标记性语言。</p><p>作用：数据传输（现在一般用 <strong>json</strong>）、<strong>配置文件</strong>、充当小型数据库</p><ol><li>两个程序间进行数据通信</li><li>给一台服务器做配置文件</li><li>spring中的ioc配置文件</li><li>储存复杂的数据关系</li></ol><h2 id="_2-语法" tabindex="-1"><a class="header-anchor" href="#_2-语法"><span>2. 语法</span></a></h2><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明"><span>声明</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>xml：表示该文件类型是 <strong>xml</strong></li><li>version：版本</li><li>encoding：文件编码</li><li>在xml文件的第一行</li><li><span style="color:red;">根元素只能有一个</span></li></ul><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;!-- 内容 --&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>注释不能嵌套</li><li>注释内容不能出现 <code>- -</code></li><li>不能放标签中，例： <code>&lt;cat &lt;!--注释--&gt; &gt;&lt;/cat&gt;</code></li></ul><h3 id="xml元素" tabindex="-1"><a class="header-anchor" href="#xml元素"><span>xml元素</span></a></h3><p>标签 = 元素 = 节点</p><p><strong>元素</strong> 是指从开始标签到结束标签的内容。</p><p><strong>标签体</strong> 指标签包含的内容</p><p>例如：<code>\\&lt;title&gt;java 编程思想 \\&lt;/title&gt;</code>，java 编程思想 为标签体</p><p>也有单标签和双标签</p><h3 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则"><span>命名规则</span></a></h3><blockquote><ol><li>区分大小写，可以含字母、数字以及其他的字符</li><li>不能以数字或者标点符号开始</li><li>不能包含空格</li><li>名字中间不能包含冒号</li></ol></blockquote><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h3><ol><li>属性值能用 <strong>单引</strong> 或 <strong>双引</strong></li><li>一个元素可有 <strong>多个</strong> 属性</li><li>同一属性名在同一标签中只能 <strong>出现一次</strong></li><li>属性值不能包含 <strong>&amp;</strong></li></ol><h3 id="文本区域-cdata区" tabindex="-1"><a class="header-anchor" href="#文本区域-cdata区"><span>文本区域（CDATA区）</span></a></h3><p>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要xml 语法解析</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;![CDATA[ 文本 ]]&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>不能嵌套</li></ul><h2 id="_3-规则" tabindex="-1"><a class="header-anchor" href="#_3-规则"><span>3. 规则</span></a></h2><blockquote><ol><li><p>所有xml元素需闭合</p></li><li><p>需正确嵌套</p></li><li><p>必须有根元素（根元素就是顶级元素， 没有父标签的元素，叫顶级元素），且<mark>唯一</mark></p></li><li><p>一个标签上可以书写多个属性，每个属性的值必须使用 <mark>引号</mark> 引起来。</p></li><li><p>特殊字符特殊处理</p></li></ol><table><thead><tr><th>转义符</th><th>符号</th></tr></thead><tbody><tr><td><code>&amp;lt;</code></td><td>&lt;</td></tr><tr><td><code>&amp;gt;</code></td><td>&gt;</td></tr><tr><td><code>&amp;amp;</code></td><td>&amp;</td></tr><tr><td><code>&amp;quot;</code></td><td>&quot;</td></tr><tr><td><code>&amp;apos;</code></td><td>&#39;</td></tr></tbody></table></blockquote><h2 id="_4-xml解析" tabindex="-1"><a class="header-anchor" href="#_4-xml解析"><span>4. xml解析</span></a></h2><p>早期 JDK 为我们提供了两种 xml 解析技术 <strong>DOM</strong> 和 <strong>Sax</strong>（sun 公司在 JDK5 版本对 dom 解析技术进行升级，不会创建大量的 dom 对象）</p><ul><li>jdom 对 dom 封装</li><li>dom4j 对 jdom 封装</li><li>pull 用于 Android 手机开发，与Sax类似，用事件机制解析xml</li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>xml 文件加载到内存映射为 xml dom 对象，之后可用相关java技术解析</p><p>document对象表示整个文档</p><h3 id="dom4j-解析技术" tabindex="-1"><a class="header-anchor" href="#dom4j-解析技术"><span>dom4j 解析技术</span></a></h3><p>dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用dom4j 就需要到dom4j 官网下载dom4j的 jar 包。</p><p><a href="https://dom4j.github.io/" target="_blank" rel="noopener noreferrer">官网链接</a></p><p><strong>获取Document三种方式</strong></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1. 读取xml, 获得document</span></span>
<span class="line"><span class="token class-name">SAXReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个解析器</span></span>
<span class="line"><span class="token class-name">Document</span> document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;xml路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XML Docuemnt</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 解析xml形式的文本, 获得document</span></span>
<span class="line"><span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;&lt;cats&gt;&lt;/cats&gt;&quot;</span></span>
<span class="line"><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">parseText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 主动创建document</span></span>
<span class="line"><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建根节点</span></span>
<span class="line"><span class="token class-name">Element</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">&quot;cats&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>一层一层获取</strong></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 通过 Document 对象。拿到 XML 的根元素对象</span></span>
<span class="line"><span class="token class-name">Element</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line"><span class="token comment">// 通过根元素对象。获取所有的 cat 标签对象</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> cats <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line"><span class="token comment">// 遍历每个 cat 标签对象</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> cat <span class="token operator">:</span> cats<span class="token punctuation">)</span> <span class="token punctuation">{</span>	</span>
<span class="line">    <span class="token comment">// 获取cat的id属性</span></span>
<span class="line">    <span class="token class-name">String</span> id <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">	<span class="token comment">// 拿到 cat 下面的 name 元素对象</span></span>
<span class="line">	<span class="token class-name">Element</span> name <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Element</span> color <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;名字:&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;颜色:&quot;</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><blockquote><ol><li>Element.asXML() ：将当前元素转换成为 String 对象</li><li>getText() ：拿到起始标签和结束标签之间的文本内容</li><li>Element.attributeValue(&quot;属性名&quot;)：获取标签内属性值</li></ol></blockquote><p><strong>dom4j + xpath：</strong> 一步到位，可以通过根节点，直接拿到层层包含指定的内容</p><h3 id="拓展-增删改" tabindex="-1"><a class="header-anchor" href="#拓展-增删改"><span>拓展：增删改</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 加元素(要求: 添加一个学生到xml中) [不要求，使用少，了解]</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//1.得到解析器</span></span>
<span class="line">	<span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2.指定解析哪个xml文件</span></span>
<span class="line">    <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/students.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//首先我们来创建一个学生节点对象，给元素添加属性</span></span>
<span class="line">    <span class="token class-name">Element</span> newStu <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    newStu<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建name元素</span></span>
<span class="line">    <span class="token class-name">Element</span> newStu_name <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    newStu_name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;宋江&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//创建age元素</span></span>
<span class="line">    <span class="token class-name">Element</span> newStu_age <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    newStu_age<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//把三个子元素（节点）加到 newStu下</span></span>
<span class="line">    newStu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu_name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    newStu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu_age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//再把newStu节点加到根元素</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//直接输出会出现中文乱码:</span></span>
<span class="line">    <span class="token class-name">OutputFormat</span> output <span class="token operator">=</span> <span class="token class-name">OutputFormat</span><span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    output<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的编码utf-8</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//把我们的xml文件更新</span></span>
<span class="line">    <span class="token comment">// lets write to a file</span></span>
<span class="line">    <span class="token comment">//new FileOutputStream(new File(&quot;src/myClass.xml&quot;))</span></span>
<span class="line">    <span class="token comment">//使用到io编程 FileOutputStream 就是文件字节输出流</span></span>
<span class="line">    <span class="token class-name">XMLWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/students.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * //删除元素(要求：删除第一个学生) 使用少，了解</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//1.得到解析器</span></span>
<span class="line">    <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2.指定解析哪个xml文件</span></span>
<span class="line">    <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/students.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//找到该元素第一个学生</span></span>
<span class="line">    <span class="token class-name">Element</span> stu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//删除元素</span></span>
<span class="line">    stu<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//删除元素的某个属性</span></span>
<span class="line">    stu<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//更新xml</span></span>
<span class="line">    <span class="token comment">//直接输出会出现中文乱码:</span></span>
<span class="line">    <span class="token class-name">OutputFormat</span> output <span class="token operator">=</span> <span class="token class-name">OutputFormat</span><span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    output<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的编码utf-8</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//把我们的xml文件更新</span></span>
<span class="line">    <span class="token class-name">XMLWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/students.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 更新元素(要求把所有学生的年龄+3) 使用少，了解</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//1.得到解析器</span></span>
<span class="line">    <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2.指定解析哪个xml文件</span></span>
<span class="line">    <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/students.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//得到所有学生的年龄</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//遍历, 所有的学生元素的age+3</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//取出年龄</span></span>
<span class="line">        <span class="token class-name">Element</span> age <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// + &quot;&quot;，目的是转成字符串</span></span>
<span class="line">        age<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//更新</span></span>
<span class="line">    <span class="token comment">//直接输出会出现中文乱码:</span></span>
<span class="line">    <span class="token class-name">OutputFormat</span> output <span class="token operator">=</span> <span class="token class-name">OutputFormat</span><span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    output<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的编码utf-8</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//把我们的xml文件更新</span></span>
<span class="line">    <span class="token class-name">XMLWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/students.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新成功~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,45)]))}const r=s(l,[["render",c],["__file","xml.html.vue"]]),d=JSON.parse('{"path":"/codenotes/back/javaweb/xml.html","title":"XML","lang":"zh-CN","frontmatter":{"title":"XML","author":[{"name":"尚硅谷"},{"name":"Ahzy"}],"category":["计算机"],"tag":["javaweb"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"headerDepth":2,"date":"2024-10-07T00:00:00.000Z","description":"1. 简介 xml 是可扩展的标记性语言。 作用：数据传输（现在一般用 json）、配置文件、充当小型数据库 两个程序间进行数据通信 给一台服务器做配置文件 spring中的ioc配置文件 储存复杂的数据关系 2. 语法 声明 xml：表示该文件类型是 xml version：版本 encoding：文件编码 在xml文件的第一行 根元素只能有一个 注...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javaweb/xml.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"XML"}],["meta",{"property":"og:description","content":"1. 简介 xml 是可扩展的标记性语言。 作用：数据传输（现在一般用 json）、配置文件、充当小型数据库 两个程序间进行数据通信 给一台服务器做配置文件 spring中的ioc配置文件 储存复杂的数据关系 2. 语法 声明 xml：表示该文件类型是 xml version：版本 encoding：文件编码 在xml文件的第一行 根元素只能有一个 注..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"尚硅谷"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:published_time","content":"2024-10-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"XML\\",\\"description\\":\\"1. 简介 xml 是可扩展的标记性语言。 作用：数据传输（现在一般用 json）、配置文件、充当小型数据库 两个程序间进行数据通信 给一台服务器做配置文件 spring中的ioc配置文件 储存复杂的数据关系 2. 语法 声明 xml：表示该文件类型是 xml version：版本 encoding：文件编码 在xml文件的第一行 根元素只能有一个 注...\\"}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 语法","slug":"_2-语法","link":"#_2-语法","children":[{"level":3,"title":"声明","slug":"声明","link":"#声明","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"xml元素","slug":"xml元素","link":"#xml元素","children":[]},{"level":3,"title":"命名规则","slug":"命名规则","link":"#命名规则","children":[]},{"level":3,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":3,"title":"文本区域（CDATA区）","slug":"文本区域-cdata区","link":"#文本区域-cdata区","children":[]}]},{"level":2,"title":"3. 规则","slug":"_3-规则","link":"#_3-规则","children":[]},{"level":2,"title":"4. xml解析","slug":"_4-xml解析","link":"#_4-xml解析","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"dom4j 解析技术","slug":"dom4j-解析技术","link":"#dom4j-解析技术","children":[]},{"level":3,"title":"拓展：增删改","slug":"拓展-增删改","link":"#拓展-增删改","children":[]}]}],"git":{},"readingTime":{"minutes":5.14,"words":1542},"filePathRelative":"codenotes/back/javaweb/xml.md","localizedDate":"2024年10月7日","excerpt":"<h2>1. 简介</h2>\\n<p>xml 是可扩展的标记性语言。</p>\\n<p>作用：数据传输（现在一般用 <strong>json</strong>）、<strong>配置文件</strong>、充当小型数据库</p>\\n<ol>\\n<li>两个程序间进行数据通信</li>\\n<li>给一台服务器做配置文件</li>\\n<li>spring中的ioc配置文件</li>\\n<li>储存复杂的数据关系</li>\\n</ol>\\n<h2>2. 语法</h2>\\n<h3>声明</h3>\\n<div class=\\"language-xml line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre><code><span class=\\"line\\"><span class=\\"token prolog\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
