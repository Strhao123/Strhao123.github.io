import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as p}from"./app-eWV4nnR8.js";const l={};function e(i,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h2 id="_1-collection集合" tabindex="-1"><a class="header-anchor" href="#_1-collection集合"><span>1.Collection集合</span></a></h2><h3 id="_1-1数组和集合的区别【理解】" tabindex="-1"><a class="header-anchor" href="#_1-1数组和集合的区别【理解】"><span>1.1数组和集合的区别【理解】</span></a></h3><ul><li><p>相同点</p><p>都是容器,可以存储多个数据</p></li><li><p>不同点</p><ul><li><p>数组的长度是不可变的,集合的长度是可变的</p></li><li><p>数组可以存基本数据类型和引用数据类型</p><p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p></li></ul></li></ul><h3 id="_1-2集合类体系结构【理解】" tabindex="-1"><a class="header-anchor" href="#_1-2集合类体系结构【理解】"><span>1.2集合类体系结构【理解】</span></a></h3><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411062040683.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-3collection-集合概述和使用【应用】" tabindex="-1"><a class="header-anchor" href="#_1-3collection-集合概述和使用【应用】"><span>1.3Collection 集合概述和使用【应用】</span></a></h3><ul><li><p>Collection集合概述</p><ul><li>是单例集合的顶层接口,它表示一组对象,这些对象也称为Collection的元素</li><li>JDK 不提供此接口的任何直接实现.它提供更具体的子接口(如Set和List)实现</li></ul></li><li><p>创建Collection集合的对象</p><ul><li>多态的方式</li><li>具体的实现类ArrayList</li></ul></li><li><p>Collection集合常用方法</p><table><thead><tr><th style="text-align:left;">方法名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean add(E e)</td><td style="text-align:left;">添加元素</td></tr><tr><td style="text-align:left;">boolean remove(Object o)</td><td style="text-align:left;">从集合中移除指定的元素</td></tr><tr><td style="text-align:left;">boolean removeIf(Object o)</td><td style="text-align:left;">根据条件进行移除</td></tr><tr><td style="text-align:left;">void clear()</td><td style="text-align:left;">清空集合中的元素</td></tr><tr><td style="text-align:left;">boolean contains(Object o)</td><td style="text-align:left;">判断集合中是否存在指定的元素</td></tr><tr><td style="text-align:left;">boolean isEmpty()</td><td style="text-align:left;">判断集合是否为空</td></tr><tr><td style="text-align:left;">int size()</td><td style="text-align:left;">集合的长度，也就是集合中元素的个数</td></tr></tbody></table></li></ul><h3 id="_1-4collection集合的遍历" tabindex="-1"><a class="header-anchor" href="#_1-4collection集合的遍历"><span>1.4Collection集合的遍历</span></a></h3><h4 id="_1-4-1-迭代器遍历" tabindex="-1"><a class="header-anchor" href="#_1-4-1-迭代器遍历"><span>1.4.1 迭代器遍历</span></a></h4><ul><li><p>迭代器介绍</p><ul><li>迭代器,集合的专用遍历方式</li><li><code>Iterator&lt;E&gt; iterator()</code>: 返回此集合中元素的迭代器,通过集合对象的iterator()方法得到</li></ul></li><li><p>Iterator中的常用方法</p><p>​ boolean hasNext(): 判断当前位置是否有元素可以被取出 ​ E next(): 获取当前位置的元素,将迭代器对象移向下一个索引位置</p></li><li><p>Collection集合的遍历</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//创建集合对象</span></span>
<span class="line">        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//添加元素</span></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;javaee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//Iterator&lt;E&gt; iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</span></span>
<span class="line">        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//用while循环改进元素的判断和获取</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li><li><p>迭代器中删除的方法</p><p>​ void remove(): 删除迭代器对象当前指向的元素</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//指向谁,那么此时就删除谁.</span></span>
<span class="line">                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li></ul><h4 id="_1-4-2-增强for" tabindex="-1"><a class="header-anchor" href="#_1-4-2-增强for"><span>1.4.2 增强for</span></a></h4><ul><li><p>介绍</p><ul><li>它是JDK5之后出现的,其内部原理是一个Iterator迭代器</li><li>实现Iterable接口的类才可以使用迭代器和增强for</li><li>简化数组和Collection集合的遍历</li></ul></li><li><p>格式</p><p>​ for(集合/数组中元素的数据类型 变量名 : 集合/数组名) {</p><p>​ // 已经将当前遍历到的元素封装到变量中了,直接使用变量即可</p><p>​ }</p></li><li><p>代码</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCollectonDemo1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1,数据类型一定是集合或者数组中元素的类型</span></span>
<span class="line">        <span class="token comment">//2,str仅仅是一个变量名而已,在循环的过程中,依次表示集合或者数组中的每一个元素</span></span>
<span class="line">        <span class="token comment">//3,list就是要遍历的集合或者数组</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li><li><p>细节点注意：</p></li></ul><p>1.报错NoSuchElementException</p><p>2.迭代器遍历完毕，指针不会复位</p><p>3.循环中只能用一次next方法</p><p>4.迭代器遍历时，不能用集合的方法进行增加或者删除</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A04_CollectionDemo4</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">/*</span>
<span class="line">        迭代器的细节注意点：</span>
<span class="line">            1.报错NoSuchElementException</span>
<span class="line">            2.迭代器遍历完毕，指针不会复位</span>
<span class="line">            3.循环中只能用一次next方法</span>
<span class="line">            4.迭代器遍历时，不能用集合的方法进行增加或者删除</span>
<span class="line">            	暂时当做一个结论先行记忆，在今天我们会讲解源码详细的再来分析。</span>
<span class="line">                如果我实在要删除：那么可以用迭代器提供的remove方法进行删除。</span>
<span class="line">                如果我要添加，暂时没有办法。(只是暂时)</span>
<span class="line">       */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1.创建集合并添加元素</span></span>
<span class="line">        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.获取迭代器对象</span></span>
<span class="line">        <span class="token comment">//迭代器就好比是一个箭头，默认指向集合的0索引处</span></span>
<span class="line">        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//3.利用循环不断的去获取集合中的每一个元素</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//4.next方法的两件事情：获取元素并移动指针</span></span>
<span class="line">            <span class="token class-name">String</span> str <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//当上面循环结束之后，迭代器的指针已经指向了最后没有元素的位置</span></span>
<span class="line">        <span class="token comment">//System.out.println(it.next());//NoSuchElementException</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//迭代器遍历完毕，指针不会复位</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//如果我们要继续第二次遍历集合，只能再次获取一个新的迭代器对象</span></span>
<span class="line">        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it2 <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> str <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_1-4-3-lambda表达式" tabindex="-1"><a class="header-anchor" href="#_1-4-3-lambda表达式"><span>1.4.3 lambda表达式</span></a></h4><p>​ 利用forEach方法，再结合lambda表达式的方式进行遍历</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A07_CollectionDemo7</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">/* </span>
<span class="line">        lambda表达式遍历：</span>
<span class="line">                default void forEach(Consumer&lt;? super T&gt; action):</span>
<span class="line">        */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1.创建集合并添加元素</span></span>
<span class="line">        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//2.利用匿名内部类的形式</span></span>
<span class="line">        <span class="token comment">//底层原理：</span></span>
<span class="line">        <span class="token comment">//其实也会自己遍历集合，依次得到每一个元素</span></span>
<span class="line">        <span class="token comment">//把得到的每一个元素，传递给下面的accept方法</span></span>
<span class="line">        <span class="token comment">//s依次表示集合中的每一个数据</span></span>
<span class="line">       <span class="token comment">/* coll.forEach(new Consumer&lt;String&gt;() {</span>
<span class="line">            @Override</span>
<span class="line">            public void accept(String s) {</span>
<span class="line">                System.out.println(s);</span>
<span class="line">            }</span>
<span class="line">        });*/</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//lambda表达式</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-list集合" tabindex="-1"><a class="header-anchor" href="#_2-list集合"><span>2.List集合</span></a></h2><h3 id="_2-1list集合的概述和特点【记忆】" tabindex="-1"><a class="header-anchor" href="#_2-1list集合的概述和特点【记忆】"><span>2.1List集合的概述和特点【记忆】</span></a></h3><ul><li>List集合的概述 <ul><li>有序集合,这里的有序指的是存取顺序</li><li>用户可以精确控制列表中每个元素的插入位置,用户可以通过整数索引访问元素,并搜索列表中的元素</li><li>与Set集合不同,列表通常允许重复的元素</li></ul></li><li>List集合的特点 <ul><li>存取有序</li><li>可以重复</li><li>有索引</li></ul></li></ul><h3 id="_2-2list集合的特有方法【应用】" tabindex="-1"><a class="header-anchor" href="#_2-2list集合的特有方法【应用】"><span>2.2List集合的特有方法【应用】</span></a></h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table></li><li><p>示例代码</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//method1(list);</span></span>
<span class="line">        <span class="token comment">//method2(list);</span></span>
<span class="line">        <span class="token comment">//method3(list);</span></span>
<span class="line">        <span class="token comment">//method4(list);</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//        E get(int index)		返回指定索引处的元素</span></span>
<span class="line">        <span class="token class-name">String</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//        E set(int index,E element)	修改指定索引处的元素，返回被修改的元素</span></span>
<span class="line">        <span class="token comment">//被替换的那个元素,在集合中就不存在了.</span></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;qqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//        E remove(int index)		删除指定索引处的元素，返回被删除的元素</span></span>
<span class="line">        <span class="token comment">//在List集合中有两个删除的方法</span></span>
<span class="line">        <span class="token comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span></span>
<span class="line">        <span class="token comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span></span>
<span class="line">        <span class="token class-name">String</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//        void add(int index,E element)	在此集合中的指定位置插入指定的元素</span></span>
<span class="line">        <span class="token comment">//原来位置上的元素往后挪一个索引.</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li></ul><h3 id="_2-3list集合的五种遍历方式【应用】" tabindex="-1"><a class="header-anchor" href="#_2-3list集合的五种遍历方式【应用】"><span>2.3List集合的五种遍历方式【应用】</span></a></h3><ol><li>迭代器</li><li>列表迭代器</li><li>增强for</li><li>Lambda表达式</li><li>普通for循环</li></ol><p>代码示例：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">//创建集合并添加元素</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//1.迭代器</span></span>
<span class="line"><span class="token comment">/*Iterator&lt;String&gt; it = list.iterator();</span>
<span class="line">     while(it.hasNext()){</span>
<span class="line">        String str = it.next();</span>
<span class="line">        System.out.println(str);</span>
<span class="line">}*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//2.增强for</span></span>
<span class="line"><span class="token comment">//下面的变量s，其实就是一个第三方的变量而已。</span></span>
<span class="line"><span class="token comment">//在循环的过程中，依次表示集合中的每一个元素</span></span>
<span class="line"><span class="token comment">/* for (String s : list) {</span>
<span class="line">       System.out.println(s);</span>
<span class="line">   }*/</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//3.Lambda表达式</span></span>
<span class="line"><span class="token comment">//forEach方法的底层其实就是一个循环遍历，依次得到集合中的每一个元素</span></span>
<span class="line"><span class="token comment">//并把每一个元素传递给下面的accept方法</span></span>
<span class="line"><span class="token comment">//accept方法的形参s，依次表示集合中的每一个元素</span></span>
<span class="line"><span class="token comment">//list.forEach(s-&gt;System.out.println(s) );</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//4.普通for循环</span></span>
<span class="line"><span class="token comment">//size方法跟get方法还有循环结合的方式，利用索引获取到集合中的每一个元素</span></span>
<span class="line"><span class="token comment">/*for (int i = 0; i &lt; list.size(); i++) {</span>
<span class="line">            //i:依次表示集合中的每一个索引</span>
<span class="line">            String s = list.get(i);</span>
<span class="line">            System.out.println(s);</span>
<span class="line">        }*/</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5.列表迭代器</span></span>
<span class="line"><span class="token comment">//获取一个列表迭代器的对象，里面的指针默认也是指向0索引的</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//额外添加了一个方法：在遍历的过程中，可以添加元素</span></span>
<span class="line"><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> str <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//qqq</span></span>
<span class="line">        it<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-4-细节点注意" tabindex="-1"><a class="header-anchor" href="#_2-4-细节点注意"><span>2.4 细节点注意：</span></a></h3><p>List系列集合中的两个删除的方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token number">1.</span>直接删除元素</span>
<span class="line"><span class="token number">2.</span>通过索引进行删除</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码示例:</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">//List系列集合中的两个删除的方法</span></span>
<span class="line"><span class="token comment">//1.直接删除元素</span></span>
<span class="line"><span class="token comment">//2.通过索引进行删除</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//1.创建集合并添加元素</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//2.删除元素</span></span>
<span class="line"><span class="token comment">//请问：此时删除的是1这个元素，还是1索引上的元素？</span></span>
<span class="line"><span class="token comment">//为什么？</span></span>
<span class="line"><span class="token comment">//因为在调用方法的时候，如果方法出现了重载现象</span></span>
<span class="line"><span class="token comment">//优先调用，实参跟形参类型一致的那个方法。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//list.remove(1);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//手动装箱，手动把基本数据类型的1，变成Integer类型</span></span>
<span class="line"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-数据结构" tabindex="-1"><a class="header-anchor" href="#_3-数据结构"><span>3.数据结构</span></a></h2><h3 id="_3-1数据结构之栈和队列【记忆】" tabindex="-1"><a class="header-anchor" href="#_3-1数据结构之栈和队列【记忆】"><span>3.1数据结构之栈和队列【记忆】</span></a></h3><ul><li><p>栈结构</p><p>​ 先进后出</p></li><li><p>队列结构</p><p>​ 先进先出</p></li></ul><h3 id="_3-2数据结构之数组和链表【记忆】" tabindex="-1"><a class="header-anchor" href="#_3-2数据结构之数组和链表【记忆】"><span>3.2数据结构之数组和链表【记忆】</span></a></h3><ul><li><p>数组结构</p><p>​ 查询快、增删慢</p></li><li><p>队列结构</p><p>​ 查询慢、增删快</p></li></ul><h2 id="_4-list集合的实现类" tabindex="-1"><a class="header-anchor" href="#_4-list集合的实现类"><span>4.List集合的实现类</span></a></h2><h3 id="_4-1list集合子类的特点【记忆】" tabindex="-1"><a class="header-anchor" href="#_4-1list集合子类的特点【记忆】"><span>4.1List集合子类的特点【记忆】</span></a></h3><ul><li><p>ArrayList集合</p><p>​ 底层是数组结构实现，查询快、增删慢</p></li><li><p>LinkedList集合</p><p>​ 底层是链表结构实现，查询慢、增删快</p></li></ul><h3 id="_4-2linkedlist集合的特有功能【应用】" tabindex="-1"><a class="header-anchor" href="#_4-2linkedlist集合的特有功能【应用】"><span>4.2LinkedList集合的特有功能【应用】</span></a></h3><ul><li><p>特有方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public E getLast()</td><td>返回此列表中的最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table></li><li><p>示例代码</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLinkedListDemo4</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//        public void addFirst(E e)	在该列表开头插入指定的元素</span></span>
<span class="line">        <span class="token comment">//method1(list);</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//        public void addLast(E e)	将指定的元素追加到此列表的末尾</span></span>
<span class="line">        <span class="token comment">//method2(list);</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//        public E getFirst()		返回此列表中的第一个元素</span></span>
<span class="line"><span class="token comment">//        public E getLast()		返回此列表中的最后一个元素</span></span>
<span class="line">        <span class="token comment">//method3(list);</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//        public E removeFirst()		从此列表中删除并返回第一个元素</span></span>
<span class="line"><span class="token comment">//        public E removeLast()		从此列表中删除并返回最后一个元素</span></span>
<span class="line">        <span class="token comment">//method4(list);</span></span>
<span class="line">      </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> first <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> last <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> first <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> last <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">&quot;www&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li></ul><h2 id="_5-源码分析" tabindex="-1"><a class="header-anchor" href="#_5-源码分析"><span>5. 源码分析</span></a></h2><h3 id="_5-1-arraylist源码分析" tabindex="-1"><a class="header-anchor" href="#_5-1-arraylist源码分析"><span>5.1 ArrayList源码分析：</span></a></h3><p>核心步骤：</p><ol><li><p>创建ArrayList对象的时候，他在底层先创建了一个长度为0的数组。</p><p>数组名字：elementDate，定义变量size。</p><p>size这个变量有两层含义： ①：元素的个数，也就是集合的长度 ②：下一个元素的存入位置</p></li><li><p>添加元素，添加完毕后，size++</p></li></ol><p>扩容时机一：</p><ol start="3"><li>当存满时候，会创建一个新的数组，新数组的长度，是原来的1.5倍，也就是长度为15.再把所有的元素，全拷贝到新数组中。如果继续添加数据，这个长度为15的数组也满了，那么下次还会继续扩容，还是1.5倍。</li></ol><p>扩容时机二：</p><ol start="4"><li><p>一次性添加多个数据，扩容1.5倍不够，怎么办呀？</p><p>如果一次添加多个元素，1.5倍放不下，那么新创建数组的长度以实际为准。</p></li></ol><p>举个例子： 在一开始，如果默认的长度为10的数组已经装满了，在装满的情况下，我一次性要添加100个数据很显然，10扩容1.5倍，变成15，还是不够，</p><p>怎么办？</p><p>此时新数组的长度，就以实际情况为准，就是110</p><p>具体分析过程可以参见视频讲解。</p><p><strong>添加一个元素时的扩容：</strong></p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411062039237.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>添加多个元素时的扩容：</strong></p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411062039545.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-2-linkedlist源码分析" tabindex="-1"><a class="header-anchor" href="#_5-2-linkedlist源码分析"><span>5.2 LinkedList源码分析：</span></a></h3><p>底层是双向链表结构</p><p>核心步骤如下：</p><ol><li>刚开始创建的时候，底层创建了两个变量：一个记录头结点first，一个记录尾结点last，默认为null</li><li>添加第一个元素时，底层创建一个结点对象，first和last都记录这个结点的地址值</li><li>添加第二个元素时，底层创建一个结点对象，第一个结点会记录第二个结点的地址值，last会记录新结点的地址值</li></ol><p>具体分析过程可以参见视频讲解。</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411062039590.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-3-迭代器源码分析" tabindex="-1"><a class="header-anchor" href="#_5-3-迭代器源码分析"><span>5.3 迭代器源码分析：</span></a></h3><p>迭代器遍历相关的三个方法：</p><ul><li><p><code>Iterator&lt;E&gt; iterator()</code> ：获取一个迭代器对象</p></li><li><p>boolean hasNext() ：判断当前指向的位置是否有元素</p></li><li><p>E next() ：获取当前指向的元素并移动指针</p></li></ul><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411062039877.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,70)]))}const u=s(l,[["render",e],["__file","day10-集合01.html.vue"]]),d=JSON.parse('{"path":"/codenotes/back/javacore/javabasic/day10-%E9%9B%86%E5%90%8801.html","title":"集合Ⅰ","lang":"zh-CN","frontmatter":{"title":"集合Ⅰ","author":"黑马_阿玮","category":["计算机"],"tag":["java"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-10-31T00:00:00.000Z","description":"1.Collection集合 1.1数组和集合的区别【理解】 相同点 都是容器,可以存储多个数据 不同点 数组的长度是不可变的,集合的长度是可变的 数组可以存基本数据类型和引用数据类型 集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类 1.2集合类体系结构【理解】 1.3Collection 集合概述和使用【应用】 Collection...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javacore/javabasic/day10-%E9%9B%86%E5%90%8801.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"集合Ⅰ"}],["meta",{"property":"og:description","content":"1.Collection集合 1.1数组和集合的区别【理解】 相同点 都是容器,可以存储多个数据 不同点 数组的长度是不可变的,集合的长度是可变的 数组可以存基本数据类型和引用数据类型 集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类 1.2集合类体系结构【理解】 1.3Collection 集合概述和使用【应用】 Collection..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/202411062040683.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"黑马_阿玮"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-10-31T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"集合Ⅰ\\",\\"description\\":\\"1.Collection集合 1.1数组和集合的区别【理解】 相同点 都是容器,可以存储多个数据 不同点 数组的长度是不可变的,集合的长度是可变的 数组可以存基本数据类型和引用数据类型 集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类 1.2集合类体系结构【理解】 1.3Collection 集合概述和使用【应用】 Collection...\\"}"]]},"headers":[{"level":2,"title":"1.Collection集合","slug":"_1-collection集合","link":"#_1-collection集合","children":[{"level":3,"title":"1.1数组和集合的区别【理解】","slug":"_1-1数组和集合的区别【理解】","link":"#_1-1数组和集合的区别【理解】","children":[]},{"level":3,"title":"1.2集合类体系结构【理解】","slug":"_1-2集合类体系结构【理解】","link":"#_1-2集合类体系结构【理解】","children":[]},{"level":3,"title":"1.3Collection 集合概述和使用【应用】","slug":"_1-3collection-集合概述和使用【应用】","link":"#_1-3collection-集合概述和使用【应用】","children":[]},{"level":3,"title":"1.4Collection集合的遍历","slug":"_1-4collection集合的遍历","link":"#_1-4collection集合的遍历","children":[{"level":4,"title":"1.4.1 迭代器遍历","slug":"_1-4-1-迭代器遍历","link":"#_1-4-1-迭代器遍历","children":[]},{"level":4,"title":"1.4.2 增强for","slug":"_1-4-2-增强for","link":"#_1-4-2-增强for","children":[]},{"level":4,"title":"1.4.3 lambda表达式","slug":"_1-4-3-lambda表达式","link":"#_1-4-3-lambda表达式","children":[]}]}]},{"level":2,"title":"2.List集合","slug":"_2-list集合","link":"#_2-list集合","children":[{"level":3,"title":"2.1List集合的概述和特点【记忆】","slug":"_2-1list集合的概述和特点【记忆】","link":"#_2-1list集合的概述和特点【记忆】","children":[]},{"level":3,"title":"2.2List集合的特有方法【应用】","slug":"_2-2list集合的特有方法【应用】","link":"#_2-2list集合的特有方法【应用】","children":[]},{"level":3,"title":"2.3List集合的五种遍历方式【应用】","slug":"_2-3list集合的五种遍历方式【应用】","link":"#_2-3list集合的五种遍历方式【应用】","children":[]},{"level":3,"title":"2.4 细节点注意：","slug":"_2-4-细节点注意","link":"#_2-4-细节点注意","children":[]}]},{"level":2,"title":"3.数据结构","slug":"_3-数据结构","link":"#_3-数据结构","children":[{"level":3,"title":"3.1数据结构之栈和队列【记忆】","slug":"_3-1数据结构之栈和队列【记忆】","link":"#_3-1数据结构之栈和队列【记忆】","children":[]},{"level":3,"title":"3.2数据结构之数组和链表【记忆】","slug":"_3-2数据结构之数组和链表【记忆】","link":"#_3-2数据结构之数组和链表【记忆】","children":[]}]},{"level":2,"title":"4.List集合的实现类","slug":"_4-list集合的实现类","link":"#_4-list集合的实现类","children":[{"level":3,"title":"4.1List集合子类的特点【记忆】","slug":"_4-1list集合子类的特点【记忆】","link":"#_4-1list集合子类的特点【记忆】","children":[]},{"level":3,"title":"4.2LinkedList集合的特有功能【应用】","slug":"_4-2linkedlist集合的特有功能【应用】","link":"#_4-2linkedlist集合的特有功能【应用】","children":[]}]},{"level":2,"title":"5. 源码分析","slug":"_5-源码分析","link":"#_5-源码分析","children":[{"level":3,"title":"5.1 ArrayList源码分析：","slug":"_5-1-arraylist源码分析","link":"#_5-1-arraylist源码分析","children":[]},{"level":3,"title":"5.2 LinkedList源码分析：","slug":"_5-2-linkedlist源码分析","link":"#_5-2-linkedlist源码分析","children":[]},{"level":3,"title":"5.3 迭代器源码分析：","slug":"_5-3-迭代器源码分析","link":"#_5-3-迭代器源码分析","children":[]}]}],"git":{},"readingTime":{"minutes":11.71,"words":3514},"filePathRelative":"codenotes/back/javacore/javabasic/day10-集合01.md","localizedDate":"2024年10月31日","excerpt":"<h2>1.Collection集合</h2>\\n<h3>1.1数组和集合的区别【理解】</h3>\\n<ul>\\n<li>\\n<p>相同点</p>\\n<p>都是容器,可以存储多个数据</p>\\n</li>\\n<li>\\n<p>不同点</p>\\n<ul>\\n<li>\\n<p>数组的长度是不可变的,集合的长度是可变的</p>\\n</li>\\n<li>\\n<p>数组可以存基本数据类型和引用数据类型</p>\\n<p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>1.2集合类体系结构【理解】</h3>\\n<figure><img src=\\"https://gitee.com/private_crh/notes/raw/master/typora/202411062040683.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{u as comp,d as data};
