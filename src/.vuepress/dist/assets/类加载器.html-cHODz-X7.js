import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,o as t}from"./app-eWV4nnR8.js";const p={};function l(i,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="写在前面的话" tabindex="-1"><a class="header-anchor" href="#写在前面的话"><span>写在前面的话：</span></a></h1><blockquote><p>基础加强包含了：</p><p>反射，动态代理，类加载器，xml，注解，日志，单元测试等知识点</p><p>其中最难的是反射和动态代理，其他知识点都非常简单</p><p>由于B站P数限制，xml，注解等知识点，阿玮写了详细文档供大家学习</p></blockquote><h2 id="_1-类加载器" tabindex="-1"><a class="header-anchor" href="#_1-类加载器"><span>1.类加载器</span></a></h2><h3 id="_1-1类加载器" tabindex="-1"><a class="header-anchor" href="#_1-1类加载器"><span>1.1类加载器</span></a></h3><ul><li><p>作用</p><p>负责将.class文件（存储的物理文件）加载在到内存中</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025134.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="_1-2类加载的完整过程" tabindex="-1"><a class="header-anchor" href="#_1-2类加载的完整过程"><span>1.2类加载的完整过程</span></a></h3><ul><li><p>类加载时机</p><p>简单理解：字节码文件什么时候会被加载到内存中？</p><p>有以下的几种情况：</p><ul><li>创建类的实例（对象）</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul><p>总结而言：用到了就加载，不用不加载</p></li><li><p>类加载过程</p><ol><li><p>加载</p><ul><li>通过包名 + 类名，获取这个类，准备用流进行传输</li><li>在这个类加载到内存中</li><li>加载完毕创建一个class对象</li></ul><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025216.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>链接</p><ul><li><p>验证</p><p>确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</p><p>(文件中的信息是否符合虚拟机规范有没有安全隐患)</p></li></ul><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025010.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>准备</p><p>负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值</p><p>(初始化静态变量)</p></li></ul><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025908.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>解析</p><p>将类的二进制数据流中的符号引用替换为直接引用</p><p>(本类中如果用到了其他类，此时就需要找到对应的类)</p></li></ul><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025808.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>初始化</p><p>根据程序员通过程序制定的主观计划去初始化类变量和其他资源</p><p>(静态变量赋值以及初始化其他资源)</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025266.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol></li><li><p>小结</p><ul><li>当一个类被使用的时候，才会加载到内存</li><li>类加载的过程: 加载、验证、准备、解析、初始化</li></ul></li></ul><h3 id="_1-3类加载的分类【理解】" tabindex="-1"><a class="header-anchor" href="#_1-3类加载的分类【理解】"><span>1.3类加载的分类【理解】</span></a></h3><ul><li><p>分类</p><ul><li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li><li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li></ul></li><li><p>类加载器的继承关系</p><ul><li>System的父加载器为Platform</li><li>Platform的父加载器为Bootstrap</li></ul></li><li><p>代码演示</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderDemo1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取系统类加载器</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取系统类加载器的父加载器 --- 平台类加载器</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> classLoader1 <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取平台类加载器的父加载器 --- 启动类加载器</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> classLoader2 <span class="token operator">=</span> classLoader1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统类加载器&quot;</span> <span class="token operator">+</span> systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;平台类加载器&quot;</span> <span class="token operator">+</span> classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;启动类加载器&quot;</span> <span class="token operator">+</span> classLoader2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li></ul><h3 id="_1-4双亲委派模型【理解】" tabindex="-1"><a class="header-anchor" href="#_1-4双亲委派模型【理解】"><span>1.4双亲委派模型【理解】</span></a></h3><ul><li><p>介绍</p><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411071025660.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="_1-5classloader-中的两个方法【应用】" tabindex="-1"><a class="header-anchor" href="#_1-5classloader-中的两个方法【应用】"><span>1.5ClassLoader 中的两个方法【应用】</span></a></h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr></tbody></table></li><li><p>示例代码</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderDemo2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span></span>
<span class="line">        <span class="token comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取系统类加载器</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//利用加载器去加载一个指定的文件</span></span>
<span class="line">        <span class="token comment">//参数：文件的路径（放在src的根目录下，默认去那里加载）</span></span>
<span class="line">        <span class="token comment">//返回值：字节流。</span></span>
<span class="line">        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;prop.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li></ul>`,13)]))}const r=a(p,[["render",l],["__file","类加载器.html.vue"]]),u=JSON.parse('{"path":"/codenotes/back/javacore/javaadvance/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html","title":"类加载器","lang":"zh-CN","frontmatter":{"title":"类加载器","author":"黑马_阿玮","category":["计算机"],"tag":["java"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-11-07T00:00:00.000Z","headerDepth":2,"description":"写在前面的话： 基础加强包含了： 反射，动态代理，类加载器，xml，注解，日志，单元测试等知识点 其中最难的是反射和动态代理，其他知识点都非常简单 由于B站P数限制，xml，注解等知识点，阿玮写了详细文档供大家学习 1.类加载器 1.1类加载器 作用 负责将.class文件（存储的物理文件）加载在到内存中 1.2类加载的完整过程 类加载时机 简单理解：...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javacore/javaadvance/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"类加载器"}],["meta",{"property":"og:description","content":"写在前面的话： 基础加强包含了： 反射，动态代理，类加载器，xml，注解，日志，单元测试等知识点 其中最难的是反射和动态代理，其他知识点都非常简单 由于B站P数限制，xml，注解等知识点，阿玮写了详细文档供大家学习 1.类加载器 1.1类加载器 作用 负责将.class文件（存储的物理文件）加载在到内存中 1.2类加载的完整过程 类加载时机 简单理解：..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/202411071025134.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"黑马_阿玮"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-11-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"类加载器\\",\\"description\\":\\"写在前面的话： 基础加强包含了： 反射，动态代理，类加载器，xml，注解，日志，单元测试等知识点 其中最难的是反射和动态代理，其他知识点都非常简单 由于B站P数限制，xml，注解等知识点，阿玮写了详细文档供大家学习 1.类加载器 1.1类加载器 作用 负责将.class文件（存储的物理文件）加载在到内存中 1.2类加载的完整过程 类加载时机 简单理解：...\\"}"]]},"headers":[{"level":1,"title":"写在前面的话：","slug":"写在前面的话","link":"#写在前面的话","children":[{"level":2,"title":"1.类加载器","slug":"_1-类加载器","link":"#_1-类加载器","children":[{"level":3,"title":"1.1类加载器","slug":"_1-1类加载器","link":"#_1-1类加载器","children":[]},{"level":3,"title":"1.2类加载的完整过程","slug":"_1-2类加载的完整过程","link":"#_1-2类加载的完整过程","children":[]},{"level":3,"title":"1.3类加载的分类【理解】","slug":"_1-3类加载的分类【理解】","link":"#_1-3类加载的分类【理解】","children":[]},{"level":3,"title":"1.4双亲委派模型【理解】","slug":"_1-4双亲委派模型【理解】","link":"#_1-4双亲委派模型【理解】","children":[]},{"level":3,"title":"1.5ClassLoader 中的两个方法【应用】","slug":"_1-5classloader-中的两个方法【应用】","link":"#_1-5classloader-中的两个方法【应用】","children":[]}]}]}],"git":{},"readingTime":{"minutes":3.89,"words":1168},"filePathRelative":"codenotes/back/javacore/javaadvance/类加载器.md","localizedDate":"2024年11月7日","excerpt":"\\n<blockquote>\\n<p>基础加强包含了：</p>\\n<p>反射，动态代理，类加载器，xml，注解，日志，单元测试等知识点</p>\\n<p>其中最难的是反射和动态代理，其他知识点都非常简单</p>\\n<p>由于B站P数限制，xml，注解等知识点，阿玮写了详细文档供大家学习</p>\\n</blockquote>\\n<h2>1.类加载器</h2>\\n<h3>1.1类加载器</h3>\\n<ul>\\n<li>\\n<p>作用</p>\\n<p>负责将.class文件（存储的物理文件）加载在到内存中</p>\\n<figure><img src=\\"https://gitee.com/private_crh/notes/raw/master/typora/202411071025134.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,u as data};
