import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-eWV4nnR8.js";const t="/assets/image-20241210202945925-kf8IOn30.png",o={};function l(c,s){return p(),a("div",null,s[0]||(s[0]=[e('<h2 id="会话" tabindex="-1"><a class="header-anchor" href="#会话"><span>会话</span></a></h2><p>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。</p><p>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据。</p><h2 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie"><span>1. Cookie</span></a></h2><h3 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介"><span>1.1 简介</span></a></h3><p>Cookie (小甜饼) 是客户端技术，服务器把每个用户的数据以 cookie 的形式写给用户各自的浏览器。当用户使用浏览器再去访问服务器中的 web 资源时，就会带着各自的数据去。这样，web 资源处理的就是用户各自的数据了。</p><ol><li>服务器通知客户端保存键值对的一种技术</li><li>客户端有了 Cookie 后，每次请求都发送给服务器</li><li>每个 Cookie 的大小不能超过 4kb</li></ol><h3 id="_1-2-场景" tabindex="-1"><a class="header-anchor" href="#_1-2-场景"><span>1.2 场景</span></a></h3><ol><li>保存上次登录时间</li><li>保存用户名....</li><li>网站的个性化</li></ol><h3 id="_1-3-创建cookie" tabindex="-1"><a class="header-anchor" href="#_1-3-创建cookie"><span>1.3 创建Cookie</span></a></h3><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//1 创建 Cookie 对象</span></span>
<span class="line">    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;key4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2 通知客户端保存 Cookie</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//1 创建 Cookie 对象</span></span>
<span class="line">    <span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;key5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2 通知客户端保存 Cookie</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie 创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-4-服务器获取cookie" tabindex="-1"><a class="header-anchor" href="#_1-4-服务器获取cookie"><span>1.4 服务器获取Cookie</span></a></h3><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241027111241437.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>工具类</strong></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieUtils</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 查找指定名称的 Cookie 对象</span>
<span class="line">    * <span class="token keyword">@param</span> <span class="token parameter">name</span></span>
<span class="line">    * <span class="token keyword">@param</span> <span class="token parameter">cookies</span></span>
<span class="line">    * <span class="token keyword">@return</span></span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Cookie</span> <span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token punctuation">,</span> <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cookies <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        	<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        		<span class="token keyword">return</span> cookie<span class="token punctuation">;</span></span>
<span class="line">        	<span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> throwsServletException<span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// getName 方法返回 Cookie 的 key（名）</span></span>
<span class="line">        <span class="token comment">// getValue 方法返回 Cookie 的 value 值</span></span>
<span class="line">        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie[&quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;]&lt;br/&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token class-name">Cookie</span> iWantCookie <span class="token operator">=</span> <span class="token class-name">CookieUtils</span><span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// for (Cookie cookie : cookies) {</span></span>
<span class="line">    <span class="token comment">// 	if (&quot;key2&quot;.equals(cookie.getName())) {</span></span>
<span class="line">    <span class="token comment">// 		iWantCookie = cookie;</span></span>
<span class="line">    <span class="token comment">// 		break;</span></span>
<span class="line">    <span class="token comment">// 	 }</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果不等于 null，说明赋过值，也就是找到了需要的 Cookie</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>iWantCookie <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;找到了需要的 Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>JSEESIONID：用来区分不同的会话</p><h3 id="_1-5-修改cookie" tabindex="-1"><a class="header-anchor" href="#_1-5-修改cookie"><span>1.5 修改Cookie</span></a></h3><p><strong>方法一</strong></p><blockquote><ol><li>先创建一个要修改的同名（指的就是 key）的 Cookie 对象</li><li>在构造器，同时赋于新的 Cookie 值</li><li>调用 response.addCookie( Cookie );</li></ol></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Cookie cookie = new Cookie(&quot;key1&quot;,&quot;newValue1&quot;);</span>
<span class="line">resp.addCookie(cookie);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二</strong></p><blockquote><ol><li>先查找到需要修改的 Cookie 对象</li><li>调用 setValue()方法赋于新的 Cookie 值</li><li>调用 response.addCookie()通知客户端保存修改</li></ol></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Cookie cookie = CookieUtils.findCookie(&quot;key2&quot;, req.getCookies());</span>
<span class="line">if (cookie != null) {</span>
<span class="line">	cookie.setValue(&quot;newValue2&quot;);</span>
<span class="line">	resp.addCookie(cookie);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-cookie生命控制" tabindex="-1"><a class="header-anchor" href="#_1-6-cookie生命控制"><span>1.6 Cookie生命控制</span></a></h3><blockquote><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p><p>Cookie 无效后，浏览器发送http请求时不会携带 Cookie</p></blockquote><p><strong>setMaxAge()</strong></p><ul><li>正数，表示在指定的秒数后过期</li><li>负数，表示浏览器一关，Cookie 就会被删除<span style="color:red;">（默认值是 -1） </span></li><li>零，表示马上删除 Cookie</li></ul><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 设置存活 1 个小时的 Cooie</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">req</span></span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">resp</span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">life3600</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;life3600&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;life3600&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 Cookie 一小时之后被删除。无效</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;已经创建了一个存活一小时的 Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 马上删除一个 Cookie</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">req</span></span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">resp</span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deleteNow</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 先找到你要删除的 Cookie 对象</span></span>
<span class="line">    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token class-name">CookieUtils</span><span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">&quot;key4&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调用 setMaxAge(0);</span></span>
<span class="line">        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表示马上删除，都不需要等待浏览器关闭</span></span>
<span class="line">        <span class="token comment">// 调用 response.addCookie(cookie);</span></span>
<span class="line">        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;key4 的 Cookie 已经被删除&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 默认的会话级别的 Cookie</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">req</span></span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">resp</span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">defaultLife</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;defalutLife&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;defaultLife&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置存活时间</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-7-有效路径path的设置" tabindex="-1"><a class="header-anchor" href="#_1-7-有效路径path的设置"><span>1.7 有效路径Path的设置</span></a></h3><blockquote><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。path 属性是通过请求的地址来进行有效的过滤</p></blockquote><p>CookieA path=/工程路径 CookieB path=/工程路径/abc</p><p><code>http://ip:port/工程路径/a.html</code> CookieA 发送 CookieB 不发送 <code>http://ip:port/工程路径/abc/a.html</code> CookieA 发送 CookieB 发送</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">testPath</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;path1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;path1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getContextPath() ===&gt;&gt;&gt;&gt; 得到工程路径</span></span>
<span class="line">    cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/abc&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ===&gt;&gt;&gt;&gt; /工程路径/abc</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;创建了一个带有 Path 路径的 Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-session" tabindex="-1"><a class="header-anchor" href="#_2-session"><span>2. Session</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><ol><li>Session 是一个接口（HttpSession）</li><li>Session 是会话，用来维护一个客户端和服务器之间关联的一种技术</li><li>每个客户端都有自己的一个 Session 会话</li><li>Session 会话中，我们经常用来保存用户登录之后的信息</li></ol><h3 id="创建session" tabindex="-1"><a class="header-anchor" href="#创建session"><span>创建Session</span></a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>request.getSession()</td><td>第一次调用是创建 Session 会话。之后调用都是获取前面创建好的 Session 会话对象</td></tr><tr><td>isNew()</td><td>判断到底是不是刚创建出来的</td></tr><tr><td>getId()</td><td>得到 Session 的会话 id 值</td></tr></tbody></table><p>每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是<span style="color:red;">唯一</span>的。</p><h3 id="session域数据的存取" tabindex="-1"><a class="header-anchor" href="#session域数据的存取"><span>Session域数据的存取</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 往 Session 中保存数据</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">req</span></span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">resp</span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;已经往 Session 中保存了数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 获取 Session 域中的数据</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">req</span></span>
<span class="line">* <span class="token keyword">@param</span> <span class="token parameter">resp</span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Object</span> attribute <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;从 Session 中获取出 key1 的数据是：&quot;</span> <span class="token operator">+</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="session生命周期" tabindex="-1"><a class="header-anchor" href="#session生命周期"><span>Session生命周期</span></a></h3><p><span style="color:red;">setMaxInactiveInterval(int interval)</span>设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。</p><ul><li>值为正数的时候，设定 Session 的超时时长</li><li>负数表示永不超时（极少使用），否则一直不被销毁</li></ul><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>invalidate()</td><td>让当前 Session 会话马上超时无效</td></tr><tr><td>getMaxInactiveInterval()</td><td>获取 Session 的超时时间</td></tr></tbody></table><p>Session <span style="color:red;">默认的超时时间</span> 为 30 分钟</p><blockquote><p>因为在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前Tomcat 服务器下所有的Session超时配置默认时长为：30 分钟</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>设置 web工程，默认的 Session 的超时时长为其他时长，在<span style="color:red;">web.xml </span>配置</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!--表示当前 web 工程。创建出来 的所有 Session 默认是 20 分钟 超时时长--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只修改个别 Session 的超时时长，使用 <span style="color:red;">setMaxInactiveInterval(int interval) </span>来进行单独的设置</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241027115041529.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">life3</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 先获取 Session 对象</span></span>
<span class="line">    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置当前 Session3 秒后超时</span></span>
<span class="line">    session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;当前 Session 已经设置为 3 秒后超时&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deleteNow</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 先获取 Session 对象</span></span>
<span class="line">    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 让 Session 会话马上超时</span></span>
<span class="line">    session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Session 已经设置为超时（无效）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span>底层原理</span></a></h3><p>Session 技术，底层其实是基于 Cookie 技术来实现的</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241027115239645.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,57)]))}const k=n(o,[["render",l],["__file","cookie.html.vue"]]),r=JSON.parse('{"path":"/codenotes/back/javaweb/cookie.html","title":"Cookie","lang":"zh-CN","frontmatter":{"title":"Cookie","author":[{"name":"尚硅谷"},{"name":"Ahzy"}],"category":["计算机"],"tag":["javaweb"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"headerDepth":2,"description":"会话 会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。 每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据。 1. Cookie 1.1 简介 Cookie (小甜饼) 是客户端技术，服务器把每个用户的数据以 cookie ...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javaweb/cookie.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"Cookie"}],["meta",{"property":"og:description","content":"会话 会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。 每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据。 1. Cookie 1.1 简介 Cookie (小甜饼) 是客户端技术，服务器把每个用户的数据以 cookie ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/image-20241027111241437.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"尚硅谷"}],["meta",{"property":"article:tag","content":"javaweb"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Cookie\\",\\"description\\":\\"会话 会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。 每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据。 1. Cookie 1.1 简介 Cookie (小甜饼) 是客户端技术，服务器把每个用户的数据以 cookie ...\\"}"]]},"headers":[{"level":2,"title":"会话","slug":"会话","link":"#会话","children":[]},{"level":2,"title":"1. Cookie","slug":"_1-cookie","link":"#_1-cookie","children":[{"level":3,"title":"1.1 简介","slug":"_1-1-简介","link":"#_1-1-简介","children":[]},{"level":3,"title":"1.2 场景","slug":"_1-2-场景","link":"#_1-2-场景","children":[]},{"level":3,"title":"1.3 创建Cookie","slug":"_1-3-创建cookie","link":"#_1-3-创建cookie","children":[]},{"level":3,"title":"1.4 服务器获取Cookie","slug":"_1-4-服务器获取cookie","link":"#_1-4-服务器获取cookie","children":[]},{"level":3,"title":"1.5 修改Cookie","slug":"_1-5-修改cookie","link":"#_1-5-修改cookie","children":[]},{"level":3,"title":"1.6 Cookie生命控制","slug":"_1-6-cookie生命控制","link":"#_1-6-cookie生命控制","children":[]},{"level":3,"title":"1.7 有效路径Path的设置","slug":"_1-7-有效路径path的设置","link":"#_1-7-有效路径path的设置","children":[]}]},{"level":2,"title":"2. Session","slug":"_2-session","link":"#_2-session","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"创建Session","slug":"创建session","link":"#创建session","children":[]},{"level":3,"title":"Session域数据的存取","slug":"session域数据的存取","link":"#session域数据的存取","children":[]},{"level":3,"title":"Session生命周期","slug":"session生命周期","link":"#session生命周期","children":[]},{"level":3,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[]}]}],"git":{},"readingTime":{"minutes":6.09,"words":1826},"filePathRelative":"codenotes/back/javaweb/cookie.md","excerpt":"<h2>会话</h2>\\n<p>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。</p>\\n<p>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据。</p>\\n<h2>1. Cookie</h2>\\n<h3>1.1 简介</h3>\\n<p>Cookie (小甜饼) 是客户端技术，服务器把每个用户的数据以 cookie 的形式写给用户各自的浏览器。当用户使用浏览器再去访问服务器中的 web 资源时，就会带着各自的数据去。这样，web 资源处理的就是用户各自的数据了。</p>\\n","autoDesc":true}');export{k as comp,r as data};
