import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-eWV4nnR8.js";const p="/assets/image-20241203013759504-B6aScHf0.png",l="/assets/image-20241203230057888-DrHlKeof.png",c="/assets/image-20241204003951579-DbiROOf4.png",i="/assets/image-20241205113205205-DGjPPqFu.png",o="/assets/image-20241205114632922-AivCce3y.png",u="/assets/image-20241205120924616-DKYf-D6W.png",r="/assets/image-20241205124424689-D3z1YxFe.png",d="/assets/image-20241205124317759-Dd-rieci.png",k="/assets/image-20241205135807526-C5FP9P31.png",v="/assets/image-20241206214840380-BrFzN8tp.png",m="/assets/image-20241206214858446-B6XC35C7.png",b={};function g(h,s){return t(),a("div",null,s[0]||(s[0]=[e('<h2 id="_1-selvet基础" tabindex="-1"><a class="header-anchor" href="#_1-selvet基础"><span>1. Selvet基础</span></a></h2><blockquote><ol><li>JavaEE 规范之一，规范就是接口</li><li>JavaWeb<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> 三大组件<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>之一</li><li>运行在服务器上的一个 java 小程序（由Tomcat解析和执行），可以接收请求响应数据</li><li>由java编写，本质是一个java类</li><li>servlet3.0 前使用 web.xml , servlet3.0 版本以后(包括 3.0)支持注解，同时支持web.xml 配置</li></ol></blockquote><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>请求动态资源一条路，只访问静态资源 Apache 和 Nignx 足以，不需 Tomcat</li><li>请求静态资源一条路，直接返回</li></ul><h3 id="_1-1-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-1-快速入门"><span>1.1 快速入门</span></a></h3><p>添加 <code>servlet-api.jar</code> (在 <strong>tomcat/lib</strong> 下) 到工程, 因为servlet.jar 不是jdk自带的, 要引入</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">  * 1. 编写类实现Servlet接口</span>
<span class="line">  * 2. 实现 service 方法5个</span>
<span class="line">  * 3. 在 web.xml 中去配置 servlet 程序的访问地址</span>
<span class="line">  */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//属性</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1.初始化 servlet</span>
<span class="line">     * 2.当创建HelloServlet 实例时，会调用init方法</span>
<span class="line">     * 3. 该方法只会被调用一次</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">servletConfig</span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init() 被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 返回ServletConfig 也就是返回Servlet的配置</span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1. service方法处理浏览器的请求(包括get/post)</span>
<span class="line">     * 2. 当浏览器每次请求Servlet时，就会调用一次service</span>
<span class="line">     * 3. 当tomcat调用该方法时，会把http请求的数据封装成实现ServletRequest接口的request对象</span>
<span class="line">     * 4. 通过servletRequest 对象，可以得到用户提交的数据</span>
<span class="line">     * 5. servletResponse 对象可以用于返回数据给tomcat-&gt;浏览器</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">servletRequest</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">servletResponse</span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//如果count的值，在不停的累计，说明HelloServlet是单例的</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hi HelloServlet~ count= &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//Tomcat每处理一次http请求，就生成一个新的线程</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前线程id= &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//思考-&gt;从servletRequest对象来获取请求方式-&gt;</span></span>
<span class="line">        <span class="token comment">//1. ServletRequest 没有得到提交方式的方法</span></span>
<span class="line">        <span class="token comment">//2. ServletRequest 看看ServletRequest子接口有没有相关方法</span></span>
<span class="line">        <span class="token comment">//3. 老师小技巧：ctrl+alt+b =&gt; 可以看到接口的子接口和实现子类</span></span>
<span class="line">        <span class="token comment">//4. 把servletReqeust转成 HttpServletRequest引用</span></span>
<span class="line">        <span class="token comment">//5. 仍然是Java基础的OOP</span></span>
<span class="line">        <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> method <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用doGet() 处理GET请求</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用doPost() 处理POST请求</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 用于响应get请求的</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doGet() 被调用..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 用于响应post请求的</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doPost() 被调用..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 返回servlet信息，使用较少</span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1. 该方法是在servlet销毁时，被调用</span>
<span class="line">     * 2. 只会调用一次</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy() 被调用...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>web.xml中的配置</p><div class="language-xml line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="xml" data-title="xml" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!--老韩小技巧: web.xml主要用来配置该web应用使用到的Servlet</span>
<span class="line">        老师解读</span>
<span class="line">        1. servlet-name: 给Servlet取名(程序员决定), 该名字唯一</span>
<span class="line">        2. servlet-class: Servlet的类的全路径: Tomcat在反射生成该Servlet需要使用</span>
<span class="line">        3. url-pattern: 这个就是该servlet访问的url的配置(路径)</span>
<span class="line">        4. 这时我们应该这样访问servlet http://localhost:8080/servlet/helloServlet</span>
<span class="line">        5. url-pattern 取名是程序员决定的</span>
<span class="line">        6. load-on-startup 表示在tomcat 启动时，会自动的加载servlet实例</span>
<span class="line"></span>
<span class="line">        小技巧： alt+r =&gt; 老师配置</span>
<span class="line">    --&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!-- 配置HelloServlet --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.hspedu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!--&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><blockquote><p><code>http://ip:port/工程路径 </code> 默认访问 index.jsp</p></blockquote><h3 id="_1-2-浏览器请求servlet-uml分析" tabindex="-1"><a class="header-anchor" href="#_1-2-浏览器请求servlet-uml分析"><span>1.2 浏览器请求Servlet UML分析</span></a></h3><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Tomcat 不关心是哪个浏览器发来的请求，都是走一样的流程</li><li>执行 1 的时候，对包进行扫描，有@WebServlet，说明该类为Servlet，读取urlPatterns</li></ul><h3 id="_1-3-生命周期" tabindex="-1"><a class="header-anchor" href="#_1-3-生命周期"><span>1.3 生命周期</span></a></h3><blockquote><ol><li>执行Servlet 构造器方法</li><li>执行init 初始化方法</li><li>执行service 方法</li><li>执行destroy 销毁方法</li></ol></blockquote><ul><li>Servlet 容器(比如: Tomcat)加载 Servlet，加载完成后，Servlet 容器会创建一个Servlet 实例并调用 <strong>init()方法</strong>，init()方法只会调用一次, Servlet 容器在下面的情况装载Servlet： <ol><li>Servlet 容器(Tomcat)启动时自动装载某些 servlet，实现这个需要在web.xml 文件中添加 <code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code> ，1 表示装载的顺序</li><li>在 Servlet 容器启动后，浏览器 <strong>首次</strong> 向 Servlet 发送请求</li><li>Servlet 重新装载时(比如 <strong>tomcat 进行 redeploy</strong>【redeploy 会 <strong>销毁所有的Servlet 实例</strong>】)，浏览器再向 Servlet 发送请求的第 1 次</li></ol></li><li>处理浏览器请求阶段(<strong>service 方法</strong>)： <ol><li>每收到一个 http 请求，服务器就会产生一个新的线程去处理</li><li>创建一个用于封装 HTTP 请求消息的 ServletRequest 对象和一个代表HTTP 响应消息的ServletResponse 对象</li><li>. 然后调用 Servlet 的 service()方法并将请求和响应对象作为参数传递进去</li></ol></li><li>终止阶段 destory 方法 <ol><li>当web 应用被终止，或者Servlet 容器终止运行，或者Servlet 类重新装载时，会调用destroy()方法 , 比如重启 tomcat ,或者 redeploy web 应用</li></ol></li></ul><h3 id="_1-4-请求分发处理" tabindex="-1"><a class="header-anchor" href="#_1-4-请求分发处理"><span>1.4 请求分发处理</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1. service方法处理浏览器的请求(包括get/post)</span>
<span class="line">     * 2. 当浏览器每次请求Servlet时，就会调用一次service</span>
<span class="line">     * 3. 当tomcat调用该方法时，会把http请求的数据封装成实现ServletRequest接口的request对象</span>
<span class="line">     * 4. 通过servletRequest 对象，可以得到用户提交的数据</span>
<span class="line">     * 5. servletResponse 对象可以用于返回数据给tomcat-&gt;浏览器</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">servletRequest</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">servletResponse</span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//思考-&gt;从servletRequest对象来获取请求方式-&gt;</span></span>
<span class="line">        <span class="token comment">//1. ServletRequest 没有得到提交方式的方法</span></span>
<span class="line">        <span class="token comment">//2. ServletRequest 看看ServletRequest子接口有没有相关方法</span></span>
<span class="line">        <span class="token comment">//3. 老师小技巧：ctrl+alt+b =&gt; 可以看到接口的子接口和实现子类</span></span>
<span class="line">        <span class="token comment">//4. 把servletReqeust转成 HttpServletRequest引用</span></span>
<span class="line">        <span class="token comment">//5. 仍然是Java基础的OOP</span></span>
<span class="line">        <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> method <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用doGet() 处理GET请求</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用doPost() 处理POST请求</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 用于响应get请求的</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doGet() 被调用..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 用于响应post请求的</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doPost() 被调用..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-5-httpservlet" tabindex="-1"><a class="header-anchor" href="#_1-5-httpservlet"><span>1.5 HttpServlet</span></a></h3><p>在实际项目中，都是使用<strong>继承</strong> HttpServlet 类开发 Servlet 程序，更加方便</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Override</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"> 	业务代码</span>
<span class="line"> 	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token annotation punctuation">@Override</span></span>
<span class="line">   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequestreq</span><span class="token punctuation">,</span><span class="token class-name">HttpServletResponseresp</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"> 	业务代码</span>
<span class="line"> 	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>要在web.xml中配置servlet</p><p><mark>可以在IDEA中快速创建</mark></p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20241002204224295.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-6-小节" tabindex="-1"><a class="header-anchor" href="#_1-6-小节"><span>1.6 小节</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>Servlet 是一个供其他 Java 程序（Servlet 引擎）调用的 Java 类，不能独立运行</li><li>针对浏览器的多次 Servlet 请求，通常情况下，服务器只会创建一个Servlet 实例对象，也就是说 Servlet 实例对象一旦创建，它就会驻留在内存中，为后续的其它请求服务，直至web 容器退出/或者 redeploy 该 web 应用，servlet 实例对象才会销毁</li><li>. 在 Servlet 的整个生命周期内，init 方法只被调用一次。而对每次请求都导致Servlet 引擎调用一次 servlet 的 service 方法。</li><li>对于每次访问请求，Servlet 引擎都会创建一个新的 HttpServletRequest 请求对象和一个新的 HttpServletResponse 响应对象，然后将这两个对象作为参数传递给它调用的Servlet的 service()方法，service 方法再根据请求方式分别调用 doXXX 方法</li><li>如果在<code>&lt;servlet&gt;</code>元素中配置了一个<code>&lt;load-on-startup&gt;</code>元素，那么WEB 应用程序在启动时，就会装载并创建 Servlet 的实例对象、以及调用 Servlet 实例对象的init()方法</li></ol></div><h2 id="_2-注解方式" tabindex="-1"><a class="header-anchor" href="#_2-注解方式"><span>2. 注解方式</span></a></h2><h3 id="_2-1-快速入门" tabindex="-1"><a class="header-anchor" href="#_2-1-快速入门"><span>2.1 快速入门</span></a></h3><p>编写类去继承HttpServlet</p><p>注解方式配置, 一个Servlet支持配置多个urlPattern</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> *  1. @WebServlet 是一个注解 =&gt; java基础-&gt;注解</span>
<span class="line"> *  2. @WebServlet 源码 ctrl+b 进入</span>
<span class="line"> *  3. urlPatterns 对应 web.xml 的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *  4. <span class="token punctuation">{</span>&quot;/ok1&quot;, &quot;/ok2&quot;<span class="token punctuation">}</span> 可以给OkServlet配置多个 url-pattern</span>
<span class="line"> *  5. 相当于这个@WebServlet(urlPatterns = <span class="token punctuation">{</span>&quot;/ok1&quot;, &quot;/ok2&quot;<span class="token punctuation">}</span>) 代替了 web.xml的配置</span>
<span class="line"> *     底层使用了 反射+注解+IO+集合 来完成一个支撑</span>
<span class="line"> *  6. 浏览器可以这样访问OkServlet时，可以 http://localhost:8080/servlet/ok1 或者</span>
<span class="line"> *     http://localhost:8080/servlet/ok2</span>
<span class="line"> *  7. 我们可以根据 @interface WebServlet 源码知道可以配置哪些</span>
<span class="line"> *  web.xml init-param 在注解中，如何指定呢? 老师看了源码，老师搞定</span>
<span class="line"> *          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *  8. 注解方式开发Servlet和 web.xml配置servlet 流程机制是一样</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/ok1,/aa&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> initParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;yy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;yy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OkServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注解方式 OkServlet init()被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注解方式 OkServlet doPost()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注解方式 OkServlet doGet()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-2-模拟tomcat通过注解装载servlet" tabindex="-1"><a class="header-anchor" href="#_2-2-模拟tomcat通过注解装载servlet"><span>2.2 模拟Tomcat通过注解装载Servlet</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> 韩顺平</span>
<span class="line"> * <span class="token keyword">@version</span> 1.0</span>
<span class="line"> * 模拟一把Tomcat是如果通过 @WebServlet(urlPatterns = <span class="token punctuation">{</span>&quot;/ok1&quot;, &quot;/ok2&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * 来装载一个Servlet的</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAnnotationServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1. 首先要得到扫描的包 路径 io, 进而得到类的全路径</span></span>
<span class="line">        <span class="token class-name">String</span> classAllPath <span class="token operator">=</span> <span class="token string">&quot;com.hspedu.servlet.annotation.OkServlet&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//2. 得到 OkServlet的Class对象</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classAllPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//3. 通过class对象，得到Annotation</span></span>
<span class="line">        <span class="token class-name">WebServlet</span> annotation <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">WebServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;url= &quot;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//如果匹配url,如果是第一次，tomcat就会创建一个OkServlet实例，放入到hashmap</span></span>
<span class="line">        <span class="token class-name">Object</span> instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;instance= &quot;</span> <span class="token operator">+</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OkServlet</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//简单的模拟，没有深入.</span></span>
<span class="line">        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;OkServlet&quot;</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-3-urlpattern匹配" tabindex="-1"><a class="header-anchor" href="#_2-3-urlpattern匹配"><span>2.3 urlPattern匹配</span></a></h3><p><strong>精确匹配</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/ok/zs&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 访问 servlet: localhost:8080/servlet/ok/zs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目录匹配</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/ok/*&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 访问文件: localhost:8080/servlet/ok/aaa localhost:8080/servlet/ok/bbb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩展名匹配</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;*.action&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 访问文件: localhost:8080/hsp/zs.action localhost:8080/hsp/ls.action</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>任意匹配</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 访问文件: localhost:8080/hsp/aaa localhost:8080/hsp/bbb localhost:8080/hsp/ccc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><span style="color:red;">/ 和 /*的配置，会匹配所有的请求，这个比较麻烦，要避免</span></p><h3 id="_2-4-注意事项和使用细节" tabindex="-1"><a class="header-anchor" href="#_2-4-注意事项和使用细节"><span>2.4 注意事项和使用细节</span></a></h3><ol><li>当 Servlet 配置了 <code>&quot;/&quot;</code>, 会<strong>覆盖</strong> tomcat 的 DefaultServlet, 当其他的utl-pattern<strong>都匹配不上</strong>时，都会走这个 Servlet , 这样可拦截到其它静态资源 <strong>查看</strong>：<code>tomcat/conf/web.xml</code> , 配置的 DefaultServlet，<span style="color:red;">这个默认的 servlet 是处理静态资源的，一旦拦截，静态资源不能处理</span></li><li>当 Servelt 配置了 <code>&quot;/*&quot;</code>, 表示可以匹配任意访问路径</li><li>建议不要使用 / 和 /* , 建议尽量使用精确匹配</li><li>优先级遵守: <code>精确路径 &gt; 目录路径 &gt; 扩展名路径 &gt; /* &gt; /</code></li></ol><h2 id="_3-http" tabindex="-1"><a class="header-anchor" href="#_3-http"><span>3. HTTP</span></a></h2><p>超文本传输协议 (HTTP，HyperText Transfer Protocol) 是互联网上应用广泛的一种网络协议。是工作在 tcp/ip 协议基础上的 , 所有的 WWW 文件都遵守这个标准。</p><ul><li>http1.0 短连接 http1.1 长连接</li><li>http 是 TCP/IP 协议的一个应用层协议 , http 也是我们 web 开发的基础</li><li>当访问 test.html 页面时, 问浏览器发出几次 http 请求? <ul><li>第一次请求的 test.html</li><li>当浏览器解析发现 test.html 中有 img 等</li><li>会向服务器继续发请求</li></ul></li></ul><h3 id="_3-1-基本分析" tabindex="-1"><a class="header-anchor" href="#_3-1-基本分析"><span>3.1 基本分析</span></a></h3><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><a href="./img/HTTP%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4-%E8%AF%B4%E6%98%8E.pdf">常见请求和响应头-说明.pdf</a></p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-get与post" tabindex="-1"><a class="header-anchor" href="#_3-2-get与post"><span>3.2 GET与POST</span></a></h3><ul><li><p><strong>GET：请求行、请求头</strong></p><ol><li>form 标签 method=get</li><li>a 标签</li><li>link 标签引入 css</li><li>Script 标签引入 js 文件</li><li>img 标签引入图片</li><li>iframe 引入 html 页面</li><li>在浏览器地址栏中输入地址后敲回车</li></ol></li><li><p><strong>POST：请求行、请求头、请求体</strong></p></li></ul><ol><li>form 标签 method=post</li></ol><p><strong>区别</strong>：</p><ol><li>get 传送的数据量较小。不能大于 2KB(不同浏览器不一样)。</li><li>post 传送的数据量较大。一般默认不受限制。</li><li>post 请求是会在浏览器上隐藏參数部分的，在安全要求的部分都会使用到POST 请求。如用户登录。数据增删改等等。都会把參数隐藏起来，这样就不会通过你的请求暴露你的參数格式。</li><li>在向 server 传递数据较大的时候。使用 POST</li><li>在前台页面展示，比如分页内容等，可以保留传递参数, 可用来非常好的分享和传播, 使用GET</li><li>get 方式的安全性较 Post 方式要差些。包括机密信息的话。建议用Post 数据提交方式</li><li>在做数据查询时。建议用 Get 方式；而在做数据加入、改动或删除时，建议用Post 方式</li></ol><h3 id="_3-3-http响应" tabindex="-1"><a class="header-anchor" href="#_3-3-http响应"><span>3.3 HTTP响应</span></a></h3><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><a href="./img/HTTP%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%B4%E6%98%8E.pdf">HTTP响应状态码</a></p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>302 重定向</strong></p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T1Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//这里我们把 doGet和doPost合并处理</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//如果有一个请求来</span></span>
<span class="line">        <span class="token comment">//重定向到hi.html</span></span>
<span class="line">        <span class="token comment">//(1) 返回302状态码 (2) 响应头Location:/hi.html</span></span>
<span class="line">        <span class="token comment">//response.sendRedirect(&quot;/http/hi.html&quot;);</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>304 请求的资源未修改,不返回资源, 仍然使用缓存数据</strong></p><p>当我们请求资源的时，服务器会返回该资源的最近修改时间 <code>Last-Modified: Mon, 21 Feb 2022 04:51:31 GMT </code></p><ul><li>如果浏览器<strong>禁用缓存</strong>, 这个 Last-Modified: 信息就没有使用, 浏览器就每次要求返回该资源</li><li>如果浏览器<strong>没有禁用缓存</strong>, 浏览器在请求时，就会 <code>If-Modified-Since: Mon, 21 Feb 2022 04:51:31 GMT</code><ul><li>(1) 告诉服务器我有该资源</li><li>(2) 该资源的最近修改时间是 Mon, 21 Feb 2022 04:51:31GM</li><li>(3) 这时服务器就会比较时间，如果服务器的资源更新， 就会返回该资源, 如果发现没有修改，就返回 304 状态码(但是不会返回该资源) http 请求机制</li></ul></li></ul><p><span style="color:red;">Tomcat不用重启也能刷新页面的根本原因</span></p><h3 id="_3-4-get-请求返回数据" tabindex="-1"><a class="header-anchor" href="#_3-4-get-请求返回数据"><span>3.4 GET 请求返回数据</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;POST登录成功~~&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 服务端输出</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;LoginServlet doGet() 被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 输出一句话, 返回给浏览器</span></span>
<span class="line">        <span class="token comment">// 1. 通response 获取流 PrintWriter, 可以给浏览器回复数据</span></span>
<span class="line">        <span class="token comment">//    实际是将浏览器打来的数据被Tomcat收到后, 该流将数据封装到http响应包,通过Tomcat响应数据</span></span>
<span class="line">        <span class="token comment">// 2. 为了让浏览器显示中文，需要告诉浏览器，我们的编码是utf-8</span></span>
<span class="line">        <span class="token comment">// 解读: (1) 给会送数据设置编码 (2) text/html这个是MIME即告诉浏览器返回的数据</span></span>
<span class="line">        <span class="token comment">// 是 text类型下的html格式数据【MIME类型 大类型/小类型】(3)charset=utf-8数据编码</span></span>
<span class="line">        <span class="token comment">// 小小细节: 设置编码格式要在 response.getWriter()!!</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;GET()登录成功~~&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 为了确保数据返回，可以把 flush()和close()</span></span>
<span class="line">        <span class="token comment">// flush() 方法表示将缓存的数据进行刷新</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// close() 表示关闭流,及时释放资源,  有些语言是 close() 有 flush()</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-5-mime类型" tabindex="-1"><a class="header-anchor" href="#_3-5-mime类型"><span>3.5 MIME类型</span></a></h3><p>MIME 是 HTTP 协议中数据类型。 MIME 的英文全称是&quot;Multipurpose Internet Mail Extensions&quot; <strong>多功能 Internet 邮件扩充服务</strong>，<strong>格式</strong>是 <strong>“大类型/小类型”</strong>，并与某一种文件的扩展名相对应</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-servletconfig-类" tabindex="-1"><a class="header-anchor" href="#_4-servletconfig-类"><span>4. ServletConfig 类</span></a></h2><ol><li>ServletConfig 类是为 Servlet 程序的配置信息的类</li><li>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建</li><li>Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的ServletConfig对象</li></ol><p>作用：</p><ul><li>获取 Servlet 程序的别名 servlet-name 的值</li><li>获取初始化参数 init-param</li><li>获取 ServletContext 对象</li></ul><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 梳理ServletConfig config 使用流程</span>
<span class="line">     * 1. 当DBServlet对象初始化时, tomcat会同时创建一个 ServletConfig对象</span>
<span class="line">     * 2. 这时如果DBServlet init() 方法中你调用 super.init(config);</span>
<span class="line">     * 3. 调用 父类 GenericServlet</span>
<span class="line">     * public void init(ServletConfig config) throws ServletException <span class="token punctuation">{</span></span>
<span class="line">     * 	this.config = config;</span>
<span class="line">     * 	this.init();</span>
<span class="line">     * <span class="token punctuation">}</span></span>
<span class="line">     * 这时就会把 Tomcat创建的 ServletConfig对象赋给 GenericServlet的属性 config</span>
<span class="line">     * 4. 因此如果你重写init()方法，记住如果你想在其它方法通过 getServletConfig() 方法获取ServletConfig</span>
<span class="line">     * , 则一定要记住 调用  super.init(config);</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">config</span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span></span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//ConcurrentHashMap, 是一个线程安全的容器.</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 在DBServlet 执行 doGet()/doPost() 时，可以获取到web.xml配置的用户名和密码</span></span>
<span class="line">        <span class="token comment">// DBServlet的父类GenericServlet有getServletConfig()</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 1. getServletConfig() 方法是 GenericServlet</span>
<span class="line">         * 2. 返回的 servletConfig对象是 GenericServlet private transient ServletConfig config;</span>
<span class="line">         * 3. 当一个属性被 transient 修饰，表示该属性不会被串行化(有些重要信息，不希望保存到文件)</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token class-name">ServletConfig</span> servletConfig <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doPost=&quot;</span> <span class="token operator">+</span> servletConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> username <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化参数username= &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!--init-param 是初始化参数--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-servletcontext-类" tabindex="-1"><a class="header-anchor" href="#_5-servletcontext-类"><span>5. ServletContext 类</span></a></h2><ol><li>是一个 <strong>接口</strong>，它表示 Servlet 上下文对象</li><li>一个 web 工程，只有 <strong>一个</strong> ServletContext 对象实例</li><li>在 web 工程部署启动的时候<strong>创建</strong>，在 web 工程停止的时候<strong>销毁</strong></li><li>是一个<strong>域对象</strong>（域对象，是可以像 Map 一样存取数据的对象， 这里的域指的是存取数据的操作范围，整个 web 工程）</li><li>ServletContext 对象可以通过 <code>ServletConfig.getServletContext()</code> 方法获得，也可以通过 <code>this.getServletContext()</code>来获得</li></ol><table><thead><tr><th></th><th>存数据</th><th>取数据</th><th>删除数据</th></tr></thead><tbody><tr><td>Map</td><td>put()</td><td>get()</td><td>remove()</td></tr><tr><td>域对象</td><td>setAttribute()</td><td>getAttribute()</td><td>removeAttribute()</td></tr></tbody></table><h3 id="_5-1-存在的意义" tabindex="-1"><a class="header-anchor" href="#_5-1-存在的意义"><span>5.1 存在的意义</span></a></h3><p>先看一个需求： 如果我们希望统计某个 web 应用的所有Servlet 被访问的次数</p><p>两种方案</p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-2-作用" tabindex="-1"><a class="header-anchor" href="#_5-2-作用"><span>5.2 作用</span></a></h3><ul><li>获取 web.xml 中配置的上下文参数 context-param</li><li>获取当前的工程路径，格式: <code> /工程路径</code></li><li>获取工程部署后在服务器硬盘上的绝对路径</li><li>像 Map 一样存取数据</li></ul><h3 id="_5-3-应用" tabindex="-1"><a class="header-anchor" href="#_5-3-应用"><span>5.3 应用</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> throwsServletException<span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 1、获取 web.xml 中配置的上下文参数 context-param</span></span>
<span class="line">	<span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">String</span> username <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 2、获取当前的工程路径，格式: /工程路径</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;当前工程路径:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">	<span class="token comment">// 3、获取工程部署后在服务器硬盘上的绝对路径</span></span>
<span class="line">    <span class="token comment">//    表示项目发布后的根路径 ..out...</span></span>
<span class="line">    <span class="token comment">// 拿到http://ip.port/工程名</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工程部署的路径是:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 4、像 Map 一样存取数据</span></span>
<span class="line">	context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;获取域数据 key1 的值是:&quot;</span><span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!--context-param 是上下文参数(它属于整个 web 工程)--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebUtils</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//这个方法就是对访问的次数累积，同时返回次数</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">visitCount</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//从servletContext获取 visit_count 属性 k-v</span></span>
<span class="line">        <span class="token class-name">Object</span> visit_count <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;visit_count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//判断visit_count是否为null</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>visit_count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//说明是第1次访问网站</span></span>
<span class="line">            servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;visit_count&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            visit_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//是第二次或以后</span></span>
<span class="line">            <span class="token comment">//取出visit_count属性的值+1</span></span>
<span class="line">            visit_count <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>visit_count <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//放回到servletContext</span></span>
<span class="line">            servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;visit_count&quot;</span><span class="token punctuation">,</span> visit_count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>visit_count <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取到ServletContext对象</span></span>
<span class="line">        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Integer</span> visit_count <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">visitCount</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//输出显示</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;新网站被访问的次数是&quot;</span> <span class="token operator">+</span> visit_count <span class="token operator">+</span> <span class="token string">&quot;&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_6-httpservletrequest-类" tabindex="-1"><a class="header-anchor" href="#_6-httpservletrequest-类"><span>6. HttpServletRequest 类</span></a></h2><p>每次只要有请求进入 Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息解析好封装到Request 对象中。然后传递到 service 方法（doGet 和 doPost）中给我们使用。我们可以通过 HttpServletRequest 对象，获取到所有请求的信息。</p><ol><li>HttpServletRequest 对象代表客户端的请求</li><li>当客户端/浏览器通过 HTTP 协议访问服务器时，HTTP 请求头中的所有信息都封装在这个对象中</li><li>通过这个对象的方法，可以获得客户端这些信息。</li><li>是一个域对象</li></ol><h3 id="_6-1-常用方法" tabindex="-1"><a class="header-anchor" href="#_6-1-常用方法"><span>6.1 常用方法</span></a></h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getRequestURI()</td><td>获取请求的资源路径（<code>/工程名/路径</code>）</td></tr><tr><td>getRequestURL()</td><td>获取请求的统一资源定位符（<code>http://localhost:8080/工程名/路径</code>）</td></tr><tr><td>getRemoteHost()</td><td>获取客户端的主机</td></tr><tr><td>getRemoteAddr()</td><td>获取客户端的 IP地址</td></tr><tr><td>getHeader(&quot;请求头字段&quot;)</td><td>获取请求头</td></tr><tr><td>getParameter()</td><td>获取请求的参数</td></tr><tr><td>getParameterValues()</td><td>获取请求的参数（多个值的时候使用）</td></tr><tr><td>getMethod()</td><td>获取请求的方式 GET 或 POST</td></tr><tr><td>setAttribute(key, value);</td><td>设置域数据</td></tr><tr><td>getAttribute(key);</td><td>获取域数据</td></tr><tr><td>getRequestDispatcher()</td><td>获取请求转发对象（&quot;/路径&quot;）</td></tr></tbody></table><h3 id="_6-2-解决中文乱码" tabindex="-1"><a class="header-anchor" href="#_6-2-解决中文乱码"><span>6.2 解决中文乱码</span></a></h3><ul><li><p>doGet</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 获取请求参数</span></span>
<span class="line"><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 先以 iso8859-1 进行编码</span></span>
<span class="line"><span class="token comment">// 再以 utf-8 进行解码</span></span>
<span class="line">username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;iso-8859-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>doPost</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 设置请求体的字符集为 UTF-8，从而解决 post 请求的中文乱码问题</span></span>
<span class="line">req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取请求内容必须在setCharacterEncoding后面</span></span>
<span class="line"><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6-3-请求转发" tabindex="-1"><a class="header-anchor" href="#_6-3-请求转发"><span>6.3 请求转发</span></a></h3><p>服务器收到请求后，从一次资源跳转到另一个资源的操作叫请求转发</p><p>特点：</p><ul><li>浏览器地址栏不变</li><li>一次请求</li><li>共享Request数据</li><li>可以转发到WEB-INF下</li><li>不可访问工程外的资源</li></ul><p><mark>Servlet1</mark></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 获取请求的参数</span></span>
<span class="line">	<span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 传递到Servlet2查看</span></span>
<span class="line">	req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;柜台 1 的章&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/servlet2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><mark>Servlet2</mark></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> 	<span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 获取请求的参数</span></span>
<span class="line">	<span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 查看</span></span>
<span class="line">	<span class="token class-name">Object</span> key1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 处理自己的业务</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_6-4-斜杠在web不同含义" tabindex="-1"><a class="header-anchor" href="#_6-4-斜杠在web不同含义"><span>6.4 斜杠在Web不同含义</span></a></h3><blockquote><p>在 web 中 / 斜杠 是一种绝对路径</p><ul><li><p>被浏览器解析，得到的地址是：http://ip:port/</p></li><li><p>被服务器解析，得到的地址是：http://ip:port/工程路径</p><p>特殊情况： response.sendRediect(“/”); 把斜杠发送给浏览器解析。得到http://ip:port/</p></li></ul></blockquote><h2 id="_7-httpservletresponse-类" tabindex="-1"><a class="header-anchor" href="#_7-httpservletresponse-类"><span>7. HttpServletResponse 类</span></a></h2><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个Response对象传递给 Servlet 程序去使用。HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置</p><table><thead><tr><th>字节流</th><th>getOutputStream();</th><th>常用于下载（传递二进制数据）</th></tr></thead><tbody><tr><td>字符流</td><td>getWriter();</td><td>常用于回传字符串（常用）</td></tr></tbody></table><ul><li>两个流同时只能使用一个。</li></ul><h3 id="_7-1-往客户端回传数据" tabindex="-1"><a class="header-anchor" href="#_7-1-往客户端回传数据"><span>7.1 往客户端回传数据</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 要求 ： 往客户端回传 字符串 数据。</span></span>
<span class="line">	<span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;response&#39;s content!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-响应乱码解决" tabindex="-1"><a class="header-anchor" href="#_7-2-响应乱码解决"><span>7.2 响应乱码解决</span></a></h3><p>两种方案</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 设置服务器字符集为 UTF-8</span></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集</span></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html; charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头</span></span>
<span class="line"><span class="token comment">// 此方法一定要在获取流对象之前调用才有效</span></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html; charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-请求重定向" tabindex="-1"><a class="header-anchor" href="#_7-3-请求重定向"><span>7.3 请求重定向</span></a></h3><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）</p><p>特点：</p><ul><li>浏览器地址栏会变</li><li>两次请求</li><li>不共享Request数据</li><li>不能访问WEB-INF下资源</li><li>可访问工程外的资源</li></ul><p>两种方案</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 设置响应状态码 302 ，表示重定向，（已搬迁）</span></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 设置响应头，说明 新的地址在哪里</span></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自动化设置</span></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>所有通过 Java 语言编写可以通过浏览器访问的程序的总称 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>Servlet、Filter、Listener <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,130)]))}const q=n(b,[["render",g],["__file","Servlet.html.vue"]]),y=JSON.parse('{"path":"/codenotes/back/javaweb/Servlet.html","title":"Servlet","lang":"zh-CN","frontmatter":{"title":"Servlet","author":[{"name":"Ahzy"}],"category":["计算机"],"tag":["javaweb"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"headerDepth":2,"date":"2024-10-07T00:00:00.000Z","description":"1. Selvet基础 JavaEE 规范之一，规范就是接口 JavaWeb[1] 三大组件[2]之一 运行在服务器上的一个 java 小程序（由Tomcat解析和执行），可以接收请求响应数据 由java编写，本质是一个java类 servlet3.0 前使用 web.xml , servlet3.0 版本以后(包括 3.0)支持注解，同时支持web....","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javaweb/Servlet.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"Servlet"}],["meta",{"property":"og:description","content":"1. Selvet基础 JavaEE 规范之一，规范就是接口 JavaWeb[1] 三大组件[2]之一 运行在服务器上的一个 java 小程序（由Tomcat解析和执行），可以接收请求响应数据 由java编写，本质是一个java类 servlet3.0 前使用 web.xml , servlet3.0 版本以后(包括 3.0)支持注解，同时支持web...."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/image-20241002204224295.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Ahzy"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:published_time","content":"2024-10-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Servlet\\",\\"description\\":\\"1. Selvet基础 JavaEE 规范之一，规范就是接口 JavaWeb[1] 三大组件[2]之一 运行在服务器上的一个 java 小程序（由Tomcat解析和执行），可以接收请求响应数据 由java编写，本质是一个java类 servlet3.0 前使用 web.xml , servlet3.0 版本以后(包括 3.0)支持注解，同时支持web....\\"}"]]},"headers":[{"level":2,"title":"1. Selvet基础","slug":"_1-selvet基础","link":"#_1-selvet基础","children":[{"level":3,"title":"1.1 快速入门","slug":"_1-1-快速入门","link":"#_1-1-快速入门","children":[]},{"level":3,"title":"1.2 浏览器请求Servlet UML分析","slug":"_1-2-浏览器请求servlet-uml分析","link":"#_1-2-浏览器请求servlet-uml分析","children":[]},{"level":3,"title":"1.3 生命周期","slug":"_1-3-生命周期","link":"#_1-3-生命周期","children":[]},{"level":3,"title":"1.4 请求分发处理","slug":"_1-4-请求分发处理","link":"#_1-4-请求分发处理","children":[]},{"level":3,"title":"1.5 HttpServlet","slug":"_1-5-httpservlet","link":"#_1-5-httpservlet","children":[]},{"level":3,"title":"1.6 小节","slug":"_1-6-小节","link":"#_1-6-小节","children":[]}]},{"level":2,"title":"2. 注解方式","slug":"_2-注解方式","link":"#_2-注解方式","children":[{"level":3,"title":"2.1 快速入门","slug":"_2-1-快速入门","link":"#_2-1-快速入门","children":[]},{"level":3,"title":"2.2 模拟Tomcat通过注解装载Servlet","slug":"_2-2-模拟tomcat通过注解装载servlet","link":"#_2-2-模拟tomcat通过注解装载servlet","children":[]},{"level":3,"title":"2.3 urlPattern匹配","slug":"_2-3-urlpattern匹配","link":"#_2-3-urlpattern匹配","children":[]},{"level":3,"title":"2.4 注意事项和使用细节","slug":"_2-4-注意事项和使用细节","link":"#_2-4-注意事项和使用细节","children":[]}]},{"level":2,"title":"3. HTTP","slug":"_3-http","link":"#_3-http","children":[{"level":3,"title":"3.1 基本分析","slug":"_3-1-基本分析","link":"#_3-1-基本分析","children":[]},{"level":3,"title":"3.2 GET与POST","slug":"_3-2-get与post","link":"#_3-2-get与post","children":[]},{"level":3,"title":"3.3 HTTP响应","slug":"_3-3-http响应","link":"#_3-3-http响应","children":[]},{"level":3,"title":"3.4 GET 请求返回数据","slug":"_3-4-get-请求返回数据","link":"#_3-4-get-请求返回数据","children":[]},{"level":3,"title":"3.5 MIME类型","slug":"_3-5-mime类型","link":"#_3-5-mime类型","children":[]}]},{"level":2,"title":"4. ServletConfig 类","slug":"_4-servletconfig-类","link":"#_4-servletconfig-类","children":[]},{"level":2,"title":"5. ServletContext 类","slug":"_5-servletcontext-类","link":"#_5-servletcontext-类","children":[{"level":3,"title":"5.1 存在的意义","slug":"_5-1-存在的意义","link":"#_5-1-存在的意义","children":[]},{"level":3,"title":"5.2 作用","slug":"_5-2-作用","link":"#_5-2-作用","children":[]},{"level":3,"title":"5.3 应用","slug":"_5-3-应用","link":"#_5-3-应用","children":[]}]},{"level":2,"title":"6. HttpServletRequest 类","slug":"_6-httpservletrequest-类","link":"#_6-httpservletrequest-类","children":[{"level":3,"title":"6.1 常用方法","slug":"_6-1-常用方法","link":"#_6-1-常用方法","children":[]},{"level":3,"title":"6.2 解决中文乱码","slug":"_6-2-解决中文乱码","link":"#_6-2-解决中文乱码","children":[]},{"level":3,"title":"6.3 请求转发","slug":"_6-3-请求转发","link":"#_6-3-请求转发","children":[]},{"level":3,"title":"6.4 斜杠在Web不同含义","slug":"_6-4-斜杠在web不同含义","link":"#_6-4-斜杠在web不同含义","children":[]}]},{"level":2,"title":"7. HttpServletResponse 类","slug":"_7-httpservletresponse-类","link":"#_7-httpservletresponse-类","children":[{"level":3,"title":"7.1 往客户端回传数据","slug":"_7-1-往客户端回传数据","link":"#_7-1-往客户端回传数据","children":[]},{"level":3,"title":"7.2 响应乱码解决","slug":"_7-2-响应乱码解决","link":"#_7-2-响应乱码解决","children":[]},{"level":3,"title":"7.3 请求重定向","slug":"_7-3-请求重定向","link":"#_7-3-请求重定向","children":[]}]}],"git":{},"readingTime":{"minutes":20.05,"words":6015},"filePathRelative":"codenotes/back/javaweb/Servlet.md","localizedDate":"2024年10月7日","excerpt":"<h2>1. Selvet基础</h2>\\n<blockquote>\\n<ol>\\n<li>JavaEE 规范之一，规范就是接口</li>\\n<li>JavaWeb<sup class=\\"footnote-ref\\"><a href=\\"#footnote1\\">[1]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"></a></sup><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"> 三大组件<sup class=\\"footnote-ref\\"></sup></a><a href=\\"#footnote2\\">[2]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref2\\">之一</a></li><a class=\\"footnote-anchor\\" id=\\"footnote-ref2\\">\\n<li>运行在服务器上的一个 java 小程序（由Tomcat解析和执行），可以接收请求响应数据</li>\\n<li>由java编写，本质是一个java类</li>\\n<li>servlet3.0 前使用 web.xml , servlet3.0 版本以后(包括 3.0)支持注解，同时支持web.xml 配置</li>\\n</a></ol><a class=\\"footnote-anchor\\" id=\\"footnote-ref2\\">\\n</a></blockquote>","autoDesc":true}');export{q as comp,y as data};
