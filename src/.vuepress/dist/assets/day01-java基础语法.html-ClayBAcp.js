import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as l,o as n}from"./app-eWV4nnR8.js";const i="/assets/15557854820208960-CONrSEz0.png",s={};function p(r,a){return n(),t("div",null,a[0]||(a[0]=[l('<div style="text-align:left;"><p> <img src="'+i+`" alt="" width="800" height="280" loading="lazy"></p></div><div style="text-align:right;"><p><strong>如果一艘船不知道该驶去哪个港口，那么任何方向吹来的风都不会是顺风。</strong></p></div><h2 id="_1-人机交互" tabindex="-1"><a class="header-anchor" href="#_1-人机交互"><span>1. 人机交互</span></a></h2><h3 id="_1-1-什么是cmd" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是cmd"><span>1.1 什么是cmd？</span></a></h3><p>在windows操作系统中，利用命令行的方式去操作计算机。</p><p>我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。</p><h3 id="_1-2-如何打开cmd窗口" tabindex="-1"><a class="header-anchor" href="#_1-2-如何打开cmd窗口"><span>1.2 如何打开CMD窗口？</span></a></h3><ol><li><p>按下快捷键：win + R。</p></li><li><p>在运行窗口中输出cmd</p></li><li><p>输出回车。</p></li></ol><p>解惑：<br> cmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名）</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/cmd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-3-常用cmd命令" tabindex="-1"><a class="header-anchor" href="#_1-3-常用cmd命令"><span>1.3 常用CMD命令</span></a></h3><p>扩展一个小点：</p><p>​ 在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。</p><p>​ 而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。</p><p>常见的CMD命令如下：</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\\目录2...</td><td>进入多级目录。cd itheima\\JavaSE</td></tr><tr><td>cd \\</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><p><span style="color:red;">在windows操作系统当中，文件名或者文件夹名是忽略大小写的。</span></p><h3 id="_1-4-环境变量" tabindex="-1"><a class="header-anchor" href="#_1-4-环境变量"><span>1.4 环境变量</span></a></h3><p>作用：</p><p>​ 如果我想要在CMD的任意目录下，都可以启动某一个软件，那么就可以把这个软件的路径配置到环境变量中的PATH里面。</p><p>​ 在启动软件的时候，操作系统会先在当前路径下找，如果在当前录课没有再到环境变量的路径中去找。如果都找不到就提示无法启动。</p><p>步骤：</p><ul><li>右键我的电脑，选择属性。</li><li>点击左侧的高级系统设置</li><li>选择高级，再点击下面的环境变量。</li><li>找系统变量里面的PATH</li><li>把软件的完整路径，配置到PATH当中就可以了。</li><li>（可做可不做）就是把自己配置的路径，移动到最上面。</li></ul><p>图解示例如下：</p><p>第一步：右键点击我的电脑并选择属性。</p><p>（如果无法出现第二步界面，可以打开我的电脑之后右键点击空白处）</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第二步：点击高级系统设置。</p><p>​ <img src="https://gitee.com/private_crh/notes/raw/master/typora/2.png" alt="" loading="lazy"></p><p>第三步：选择高级，再点击下面的环境变量。</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第四步：找系统变量里面的PATH</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第五步：点击新建，把软件的完整路径，配置到PATH当中，再点击确定即可。</p><p>第六步：（可做可不做）点击上移，把当前配置的路径移动到最上面。</p><p>移动的好处：在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上面查找的速度比较快。</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-java概述" tabindex="-1"><a class="header-anchor" href="#_2-java概述"><span>2. Java概述</span></a></h2><h3 id="_2-1-java是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-java是什么"><span>2.1 Java是什么？</span></a></h3><p>语言：人与人交流沟通的表达方式</p><p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p><p>Java是一门非常火的计算机语言。（也叫做编程语言）</p><h3 id="_2-2-下载和安装" tabindex="-1"><a class="header-anchor" href="#_2-2-下载和安装"><span>2.2 下载和安装</span></a></h3><h4 id="_2-2-1-下载" tabindex="-1"><a class="header-anchor" href="#_2-2-1-下载"><span>2.2.1 下载</span></a></h4><p>通过官方网站获取JDK</p><p><a href="http://www.oracle.com/" target="_blank" rel="noopener noreferrer">http://www.oracle.com</a></p><p><strong>注意1</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p><p><strong>注意2</strong>：</p><p>​ 如果你的电脑是windows32位的，建议重装系统，重装成64位的操作系统。</p><p>​ 因为Java从9版本开始，就已经不提供32位版本的安装包了。</p><p>​ 如果自己不愿意下载，到今天day01资料文件中，也有对应的安装包。</p><h4 id="_2-2-2-安装" tabindex="-1"><a class="header-anchor" href="#_2-2-2-安装"><span>2.2.2 安装</span></a></h4><p>​ 傻瓜式安装，下一步即可。默认的安装路径是在C:\\Program Files下。</p><p>建议：</p><ul><li>安装路径不要有中文，不要有空格等一些特殊的符号。</li><li>以后跟开发相关的所有软件建议都安装在同一个文件夹中，方便管理。</li></ul><h4 id="_2-2-3-jdk的安装目录介绍" tabindex="-1"><a class="header-anchor" href="#_2-2-3-jdk的安装目录介绍"><span>2.2.3 JDK的安装目录介绍</span></a></h4><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h3 id="_2-3-helloworld小案例" tabindex="-1"><a class="header-anchor" href="#_2-3-helloworld小案例"><span>2.3 HelloWorld小案例</span></a></h3><p>​ HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="_2-3-1-java程序开发运行流程" tabindex="-1"><a class="header-anchor" href="#_2-3-1-java程序开发运行流程"><span>2.3.1 Java程序开发运行流程</span></a></h4><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。</p><h4 id="_2-3-2-helloworld案例的编写" tabindex="-1"><a class="header-anchor" href="#_2-3-2-helloworld案例的编写"><span>2.3.2 HelloWorld案例的编写</span></a></h4><ol><li>新建文本文档文件，修改名称为HelloWorld.java。</li></ol><p><strong>注意</strong>：后缀名为java的才是java文件。</p><ol start="2"><li>用记事本打开HelloWorld.java文件，输写程序内容。</li></ol><p><strong>注意</strong>：代码要跟我编写的完全保持一致。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>保存</li></ol><p><strong>注意</strong>：未保存的文件在左上角会有*符号标记</p><ol start="4"><li><p>编译文件。编译后会产生一个class文件。</p><p>java文件：程序员自己编写的代码。</p><p>class文件：交给计算机执行的文件。</p></li><li><p>运行代码</p><p><strong>注意</strong>：运行的是编译之后的class文件。</p></li></ol><blockquote><p>用到两个命令：</p><p>​ javac + 文件名 + 后缀名 （就是编译java文件）</p><p>​ java + 文件名（运行编译之后的class文件）</p></blockquote><h3 id="_2-4-helloworld案例常见问题" tabindex="-1"><a class="header-anchor" href="#_2-4-helloworld案例常见问题"><span>2.4 HelloWorld案例常见问题</span></a></h3><h4 id="_2-4-1-bug" tabindex="-1"><a class="header-anchor" href="#_2-4-1-bug"><span>2.4.1 BUG</span></a></h4><p>​ 在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p><h4 id="_2-4-2-bug的解决" tabindex="-1"><a class="header-anchor" href="#_2-4-2-bug的解决"><span>2.4.2 BUG的解决</span></a></h4><ol><li>具备识别BUG的能力：多看</li><li>具备分析BUG的能力：多思考，多查资料</li><li>具备解决BUG的能力：多尝试，多总结</li></ol><h4 id="_2-4-3-helloworld常见问题" tabindex="-1"><a class="header-anchor" href="#_2-4-3-helloworld常见问题"><span>2.4.3 HelloWorld常见问题</span></a></h4><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀.class</p><p>...</p><h3 id="_2-5-环境变量" tabindex="-1"><a class="header-anchor" href="#_2-5-环境变量"><span>2.5 环境变量</span></a></h3><h4 id="_2-5-1-为什么配置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-5-1-为什么配置环境变量"><span>2.5.1 为什么配置环境变量</span></a></h4><p>​ 开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。</p><p>注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。</p><h4 id="_2-5-2-配置方式" tabindex="-1"><a class="header-anchor" href="#_2-5-2-配置方式"><span>2.5.2 配置方式</span></a></h4><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20210923091654365.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。</p><p>①<strong>JAVA_HOME</strong>：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20210923091710450.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>②<strong>Path</strong>：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20210923091721035.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-5-3-win10的bug" tabindex="-1"><a class="header-anchor" href="#_2-5-3-win10的bug"><span>2.5.3 win10的bug</span></a></h4><p>当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。</p><p>步骤：</p><ul><li><p>还是要配置JAVA_HOME给以后的相关软件去使用</p></li><li><p>我们可以把java和javac的完整路径配置到PATH当中。</p><p>E:\\develop\\JDK\\bin</p></li></ul><h3 id="_2-6-java语言的发展" tabindex="-1"><a class="header-anchor" href="#_2-6-java语言的发展"><span>2.6 Java语言的发展</span></a></h3><p>三个版本：</p><ul><li>Java5.0：这是Java的第一个大版本更新。</li><li>Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。</li><li>Java15.0：这个是我们课程中学习的版本。</li></ul><p>解惑：</p><p>​ 我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？</p><p>向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。</p><p>举例：</p><p>用8版本开发的代码，用11版本能运行吗？必须可以的。</p><p>用11版本开发的代码，用8版本能运行吗？不一定。</p><p>如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。</p><p>如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。</p><h3 id="_2-7-java的三大平台" tabindex="-1"><a class="header-anchor" href="#_2-7-java的三大平台"><span>2.7 Java的三大平台</span></a></h3><p>​ JavaSE、JavaME、JavaEE</p><h4 id="_2-7-1-javase" tabindex="-1"><a class="header-anchor" href="#_2-7-1-javase"><span>2.7.1 JavaSE</span></a></h4><p>​ 是其他两个版本的基础。</p><h4 id="_2-7-2-javame" tabindex="-1"><a class="header-anchor" href="#_2-7-2-javame"><span>2.7.2 JavaME</span></a></h4><p>​ Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p><p>​ 其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p><p>​ 但是，安卓也是可以用Java来开发的。</p><h4 id="_2-7-3-javaee" tabindex="-1"><a class="header-anchor" href="#_2-7-3-javaee"><span>2.7.3 JavaEE</span></a></h4><p>​ 用于Web方向的网站开发。（主要从事后台服务器的开发）</p><p>​ 在服务器领域，Java是当之无愧的龙头老大。</p><h3 id="_2-8-java的主要特性" tabindex="-1"><a class="header-anchor" href="#_2-8-java的主要特性"><span>2.8 Java的主要特性</span></a></h3><ul><li>面向对象</li><li>安全性</li><li>多线程</li><li>简单易用</li><li>开源</li><li>跨平台</li></ul><h4 id="_2-8-1-java语言跨平台的原理" tabindex="-1"><a class="header-anchor" href="#_2-8-1-java语言跨平台的原理"><span>2.8.1 Java语言跨平台的原理</span></a></h4><ul><li>操作系统本身其实是不认识Java语言的。</li><li>但是针对于不同的操作系统，Java提供了不同的虚拟机。</li></ul><p>虚拟机会把Java语言翻译成操作系统能看得懂的语言。</p><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20210923091350952.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-9-jre和jdk" tabindex="-1"><a class="header-anchor" href="#_2-9-jre和jdk"><span>2.9 JRE和JDK</span></a></h3><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/image-20210923091544110.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JVM（Java Virtual Machine），Java虚拟机</p><p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p>`,132)]))}const c=e(s,[["render",p],["__file","day01-java基础语法.html.vue"]]),h=JSON.parse('{"path":"/codenotes/back/javacore/javabasic/day01-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","title":"Java基础语法Ⅰ","lang":"zh-CN","frontmatter":{"title":"Java基础语法Ⅰ","author":"黑马_阿玮","category":["计算机"],"tag":["java"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-11-06T00:00:00.000Z","headerDepth":2,"description":"如果一艘船不知道该驶去哪个港口，那么任何方向吹来的风都不会是顺风。 1. 人机交互 1.1 什么是cmd？ 在windows操作系统中，利用命令行的方式去操作计算机。 我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。 1.2 如何打开CMD窗口？ 按下快捷键：win + R。 在运行窗口中输出cmd 输出回车。 解惑： c...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javacore/javabasic/day01-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"Java基础语法Ⅰ"}],["meta",{"property":"og:description","content":"如果一艘船不知道该驶去哪个港口，那么任何方向吹来的风都不会是顺风。 1. 人机交互 1.1 什么是cmd？ 在windows操作系统中，利用命令行的方式去操作计算机。 我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。 1.2 如何打开CMD窗口？ 按下快捷键：win + R。 在运行窗口中输出cmd 输出回车。 解惑： c..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/cmd.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"黑马_阿玮"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-11-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java基础语法Ⅰ\\",\\"description\\":\\"如果一艘船不知道该驶去哪个港口，那么任何方向吹来的风都不会是顺风。 1. 人机交互 1.1 什么是cmd？ 在windows操作系统中，利用命令行的方式去操作计算机。 我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。 1.2 如何打开CMD窗口？ 按下快捷键：win + R。 在运行窗口中输出cmd 输出回车。 解惑： c...\\"}"]]},"headers":[{"level":2,"title":"1. 人机交互","slug":"_1-人机交互","link":"#_1-人机交互","children":[{"level":3,"title":"1.1 什么是cmd？","slug":"_1-1-什么是cmd","link":"#_1-1-什么是cmd","children":[]},{"level":3,"title":"1.2 如何打开CMD窗口？","slug":"_1-2-如何打开cmd窗口","link":"#_1-2-如何打开cmd窗口","children":[]},{"level":3,"title":"1.3 常用CMD命令","slug":"_1-3-常用cmd命令","link":"#_1-3-常用cmd命令","children":[]},{"level":3,"title":"1.4 环境变量","slug":"_1-4-环境变量","link":"#_1-4-环境变量","children":[]}]},{"level":2,"title":"2. Java概述","slug":"_2-java概述","link":"#_2-java概述","children":[{"level":3,"title":"2.1 Java是什么？","slug":"_2-1-java是什么","link":"#_2-1-java是什么","children":[]},{"level":3,"title":"2.2 下载和安装","slug":"_2-2-下载和安装","link":"#_2-2-下载和安装","children":[{"level":4,"title":"2.2.1 下载","slug":"_2-2-1-下载","link":"#_2-2-1-下载","children":[]},{"level":4,"title":"2.2.2 安装","slug":"_2-2-2-安装","link":"#_2-2-2-安装","children":[]},{"level":4,"title":"2.2.3 JDK的安装目录介绍","slug":"_2-2-3-jdk的安装目录介绍","link":"#_2-2-3-jdk的安装目录介绍","children":[]}]},{"level":3,"title":"2.3 HelloWorld小案例","slug":"_2-3-helloworld小案例","link":"#_2-3-helloworld小案例","children":[{"level":4,"title":"2.3.1 Java程序开发运行流程","slug":"_2-3-1-java程序开发运行流程","link":"#_2-3-1-java程序开发运行流程","children":[]},{"level":4,"title":"2.3.2 HelloWorld案例的编写","slug":"_2-3-2-helloworld案例的编写","link":"#_2-3-2-helloworld案例的编写","children":[]}]},{"level":3,"title":"2.4 HelloWorld案例常见问题","slug":"_2-4-helloworld案例常见问题","link":"#_2-4-helloworld案例常见问题","children":[{"level":4,"title":"2.4.1 BUG","slug":"_2-4-1-bug","link":"#_2-4-1-bug","children":[]},{"level":4,"title":"2.4.2 BUG的解决","slug":"_2-4-2-bug的解决","link":"#_2-4-2-bug的解决","children":[]},{"level":4,"title":"2.4.3 HelloWorld常见问题","slug":"_2-4-3-helloworld常见问题","link":"#_2-4-3-helloworld常见问题","children":[]}]},{"level":3,"title":"2.5 环境变量","slug":"_2-5-环境变量","link":"#_2-5-环境变量","children":[{"level":4,"title":"2.5.1 为什么配置环境变量","slug":"_2-5-1-为什么配置环境变量","link":"#_2-5-1-为什么配置环境变量","children":[]},{"level":4,"title":"2.5.2 配置方式","slug":"_2-5-2-配置方式","link":"#_2-5-2-配置方式","children":[]},{"level":4,"title":"2.5.3 win10的bug","slug":"_2-5-3-win10的bug","link":"#_2-5-3-win10的bug","children":[]}]},{"level":3,"title":"2.6 Java语言的发展","slug":"_2-6-java语言的发展","link":"#_2-6-java语言的发展","children":[]},{"level":3,"title":"2.7 Java的三大平台","slug":"_2-7-java的三大平台","link":"#_2-7-java的三大平台","children":[{"level":4,"title":"2.7.1 JavaSE","slug":"_2-7-1-javase","link":"#_2-7-1-javase","children":[]},{"level":4,"title":"2.7.2 JavaME","slug":"_2-7-2-javame","link":"#_2-7-2-javame","children":[]},{"level":4,"title":"2.7.3 JavaEE","slug":"_2-7-3-javaee","link":"#_2-7-3-javaee","children":[]}]},{"level":3,"title":"2.8 Java的主要特性","slug":"_2-8-java的主要特性","link":"#_2-8-java的主要特性","children":[{"level":4,"title":"2.8.1 Java语言跨平台的原理","slug":"_2-8-1-java语言跨平台的原理","link":"#_2-8-1-java语言跨平台的原理","children":[]}]},{"level":3,"title":"2.9 JRE和JDK","slug":"_2-9-jre和jdk","link":"#_2-9-jre和jdk","children":[]}]}],"git":{},"readingTime":{"minutes":9.16,"words":2748},"filePathRelative":"codenotes/back/javacore/javabasic/day01-java基础语法.md","localizedDate":"2024年11月6日","excerpt":"<div style=\\"text-align:left\\">\\n<p>&nbsp;</p>\\n</div>\\n<div style=\\"text-align:right\\">\\n<p><strong>如果一艘船不知道该驶去哪个港口，那么任何方向吹来的风都不会是顺风。</strong></p>\\n</div>\\n<h2>1. 人机交互</h2>\\n<h3>1.1 什么是cmd？</h3>\\n<p>在windows操作系统中，利用命令行的方式去操作计算机。</p>\\n<p>我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。</p>\\n<h3>1.2 如何打开CMD窗口？</h3>\\n<ol>\\n<li>\\n<p>按下快捷键：win + R。</p>\\n</li>\\n<li>\\n<p>在运行窗口中输出cmd</p>\\n</li>\\n<li>\\n<p>输出回车。</p>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,h as data};
