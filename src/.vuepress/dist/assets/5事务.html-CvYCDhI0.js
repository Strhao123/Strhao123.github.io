import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-eWV4nnR8.js";const p={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<br><h2 id="_1-事务分类" tabindex="-1"><a class="header-anchor" href="#_1-事务分类"><span>1. 事务分类</span></a></h2><h3 id="_1-1-编程式事务" tabindex="-1"><a class="header-anchor" href="#_1-1-编程式事务"><span>1.1 编程式事务</span></a></h3><p>传统方式</p><p>缺点：代码冗余，效率低，不利于扩展</p><p>优点：简单，好理解</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//1. 先设置事务不要自动提交</span></span>
<span class="line">	connection<span class="token punctuation">.</span><span class="token function">setAutoCommint</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//2. 进行各种 crud</span></span>
<span class="line">	<span class="token comment">//多个表的修改，添加 ，删除</span></span>
<span class="line">	<span class="token comment">//3. 提交</span></span>
<span class="line">	connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//4. 回滚</span></span>
<span class="line">	conection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-2-声明式事务" tabindex="-1"><a class="header-anchor" href="#_1-2-声明式事务"><span>1.2 声明式事务</span></a></h3><h4 id="_1-2-1-例子" tabindex="-1"><a class="header-anchor" href="#_1-2-1-例子"><span>1.2.1 例子</span></a></h4>`,9)]))}const u=s(p,[["render",c],["__file","5事务.html.vue"]]),r=JSON.parse('{"path":"/codenotes/back/spring/spring/5%E4%BA%8B%E5%8A%A1.html","title":"事务","lang":"zh-CN","frontmatter":{"title":"事务","category":["计算机"],"tag":["Spring"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-11-07T00:00:00.000Z","headerDepth":2,"description":"1. 事务分类 1.1 编程式事务 传统方式 缺点：代码冗余，效率低，不利于扩展 优点：简单，好理解 1.2 声明式事务 1.2.1 例子","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/spring/spring/5%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:description","content":"1. 事务分类 1.1 编程式事务 传统方式 缺点：代码冗余，效率低，不利于扩展 优点：简单，好理解 1.2 声明式事务 1.2.1 例子"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-11-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"事务\\",\\"description\\":\\"1. 事务分类 1.1 编程式事务 传统方式 缺点：代码冗余，效率低，不利于扩展 优点：简单，好理解 1.2 声明式事务 1.2.1 例子\\"}"]]},"headers":[{"level":2,"title":"1. 事务分类","slug":"_1-事务分类","link":"#_1-事务分类","children":[{"level":3,"title":"1.1 编程式事务","slug":"_1-1-编程式事务","link":"#_1-1-编程式事务","children":[]},{"level":3,"title":"1.2 声明式事务","slug":"_1-2-声明式事务","link":"#_1-2-声明式事务","children":[{"level":4,"title":"1.2.1 例子","slug":"_1-2-1-例子","link":"#_1-2-1-例子","children":[]}]}]}],"git":{},"readingTime":{"minutes":0.62,"words":185},"filePathRelative":"codenotes/back/spring/spring/5事务.md","localizedDate":"2024年11月7日","excerpt":"<br>\\n<h2>1. 事务分类</h2>\\n<h3>1.1 编程式事务</h3>\\n<p>传统方式</p>\\n<p>缺点：代码冗余，效率低，不利于扩展</p>\\n<p>优点：简单，好理解</p>\\n<div class=\\"language-java line-numbers-mode has-collapsed-lines collapsed\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--vp-collapsed-lines:10;\\"><pre><code><span class=\\"line\\"><span class=\\"token class-name\\">Connection</span> connection <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">JdbcUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getConnection</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">//1. 先设置事务不要自动提交</span></span>\\n<span class=\\"line\\">\\tconnection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setAutoCommint</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">//2. 进行各种 crud</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">//多个表的修改，添加 ，删除</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">//3. 提交</span></span>\\n<span class=\\"line\\">\\tconnection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">commit</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">//4. 回滚</span></span>\\n<span class=\\"line\\">\\tconection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">rollback</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div><div class=\\"collapsed-lines\\"></div></div>","autoDesc":true}');export{u as comp,r as data};
