import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as t}from"./app-eWV4nnR8.js";const e="/assets/1671091441008-CkCzYJNh.png",l="/assets/1671091480487-Ch0A_MQY.png",c="/assets/1671092272171-qOlRqKCU.png",o="/assets/1671092296012-DQD_UgdJ.png",i={};function u(r,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="_1-对象" tabindex="-1"><a class="header-anchor" href="#_1-对象"><span>1. 对象</span></a></h2><blockquote><p>对象（Object）：JavaScript里的一种数据类型（引用类型），也是用于存储数据的</p><p>好处：可以用来详细的描述某个事物，是用键值对形式存储语义更明了</p><p>特点：对象数据是无序的，数组有序的</p></blockquote><h3 id="_1-1-对象基本使用" tabindex="-1"><a class="header-anchor" href="#_1-1-对象基本使用"><span>1.1 对象基本使用</span></a></h3><p>对象有属性和方法组成</p><h4 id="_1-1-1对象属性" tabindex="-1"><a class="header-anchor" href="#_1-1-1对象属性"><span>1.1.1对象属性</span></a></h4><p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p><ol><li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>属性就是依附在对象上的变量（对象外是变量，对象内是属性）</li></ol><p><strong>1. 定义对象属性</strong></p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 对象也是一种数据类型，保存数据同时可以更直观的描述事物</span></span>
<span class="line">  <span class="token comment">// 1. 定义对象属性</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">12.6</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>2. 访问对象属性</strong></p><p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 获得对象中属性对应的值，我称之为属性访问</p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 对象也是一种数据类型，保存数据同时可以更直观的描述事物</span></span>
<span class="line">  <span class="token comment">// 1. 定义对象属性</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">12.6</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 访问对象属性  对象.属性</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment">// 4</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>  <span class="token comment">// 12.6</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_1-1-2-对象方法" tabindex="-1"><a class="header-anchor" href="#_1-1-2-对象方法"><span>1.1.2 对象方法</span></a></h4><p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p><ol><li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>方法是依附在对象中的函数（对象外是函数，对象内是方法）</li></ol><p><strong>1.定义对象方法</strong></p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// let fn = function() {}</span></span>
<span class="line"><span class="token comment">// 对象方法</span></span>
<span class="line"><span class="token comment">// 1. 定义对象方法</span></span>
<span class="line"><span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">dance</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>2.调用对象方法</strong></p><p>声明对象，并添加了若干方法后，可以使用 <code>.</code> 调用对象中函数，我称之为方法调用。</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// let fn = function() {}</span></span>
<span class="line"><span class="token comment">// 对象方法</span></span>
<span class="line"><span class="token comment">// 1. 定义对象方法</span></span>
<span class="line"><span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">dance</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 2</span></span>
<span class="line">    <span class="token comment">// console.log(x + y)</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 调用对象方法</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 唱歌</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 跳舞</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 方法可以传递参数也可以有返回值，跟函数使用基本类似</span></span>
<span class="line"><span class="token keyword">let</span> re <span class="token operator">=</span> pig<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1 实参</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p><h3 id="_1-2-操作对象" tabindex="-1"><a class="header-anchor" href="#_1-2-操作对象"><span>1.2 操作对象</span></a></h3><p>对象本质是无序的数据集合, 操作对象数据无非就是 <strong>增 删 改 查</strong></p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 操作对象：对数据 查、增、改、删</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 查： 对象.属性 对象.方法</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">.</span>uname<span class="token punctuation">)</span>  <span class="token comment">// 得到属性值</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 增：对象.新属性 = 新值   对象.新方法 = function(){}</span></span>
<span class="line">pig<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function-variable function">dance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;跳舞&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 改：对象.属性 = 新值  对象.方法 = 新匿名函数</span></span>
<span class="line">pig<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">&#39;小猪佩奇&#39;</span></span>
<span class="line">pig<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;哼哼哼！！&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 删： 了解，因为我们很少对对象里面的数据做删除操作  delete</span></span>
<span class="line"><span class="token keyword">delete</span> pig<span class="token punctuation">.</span>age</span>
<span class="line"><span class="token keyword">delete</span> pig<span class="token punctuation">.</span>dance</span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_1-2-1-查找属性的另外写法" tabindex="-1"><a class="header-anchor" href="#_1-2-1-查找属性的另外写法"><span>1.2.1 查找属性的另外写法</span></a></h4><p>对于多词属性比如中横线分割的属性，点操作就不能用了</p><p>我们可以采取： 对象[&#39;属性&#39;] 方式， 单引号和双引号都阔以，当然也可以用于其他正常属性</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 查询属性的另外写法  对象[&#39;属性&#39;] 这个属性必须加引号</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;pig-name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// console.log(pig.pig - name)  // NaN</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">[</span><span class="token string">&#39;pig-name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 佩奇</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 4    === pig.age </span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><blockquote><p>总结：多词属性或者需要解析变量的时候使用 [] 语法，其余的直接使用点语法</p></blockquote><h3 id="_1-3-遍历对象" tabindex="-1"><a class="header-anchor" href="#_1-3-遍历对象"><span>1.3 遍历对象</span></a></h3><p>for 遍历对象的问题：</p><ul><li>对象没有长度length，而且是无序的</li></ul><p>所以我们要利用 for in 遍历对象</p><p><strong>语法:</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> 变量 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token comment">// 属性名</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>对象<span class="token punctuation">[</span>变量<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 属性值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>for in语法中的 k 是一个变量, 在循环的过程中依次代表对象的属性名</li><li>由于 k 是变量, 所以必须使用 [ ] 语法解析</li><li>一定记住： k 是获得对象的属性名， 对象名[k] 是获得 属性值</li><li>一般不用这种方式遍历数组、主要是用来遍历对象</li></ol><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 遍历对象</span></span>
<span class="line">  <span class="token keyword">let</span> pig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;佩奇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">12.6</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// for (let key in pig) {</span></span>
<span class="line"><span class="token comment">//   console.log(key)  // key 是属性  </span></span>
<span class="line"><span class="token comment">//   console.log(pig[key]) // 对象[变量] 是值</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> pig<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment">// key 是属性   对象.属性</span></span>
<span class="line">  <span class="token comment">// console.log(pig.key)   // pig.key  undefined  因为key是个变量不是属性</span></span>
<span class="line">  <span class="token comment">// key  &#39;sex&#39;  &#39;age&#39;    对象[key]  对象[&#39;sex&#39;]  对象[&#39;age&#39;]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pig<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注意：数组遍历用传统for， for in 主要用来遍历对象</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">// 得到字符串类型的索引号</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-内置对象" tabindex="-1"><a class="header-anchor" href="#_2-内置对象"><span>2. 内置对象</span></a></h2><p>内置对象：JavaScript内部提供的对象，包含各种属性和方法给开发者调用</p><p>回想一下我们曾经使用过的 <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code></p><p>除了 <code>console</code> 对象外，JavaScritp 还有其它的内置的对象</p><h3 id="_2-1-math" tabindex="-1"><a class="header-anchor" href="#_2-1-math"><span>2.1 Math</span></a></h3><p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p><table><thead><tr><th>属性/方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>PI</td><td>圆周率</td><td>Math.PI 属性，返回圆周率</td></tr><tr><td>max</td><td>找最大值</td><td>Math.max(8, 3, 1) 方法，返回 8</td></tr><tr><td>min</td><td>找最小值</td><td>Math.min(8, 3, 1) 方法，返回 1</td></tr><tr><td>abs</td><td>绝对值</td><td>Math.abs(-1) 方法，返回 1</td></tr><tr><td>ceil</td><td>向上取整</td><td>Math.ceil(3.1) 方法，返回 4</td></tr><tr><td>floor</td><td>向下取整</td><td>Math.floor(3.8) 方法，返回 3</td></tr><tr><td>round</td><td>四舍五入取整</td><td>Math.round(3.8) 方法，返回 4， 遇到.5则舍入到相邻的在正无穷（+∞）方向上的整数</td></tr></tbody></table><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 内置对象Math </span></span>
<span class="line">  <span class="token comment">// 1. PI 属性 圆周率</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. max  方法 找最大值</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. min  方法 找最小值</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. abs 方法 取绝对值 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5. ceil 方法 向上取整   ceil 天花板   往大了取</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6. floor 方法 向下取整  floor 地板  往小了取</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  -2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 7. round 方法 四舍五入取整 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>数学对象提供了比较多的方法，这里不要求强记，通过演示数学对象的使用，加深对对象的理解。</p><h4 id="_2-1-1-随机数-random" tabindex="-1"><a class="header-anchor" href="#_2-1-1-随机数-random"><span>2.1.1 随机数 random</span></a></h4><p>lMath.random() 随机数， 返回一个0 - 1之间，并且包括0不包括1的随机小数 [0, 1）</p><p>如何生成0-10的随机整数呢？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如何生成5-15的随机整数？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如何生成N-M之间的随机整数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">M</span> <span class="token operator">-</span> <span class="token constant">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">N</span></span>
<span class="line">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>差值 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> 最小值</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 1. Math随机数  Math.random() </span></span>
<span class="line">  <span class="token comment">// 1.1 随机的小数 0 ~1 之间</span></span>
<span class="line">  <span class="token comment">// 1.2 能取到0，但是取不到1 [0, 1)</span></span>
<span class="line">  <span class="token comment">// console.log(Math.random())</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 取 0 ~ 10 之间的一个随机整数</span></span>
<span class="line">  <span class="token comment">// Math.random() * (10 + 1)</span></span>
<span class="line">  <span class="token comment">// (0 ~ 0.99999) * 11</span></span>
<span class="line">  <span class="token comment">// 0 ~ 10.99999</span></span>
<span class="line">  <span class="token comment">// Math.floor(Math.random() * (10 + 1))</span></span>
<span class="line">  <span class="token comment">// console.log(Math.floor(Math.random() * (10 + 1)))</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3. 取 5 ~ 15 之间的一个随机整数</span></span>
<span class="line">  <span class="token comment">// Math.floor(Math.random() * (10 + 1))  0 ~ 10 </span></span>
<span class="line">  <span class="token comment">// Math.floor(Math.random() * (10 + 1)) + 5  5 ~ 15 </span></span>
<span class="line">  <span class="token comment">// console.log(Math.floor(Math.random() * (10 + 1)) + 5)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 4. 取 n ~ m 之间的一个随机整数  4 ~ 12 </span></span>
<span class="line">  <span class="token comment">// Math.floor(Math.random() * (差值 + 1)) + 最小值</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-数据存储" tabindex="-1"><a class="header-anchor" href="#_3-数据存储"><span>3. 数据存储</span></a></h2><h3 id="_3-1-内存中堆栈空间分配区别" tabindex="-1"><a class="header-anchor" href="#_3-1-内存中堆栈空间分配区别"><span>3.1 内存中堆栈空间分配区别：</span></a></h3><p><strong>栈:</strong> 优点访问速度快，基本数据类型存放到栈里面</p><p>**堆:**优点存储容量大，引用数据类型存放到堆里面</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-变量声明" tabindex="-1"><a class="header-anchor" href="#_3-2-变量声明"><span>3.2 变量声明</span></a></h3><p>建议： const 优先，尽量使用const，原因是：</p><ul><li>很多变量声明的时候明确不会被更改了，为了安全性，那为什么不用 const 呢？</li><li>实际开发中也是，比如 React、Vue，基本 const 声明</li></ul><p>总结：</p><p>有了变量先给const，如果发现它后面是要被修改的，再改为let</p><h3 id="_3-3-专业术语" tabindex="-1"><a class="header-anchor" href="#_3-3-专业术语"><span>3.3 专业术语</span></a></h3><table><thead><tr><th>术语</th><th>解释</th><th>举例</th></tr></thead><tbody><tr><td>关键字</td><td>在JavaScript中有特殊意义的词汇</td><td>let、var、function、if、else、switch、case、break</td></tr><tr><td>保留字</td><td>在目前的JavaScript中没意义，但未来可能会具有特殊意义的词汇</td><td>int、short、long、char</td></tr><tr><td>标识（标识符）</td><td>变量名、函数名的另一种叫法</td><td>无</td></tr><tr><td>表达式</td><td>可以被求值的代码，一般配合运算符出现</td><td>10 + 3、age &gt;= 18</td></tr><tr><td>语句</td><td>一段可执行的代码</td><td>if () for()</td></tr></tbody></table>',70)]))}const m=s(i,[["render",u],["__file","js05.html.vue"]]),v=JSON.parse('{"path":"/codenotes/ui/js/js05.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 对象 对象（Object）：JavaScript里的一种数据类型（引用类型），也是用于存储数据的 好处：可以用来详细的描述某个事物，是用键值对形式存储语义更明了 特点：对象数据是无序的，数组有序的 1.1 对象基本使用 对象有属性和方法组成 1.1.1对象属性 数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。 属性都是成...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/ui/js/js05.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:description","content":"1. 对象 对象（Object）：JavaScript里的一种数据类型（引用类型），也是用于存储数据的 好处：可以用来详细的描述某个事物，是用键值对形式存储语义更明了 特点：对象数据是无序的，数组有序的 1.1 对象基本使用 对象有属性和方法组成 1.1.1对象属性 数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。 属性都是成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ahzy\\",\\"url\\":\\"https://gitee.com/private_crh\\"}]}"]]},"headers":[{"level":2,"title":"1. 对象","slug":"_1-对象","link":"#_1-对象","children":[{"level":3,"title":"1.1 对象基本使用","slug":"_1-1-对象基本使用","link":"#_1-1-对象基本使用","children":[{"level":4,"title":"1.1.1对象属性","slug":"_1-1-1对象属性","link":"#_1-1-1对象属性","children":[]},{"level":4,"title":"1.1.2 对象方法","slug":"_1-1-2-对象方法","link":"#_1-1-2-对象方法","children":[]}]},{"level":3,"title":"1.2 操作对象","slug":"_1-2-操作对象","link":"#_1-2-操作对象","children":[{"level":4,"title":"1.2.1 查找属性的另外写法","slug":"_1-2-1-查找属性的另外写法","link":"#_1-2-1-查找属性的另外写法","children":[]}]},{"level":3,"title":"1.3 遍历对象","slug":"_1-3-遍历对象","link":"#_1-3-遍历对象","children":[]}]},{"level":2,"title":"2. 内置对象","slug":"_2-内置对象","link":"#_2-内置对象","children":[{"level":3,"title":"2.1 Math","slug":"_2-1-math","link":"#_2-1-math","children":[{"level":4,"title":"2.1.1 随机数 random","slug":"_2-1-1-随机数-random","link":"#_2-1-1-随机数-random","children":[]}]}]},{"level":2,"title":"3. 数据存储","slug":"_3-数据存储","link":"#_3-数据存储","children":[{"level":3,"title":"3.1 内存中堆栈空间分配区别：","slug":"_3-1-内存中堆栈空间分配区别","link":"#_3-1-内存中堆栈空间分配区别","children":[]},{"level":3,"title":"3.2 变量声明","slug":"_3-2-变量声明","link":"#_3-2-变量声明","children":[]},{"level":3,"title":"3.3 专业术语","slug":"_3-3-专业术语","link":"#_3-3-专业术语","children":[]}]}],"git":{},"readingTime":{"minutes":7.63,"words":2290},"filePathRelative":"codenotes/ui/js/js05.md","excerpt":"<h2>1. 对象</h2>\\n<blockquote>\\n<p>对象（Object）：JavaScript里的一种数据类型（引用类型），也是用于存储数据的</p>\\n<p>好处：可以用来详细的描述某个事物，是用键值对形式存储语义更明了</p>\\n<p>特点：对象数据是无序的，数组有序的</p>\\n</blockquote>\\n<h3>1.1 对象基本使用</h3>\\n<p>对象有属性和方法组成</p>\\n<h4>1.1.1对象属性</h4>\\n<p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p>\\n<ol>\\n<li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li>\\n<li>多个属性之间使用英文 <code>,</code> 分隔</li>\\n<li>属性就是依附在对象上的变量（对象外是变量，对象内是属性）</li>\\n</ol>","autoDesc":true}');export{m as comp,v as data};
