import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,o as e}from"./app-eWV4nnR8.js";const l={};function t(r,n){return e(),i("div",null,n[0]||(n[0]=[a(`<h1 id="_1、profile功能" tabindex="-1"><a class="header-anchor" href="#_1、profile功能"><span>1、Profile功能</span></a></h1><p>为了方便多环境适配，springboot简化了profile功能。</p><h2 id="_1、application-profile功能" tabindex="-1"><a class="header-anchor" href="#_1、application-profile功能"><span>1、application-profile功能</span></a></h2><ul><li><p>默认配置文件 application.yaml；任何时候都会加载</p></li><li><p>指定环境配置文件 application-{env}.yaml</p></li><li><p>激活指定环境</p></li><li><ul><li>配置文件激活</li><li>命令行激活：java -jar xxx.jar --<strong>spring.profiles.active=prod --person.name=haha</strong></li></ul></li><li><ul><li><ul><li><strong>修改配置文件的任意值，命令行优先</strong></li></ul></li></ul></li><li><p>默认配置与环境配置同时生效</p></li><li><p>同名配置项，profile配置优先</p></li></ul><h2 id="_2、-profile条件装配功能" tabindex="-1"><a class="header-anchor" href="#_2、-profile条件装配功能"><span>2、@Profile条件装配功能</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductionConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、profile分组" tabindex="-1"><a class="header-anchor" href="#_3、profile分组"><span>3、profile分组</span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre><code><span class="line">spring.profiles.group.production[0]=proddb</span>
<span class="line">spring.profiles.group.production[1]=prodmq</span>
<span class="line"></span>
<span class="line">使用：--spring.profiles.active=production  激活</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2、外部化配置" tabindex="-1"><a class="header-anchor" href="#_2、外部化配置"><span>2、外部化配置</span></a></h1><p>https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><ol><li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li><li><code>@PropertySource</code> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li><li><strong>Config data (such as</strong> <code>**application.properties**</code> <strong>files)</strong></li><li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li><li>OS environment variables.</li><li>Java System properties (<code>System.getProperties()</code>).</li><li>JNDI attributes from <code>java:comp/env</code>.</li><li><code>ServletContext</code> init parameters.</li><li><code>ServletConfig</code> init parameters.</li><li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li><li>Command line arguments.</li><li><code>properties</code> attribute on your tests. Available on <code>@SpringBootTest</code> and the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests" target="_blank" rel="noopener noreferrer">test annotations for testing a particular slice of your application</a>.</li><li><code>@TestPropertySource</code> annotations on your tests.</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools-globalsettings" target="_blank" rel="noopener noreferrer">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</li></ol><h2 id="_1、外部配置源" tabindex="-1"><a class="header-anchor" href="#_1、外部配置源"><span>1、外部配置源</span></a></h2><p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p><h2 id="_2、配置文件查找位置" tabindex="-1"><a class="header-anchor" href="#_2、配置文件查找位置"><span>2、配置文件查找位置</span></a></h2><p>(1) classpath 根路径</p><p>(2) classpath 根路径下config目录</p><p>(3) jar包当前目录</p><p>(4) jar包当前目录的config目录</p><p>(5) /config子目录的直接子目录</p><h2 id="_3、配置文件加载顺序" tabindex="-1"><a class="header-anchor" href="#_3、配置文件加载顺序"><span>3、配置文件加载顺序：</span></a></h2><ol><li>当前jar包内部的application.properties和application.yml</li><li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li><li>引用的外部jar包的application.properties和application.yml</li><li>引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li></ol><h2 id="_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项" tabindex="-1"><a class="header-anchor" href="#_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项"><span>4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</span></a></h2><h1 id="_3、自定义starter" tabindex="-1"><a class="header-anchor" href="#_3、自定义starter"><span>3、自定义starter</span></a></h1><h2 id="_1、starter启动原理" tabindex="-1"><a class="header-anchor" href="#_1、starter启动原理"><span>1、starter启动原理</span></a></h2><ul><li>starter-pom引入 autoconfigurer 包</li></ul><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411070015365.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>autoconfigure包中配置使用 <strong>META-INF/spring.factories</strong> 中 <strong>EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</strong></p></li><li><p><strong>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</strong></p></li><li><ul><li><strong>@Configuration</strong></li><li><strong>@Conditional</strong></li><li><strong>@EnableConfigurationProperties</strong></li><li><strong>@Bean</strong></li><li>......</li></ul></li></ul><p><strong>引入starter</strong> <strong>--- xxxAutoConfiguration --- 容器中放入组件 ---- 绑定xxxProperties ----</strong> <strong>配置项</strong></p><h2 id="_2、自定义starter" tabindex="-1"><a class="header-anchor" href="#_2、自定义starter"><span>2、自定义starter</span></a></h2><p><strong>atguigu-hello-spring-boot-starter（启动器）</strong></p><p><strong>atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）</strong></p><h1 id="_4、springboot原理" tabindex="-1"><a class="header-anchor" href="#_4、springboot原理"><span>4、SpringBoot原理</span></a></h1><p>Spring原理【<a href="https://www.bilibili.com/video/BV1gW411W7wy?p=1" target="_blank" rel="noopener noreferrer">Spring注解</a>】、<strong>SpringMVC</strong>原理、<strong>自动配置原理</strong>、SpringBoot原理</p><h2 id="_1、springboot启动过程" tabindex="-1"><a class="header-anchor" href="#_1、springboot启动过程"><span>1、SpringBoot启动过程</span></a></h2><ul><li><p>创建 <strong>SpringApplication</strong></p></li><li><ul><li>保存一些信息。</li><li>判定当前应用的类型。ClassUtils。Servlet</li><li><strong>bootstrappers</strong>**：初始启动引导器（<code>List&lt;Bootstrapper&gt;</code>）：去spring.factories文件中找** org.springframework.boot.<strong>Bootstrapper</strong></li><li>找 <strong>ApplicationContextInitializer</strong>；去<strong>spring.factories****找</strong> <strong>ApplicationContextInitializer</strong></li></ul></li><li><ul><li><ul><li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializers</strong></li></ul></li></ul></li><li><ul><li><strong>找</strong> <strong>ApplicationListener ；应用监听器。<strong>去</strong>spring.factories****找</strong> <strong>ApplicationListener</strong></li></ul></li><li><ul><li><ul><li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li></ul></li></ul></li><li><p>运行 <strong>SpringApplication</strong></p></li><li><ul><li><strong>StopWatch</strong></li><li><strong>记录应用的启动时间</strong></li><li>**创建引导上下文（Context环境）**<strong>createBootstrapContext()</strong></li></ul></li><li><ul><li><ul><li>获取到所有之前的 <strong>bootstrappers 挨个执行</strong> intitialize() 来完成对引导启动器上下文环境设置</li></ul></li></ul></li><li><ul><li>让当前应用进入<strong>headless</strong>模式。<strong>java.awt.headless</strong></li><li><strong>获取所有</strong> <strong>RunListener</strong>**（运行监听器）【为了方便所有Listener进行事件感知】**</li></ul></li><li><ul><li><ul><li>getSpringFactoriesInstances 去<strong>spring.factories****找</strong> <strong>SpringApplicationRunListener</strong>.</li></ul></li></ul></li><li><ul><li>遍历 <strong>SpringApplicationRunListener 调用 starting 方法；</strong></li></ul></li><li><ul><li><ul><li><strong>相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</strong></li></ul></li></ul></li><li><ul><li>保存命令行参数；ApplicationArguments</li><li>准备环境 prepareEnvironment（）;</li></ul></li><li><ul><li><ul><li>返回或者创建基础环境信息对象。<strong>StandardServletEnvironment</strong></li><li><strong>配置环境信息对象。</strong></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><strong>读取所有的配置源的配置属性值。</strong></li></ul></li></ul></li></ul></li><li><ul><li><ul><li>绑定环境信息</li><li>监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成</li></ul></li></ul></li><li><ul><li>创建IOC容器（createApplicationContext（））</li></ul></li><li><ul><li><ul><li>根据项目类型（Servlet）创建容器，</li><li>当前会创建 <strong>AnnotationConfigServletWebServerApplicationContext</strong></li></ul></li></ul></li><li><ul><li><strong>准备ApplicationContext IOC容器的基本信息</strong> <strong>prepareContext()</strong></li></ul></li><li><ul><li><ul><li>保存环境信息</li><li>IOC容器的后置处理流程。</li><li>应用初始化器；applyInitializers；</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>遍历所有的 <strong>ApplicationContextInitializer 。调用</strong> <strong>initialize.。来对ioc容器进行初始化扩展功能</strong></li><li>遍历所有的 listener 调用 <strong>contextPrepared。EventPublishRunListenr；通知所有的监听器****contextPrepared</strong></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><strong>所有的监听器 调用</strong> <strong>contextLoaded。通知所有的监听器</strong> <strong>contextLoaded；</strong></li></ul></li></ul></li><li><ul><li>**刷新IOC容器。**refreshContext</li></ul></li><li><ul><li><ul><li>创建容器中的所有组件（Spring注解）</li></ul></li></ul></li><li><ul><li>容器刷新完成后工作？afterRefresh</li><li>所有监听 器 调用 listeners.<strong>started</strong>(context); <strong>通知所有的监听器</strong> <strong>started</strong></li><li>**调用所有runners；**callRunners()</li></ul></li><li><ul><li><ul><li><strong>获取容器中的</strong> <strong>ApplicationRunner</strong></li><li><strong>获取容器中的</strong> <strong>CommandLineRunner</strong></li><li><strong>合并所有runner并且按照@Order进行排序</strong></li><li><strong>遍历所有的runner。调用 run</strong> <strong>方法</strong></li></ul></li></ul></li><li><ul><li><strong>如果以上有异常，</strong></li></ul></li><li><ul><li><ul><li><strong>调用Listener 的 failed</strong></li></ul></li></ul></li><li><ul><li><strong>调用所有监听器的 running 方法</strong> listeners.running(context); <strong>通知所有的监听器</strong> <strong>running</strong></li><li>**running如果有问题。继续通知 failed 。**<strong>调用所有 Listener 的</strong> **failed；**<strong>通知所有的监听器</strong> <strong>failed</strong></li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Bootstrapper</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Initialize the given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BootstrapRegistry</span></span><span class="token punctuation">}</span> with any required registrations.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">registry</span> the registry to initialize</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token keyword">void</span> <span class="token function">intitialize</span><span class="token punctuation">(</span><span class="token class-name">BootstrapRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411070015417.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411070015446.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitee.com/private_crh/notes/raw/master/typora/202411070015673.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@FunctionalInterface</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Callback used to run the bean.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">args</span> incoming application arguments</span>
<span class="line">	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> on error</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token annotation punctuation">@FunctionalInterface</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Callback used to run the bean.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">args</span> incoming main method arguments</span>
<span class="line">	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> on error</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h2><h2 id="_2、application-events-and-listeners" tabindex="-1"><a class="header-anchor" href="#_2、application-events-and-listeners"><span>2、Application Events and Listeners</span></a></h2><p>https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>ApplicationListener</strong></p><p><strong>SpringApplicationRunListener</strong></p><h2 id="_3、applicationrunner-与-commandlinerunner" tabindex="-1"><a class="header-anchor" href="#_3、applicationrunner-与-commandlinerunner"><span>3、ApplicationRunner 与 CommandLineRunner</span></a></h2>`,48)]))}const c=s(l,[["render",t],["__file","8原理解析.html.vue"]]),g=JSON.parse('{"path":"/codenotes/back/spring/springboot/8%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","title":"原理解析","lang":"zh-CN","frontmatter":{"title":"原理解析","category":["计算机"],"tag":["springboot"],"sticky":false,"star":false,"article":false,"timeline":false,"isOriginal":true,"description":"1、Profile功能 为了方便多环境适配，springboot简化了profile功能。 1、application-profile功能 默认配置文件 application.yaml；任何时候都会加载 指定环境配置文件 application-{env}.yaml 激活指定环境 配置文件激活 命令行激活：java -jar xxx.jar --sp...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/spring/springboot/8%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"原理解析"}],["meta",{"property":"og:description","content":"1、Profile功能 为了方便多环境适配，springboot简化了profile功能。 1、application-profile功能 默认配置文件 application.yaml；任何时候都会加载 指定环境配置文件 application-{env}.yaml 激活指定环境 配置文件激活 命令行激活：java -jar xxx.jar --sp..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://gitee.com/private_crh/notes/raw/master/typora/202411070015365.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"springboot"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"原理解析\\",\\"description\\":\\"1、Profile功能 为了方便多环境适配，springboot简化了profile功能。 1、application-profile功能 默认配置文件 application.yaml；任何时候都会加载 指定环境配置文件 application-{env}.yaml 激活指定环境 配置文件激活 命令行激活：java -jar xxx.jar --sp...\\"}"]]},"headers":[{"level":1,"title":"1、Profile功能","slug":"_1、profile功能","link":"#_1、profile功能","children":[{"level":2,"title":"1、application-profile功能","slug":"_1、application-profile功能","link":"#_1、application-profile功能","children":[]},{"level":2,"title":"2、@Profile条件装配功能","slug":"_2、-profile条件装配功能","link":"#_2、-profile条件装配功能","children":[]},{"level":2,"title":"3、profile分组","slug":"_3、profile分组","link":"#_3、profile分组","children":[]}]},{"level":1,"title":"2、外部化配置","slug":"_2、外部化配置","link":"#_2、外部化配置","children":[{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"1、外部配置源","slug":"_1、外部配置源","link":"#_1、外部配置源","children":[]},{"level":2,"title":"2、配置文件查找位置","slug":"_2、配置文件查找位置","link":"#_2、配置文件查找位置","children":[]},{"level":2,"title":"3、配置文件加载顺序：","slug":"_3、配置文件加载顺序","link":"#_3、配置文件加载顺序","children":[]},{"level":2,"title":"4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项","slug":"_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项","link":"#_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项","children":[]}]},{"level":1,"title":"3、自定义starter","slug":"_3、自定义starter","link":"#_3、自定义starter","children":[{"level":2,"title":"1、starter启动原理","slug":"_1、starter启动原理","link":"#_1、starter启动原理","children":[]},{"level":2,"title":"2、自定义starter","slug":"_2、自定义starter","link":"#_2、自定义starter","children":[]}]},{"level":1,"title":"4、SpringBoot原理","slug":"_4、springboot原理","link":"#_4、springboot原理","children":[{"level":2,"title":"1、SpringBoot启动过程","slug":"_1、springboot启动过程","link":"#_1、springboot启动过程","children":[]},{"level":2,"title":"","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"2、Application Events and Listeners","slug":"_2、application-events-and-listeners","link":"#_2、application-events-and-listeners","children":[]},{"level":2,"title":"3、ApplicationRunner 与 CommandLineRunner","slug":"_3、applicationrunner-与-commandlinerunner","link":"#_3、applicationrunner-与-commandlinerunner","children":[]}]}],"git":{},"readingTime":{"minutes":4.59,"words":1378},"filePathRelative":"codenotes/back/spring/springboot/8原理解析.md","excerpt":"\\n<p>为了方便多环境适配，springboot简化了profile功能。</p>\\n<h2>1、application-profile功能</h2>\\n<ul>\\n<li>\\n<p>默认配置文件  application.yaml；任何时候都会加载</p>\\n</li>\\n<li>\\n<p>指定环境配置文件  application-{env}.yaml</p>\\n</li>\\n<li>\\n<p>激活指定环境</p>\\n</li>\\n<li>\\n<ul>\\n<li>配置文件激活</li>\\n<li>命令行激活：java -jar xxx.jar --<strong>spring.profiles.active=prod  --person.name=haha</strong></li>\\n</ul>\\n</li>\\n<li>\\n<ul>\\n<li>\\n<ul>\\n<li><strong>修改配置文件的任意值，命令行优先</strong></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>默认配置与环境配置同时生效</p>\\n</li>\\n<li>\\n<p>同名配置项，profile配置优先</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,g as data};
