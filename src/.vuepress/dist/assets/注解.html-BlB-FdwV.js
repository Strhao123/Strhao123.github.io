import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-eWV4nnR8.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_1-注解" tabindex="-1"><a class="header-anchor" href="#_1-注解"><span>1. 注解</span></a></h1><h2 id="_1-1-注释和注解的区别-掌握" tabindex="-1"><a class="header-anchor" href="#_1-1-注释和注解的区别-掌握"><span>1.1 注释和注解的区别？（掌握）</span></a></h2><p>共同点：都可以对程序进行解释说明。</p><p>不同点：注释，是给程序员看的。只在Java中有效。在class文件中不存在注释的。</p><p>​ 当编译之后，会进行注释擦除。</p><p>​ 注解，是给虚拟机看的。当虚拟机看到注解之后，就知道要做什么事情了。</p><p>##1.2 如何使用注解（掌握）</p><p>在以前看过注解@Override。</p><p>当子类重写父类方法的时候，在重写的方法上面写@Override。</p><p>当虚拟机看到@Override的时候，就知道下面的方法是重写的父类的。检查语法，如果语法正确编译正常，如果语法错误，就会报错。</p><h2 id="_1-3-java中已经存在的注解-掌握" tabindex="-1"><a class="header-anchor" href="#_1-3-java中已经存在的注解-掌握"><span>1.3 Java中已经存在的注解（掌握）</span></a></h2><p>@Override：表示方法的重写</p><p>@Deprecated：表示修饰的方法已过时</p><p>@SuppressWarnings(&quot;all&quot;)：压制警告</p><p>除此之外，还需要掌握第三方框架中提供的注解：</p><p>比如：Junit</p><p>@Test 表示运行测试方法</p><p>@Before 表示在Test之前运行，进行数据的初始化</p><p>@After 表示在Test之后运行，进行数据的还原</p><h2 id="_1-4-自定义注解-了解" tabindex="-1"><a class="header-anchor" href="#_1-4-自定义注解-了解"><span>1.4 自定义注解（了解）</span></a></h2><p>自定义注解单独存在是没有什么意义的，一般会跟反射结合起来使用，会用发射去解析注解。</p><p>针对于注解，只要掌握会使用别人已经写好的注解即可。</p><p>关于注解的解析，一般是在框架的底层已经写好了。</p><h2 id="_1-5-特殊属性-掌握" tabindex="-1"><a class="header-anchor" href="#_1-5-特殊属性-掌握"><span>1.5 特殊属性（掌握）</span></a></h2><p>value：</p><p>​ 当注解中只有&quot;一个属性&quot;,并且属性名是&quot;value&quot;,使用注解时,可以省略value属性名</p><p>代码示例：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">//注解的定义</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Anno2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//注解的使用</span></span>
<span class="line"><span class="token annotation punctuation">@Anno2</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoDemo2</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Anno2</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_1-6-元注解-了解" tabindex="-1"><a class="header-anchor" href="#_1-6-元注解-了解"><span>1.6 元注解（了解）</span></a></h2><p>可以写在注解上面的注解</p><p>@Target ：指定注解能在哪里使用</p><p>@Retention ：可以理解为保留时间(生命周期)</p><h4 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>Target:</span></a></h4><p>​ 作用：用来标识注解使用的位置，如果没有使用该注解标识，则自定义的注解可以使用在任意位置。</p><p>​ 可使用的值定义在ElementType枚举类中，常用值如下</p><ul><li>TYPE，类，接口</li><li>FIELD, 成员变量</li><li>METHOD, 成员方法</li><li>PARAMETER, 方法参数</li><li>CONSTRUCTOR, 构造方法</li><li>LOCAL_VARIABLE, 局部变量</li></ul><h4 id="retention" tabindex="-1"><a class="header-anchor" href="#retention"><span>Retention：</span></a></h4><p>​ 作用：用来标识注解的生命周期(有效范围)</p><p>​ 可使用的值定义在RetentionPolicy枚举类中，常用值如下</p><ul><li>SOURCE：注解只作用在源码阶段，生成的字节码文件中不存在</li><li>CLASS：注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值</li><li>RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段</li></ul><p>注解的解析：</p><h2 id="_1-7-模拟junit自带的-test注解-了解" tabindex="-1"><a class="header-anchor" href="#_1-7-模拟junit自带的-test注解-了解"><span>1.7 模拟JUnit自带的@Test注解（了解）</span></a></h2><p>代码示例：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="java" data-title="java" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestMethod</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MyTest</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;method1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;method2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MyTest</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;method3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1,获取class对象</span></span>
<span class="line">        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.itheima.test2.MyTestMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取对象</span></span>
<span class="line">        <span class="token class-name">Object</span> o <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.获取所有方法</span></span>
<span class="line">        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//method依次表示类里面的每一个方法</span></span>
<span class="line">            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//判断当前方法有没有MyTest注解</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_1-8-注解小结" tabindex="-1"><a class="header-anchor" href="#_1-8-注解小结"><span>1.8 注解小结：</span></a></h2><p>掌握如何使用已经存在的注解即可。</p><p>@Override：表示方法的重写</p><p>@Deprecated：表示修饰的方法已过时</p><p>@SuppressWarnings(&quot;all&quot;)：压制警告</p><p>@Test：表示要运行的方法</p><p>在以后的实际开发中，注解是使用框架已经提供好的注解。</p><p>自定义注解+解析注解（很难的，<strong>了解</strong>），一般会出现在框架的底层。当以后我们要自己写一个框架的时候，才会用到自定义注解+解析注解。</p>`,52)]))}const u=s(t,[["render",l],["__file","注解.html.vue"]]),d=JSON.parse('{"path":"/codenotes/back/javacore/javaadvance/%E6%B3%A8%E8%A7%A3.html","title":"注解","lang":"zh-CN","frontmatter":{"title":"注解","author":"黑马_阿玮","category":["计算机"],"tag":["java"],"sticky":false,"star":false,"article":false,"timeline":false,"date":"2024-11-07T00:00:00.000Z","headerDepth":2,"description":"1. 注解 1.1 注释和注解的区别？（掌握） 共同点：都可以对程序进行解释说明。 不同点：注释，是给程序员看的。只在Java中有效。在class文件中不存在注释的。 ​ 当编译之后，会进行注释擦除。 ​ 注解，是给虚拟机看的。当虚拟机看到注解之后，就知道要做什么事情了。 ##1.2 如何使用注解（掌握） 在以前看过注解@Override。 当子类重写...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/back/javacore/javaadvance/%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:title","content":"注解"}],["meta",{"property":"og:description","content":"1. 注解 1.1 注释和注解的区别？（掌握） 共同点：都可以对程序进行解释说明。 不同点：注释，是给程序员看的。只在Java中有效。在class文件中不存在注释的。 ​ 当编译之后，会进行注释擦除。 ​ 注解，是给虚拟机看的。当虚拟机看到注解之后，就知道要做什么事情了。 ##1.2 如何使用注解（掌握） 在以前看过注解@Override。 当子类重写..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"黑马_阿玮"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-11-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"注解\\",\\"description\\":\\"1. 注解 1.1 注释和注解的区别？（掌握） 共同点：都可以对程序进行解释说明。 不同点：注释，是给程序员看的。只在Java中有效。在class文件中不存在注释的。 ​ 当编译之后，会进行注释擦除。 ​ 注解，是给虚拟机看的。当虚拟机看到注解之后，就知道要做什么事情了。 ##1.2 如何使用注解（掌握） 在以前看过注解@Override。 当子类重写...\\"}"]]},"headers":[{"level":1,"title":"1. 注解","slug":"_1-注解","link":"#_1-注解","children":[{"level":2,"title":"1.1 注释和注解的区别？（掌握）","slug":"_1-1-注释和注解的区别-掌握","link":"#_1-1-注释和注解的区别-掌握","children":[]},{"level":2,"title":"1.3 Java中已经存在的注解（掌握）","slug":"_1-3-java中已经存在的注解-掌握","link":"#_1-3-java中已经存在的注解-掌握","children":[]},{"level":2,"title":"1.4 自定义注解（了解）","slug":"_1-4-自定义注解-了解","link":"#_1-4-自定义注解-了解","children":[]},{"level":2,"title":"1.5 特殊属性（掌握）","slug":"_1-5-特殊属性-掌握","link":"#_1-5-特殊属性-掌握","children":[]},{"level":2,"title":"1.6 元注解（了解）","slug":"_1-6-元注解-了解","link":"#_1-6-元注解-了解","children":[{"level":4,"title":"Target:","slug":"target","link":"#target","children":[]},{"level":4,"title":"Retention：","slug":"retention","link":"#retention","children":[]}]},{"level":2,"title":"1.7 模拟JUnit自带的@Test注解（了解）","slug":"_1-7-模拟junit自带的-test注解-了解","link":"#_1-7-模拟junit自带的-test注解-了解","children":[]},{"level":2,"title":"1.8 注解小结：","slug":"_1-8-注解小结","link":"#_1-8-注解小结","children":[]}]}],"git":{},"readingTime":{"minutes":3.5,"words":1051},"filePathRelative":"codenotes/back/javacore/javaadvance/注解.md","localizedDate":"2024年11月7日","excerpt":"\\n<h2>1.1 注释和注解的区别？（掌握）</h2>\\n<p>共同点：都可以对程序进行解释说明。</p>\\n<p>不同点：注释，是给程序员看的。只在Java中有效。在class文件中不存在注释的。</p>\\n<p>​\\t\\t当编译之后，会进行注释擦除。</p>\\n<p>​\\t\\t注解，是给虚拟机看的。当虚拟机看到注解之后，就知道要做什么事情了。</p>\\n<p>##1.2 如何使用注解（掌握）</p>\\n<p>在以前看过注解@Override。</p>\\n<p>当子类重写父类方法的时候，在重写的方法上面写@Override。</p>\\n<p>当虚拟机看到@Override的时候，就知道下面的方法是重写的父类的。检查语法，如果语法正确编译正常，如果语法错误，就会报错。</p>","autoDesc":true}');export{u as comp,d as data};
