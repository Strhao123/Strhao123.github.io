import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as e}from"./app-eWV4nnR8.js";const t="/assets/universe-DdQu0-4v.gif",l="/assets/1647918678956-tD2Tenmp.png",c="/assets/1647918734677-Dkjop1aU.png",i="/assets/array-ELjs2PzF.jpg",o="/assets/1671086908334-DOZn83kS.png",u="/assets/1671087117372-BfCsRlKW.png",r="/assets/1671087197870-BBjSHoxF.png",d="/assets/1673589134345-wiqcI4jB.png",k={};function m(v,n){return e(),a("div",null,n[0]||(n[0]=[p('<h2 id="_1-循环嵌套" tabindex="-1"><a class="header-anchor" href="#_1-循环嵌套"><span>1. 循环嵌套</span></a></h2><p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p><p>基本语法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span>（初始化<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span>变量计数） <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 循环条件；变量计数）<span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//  要重复执行的代码</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">// 1. 外面的循环 记录第n天 </span>
<span class="line">for (let i = 1; i &lt; 4; i++) {</span>
<span class="line">    document.write(\`第\${i}天 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>\`)</span>
<span class="line">    // 2. 里层的循环记录 几个单词</span>
<span class="line">    for (let j = 1; j &lt; 6; j++) {</span>
<span class="line">        document.write(\`记住第\${j}个单词<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>\`)</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住，外层循环循环一次，里层循环循环全部</p><h3 id="_1-1-三角型" tabindex="-1"><a class="header-anchor" href="#_1-1-三角型"><span>1.1 三角型</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token comment">// 外层打印几行</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 里层打印几个星星</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;★&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-九九乘法表" tabindex="-1"><a class="header-anchor" href="#_1-2-九九乘法表"><span>1.2 九九乘法表</span></a></h3><p>样式css</p><div class="language-css line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="css" data-title="css" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token selector">span</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid pink<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">margin</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 2px 2px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 192<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 192<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>javascript</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"> <span class="token comment">// 外层打印几行</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 里层打印几个星星</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 只需要把 ★ 换成  1 x 2 = 2   </span></span>
<span class="line">        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">				&lt;div&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> x </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j <span class="token operator">*</span> i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/div&gt;</span>
<span class="line">     </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-数组" tabindex="-1"><a class="header-anchor" href="#_2-数组"><span>2. 数组</span></a></h2><blockquote><p>知道什么是数组及其应用的场景，掌握数组声明及访问的语法。</p></blockquote><h3 id="_2-1-数组是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-数组是什么"><span>2.1 数组是什么？</span></a></h3><p><strong>数组</strong>：(Array) 是一种数据类型，属于引用数据类型</p><p><strong>作用</strong>: 在单个变量名下存储多个数据</p><p>例如我要保存咱们班同学的姓名，使用数组非常方便</p><h3 id="_2-2-数组的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-2-数组的基本使用"><span>2.2 数组的基本使用</span></a></h3><h4 id="_2-2-1-定义数组" tabindex="-1"><a class="header-anchor" href="#_2-2-1-定义数组"><span>2.2.1 定义数组</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 1. 语法，使用 [] 来定义一个空数组</span></span>
<span class="line">  <span class="token comment">// 定义一个空数组，然后赋值给变量 classes</span></span>
<span class="line">  <span class="token comment">// let classes = []</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 定义非空数组</span></span>
<span class="line">  <span class="token keyword">let</span> classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小丽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p><h4 id="_2-2-2-访问数组和数组索引" tabindex="-1"><a class="header-anchor" href="#_2-2-2-访问数组和数组索引"><span>2.2.2 访问数组和数组索引</span></a></h4><p>使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。</p><p>我们将数据单元在数组中的编号称为索引值，也有人称其为下标。</p><p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从<code> 0</code> 开始的，如下图所示：</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】</p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 数组： 可以单个变量下存储多个数据</span></span>
<span class="line">  <span class="token comment">// 1. 声明数组</span></span>
<span class="line">  <span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小丽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// let names = [&#39;小明&#39;, &#39;小刚&#39;, true, &#39;小丽&#39;, 1]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 1.1 数组是按照顺序来存储的，每个数据都有自己的编号</span></span>
<span class="line">  <span class="token comment">// 1.2 编号是从0开始的， 0 1 2 3... 也称为 索引 或者 下标</span></span>
<span class="line">  <span class="token comment">// 1.3 数组里面可以存放任意的数据类型</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 数组取值  数组名[下标]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;小明&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;小刚&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;小红&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;小丽&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;小米&#39;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>数组做为数据的集合，它的单元值可以是任意数据类型</p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 6. 数组单值类型可以是任意数据类型</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// a) 数组单元值的类型为字符类型</span></span>
<span class="line">  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;HTML&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CSS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// b) 数组单元值的类型为数值类型</span></span>
<span class="line">  <span class="token keyword">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// c) 混合多种类型</span></span>
<span class="line">  <span class="token keyword">let</span> mixin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-3-遍历数组" tabindex="-1"><a class="header-anchor" href="#_2-2-3-遍历数组"><span>2.2.3 遍历数组</span></a></h4><p><strong>遍历数组</strong>：把数组中每个数据都访问到</p><p><strong>数组长度</strong>： 数组.<code>length</code></p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;迪丽热巴&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;古力娜扎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;佟丽丫丫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;玛尔扎哈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哈尼克孜&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">// console.log(arr[0])</span></span>
<span class="line">  <span class="token comment">// console.log(arr[1])</span></span>
<span class="line">  <span class="token comment">// console.log(arr[2])</span></span>
<span class="line">  <span class="token comment">// console.log(arr[3])</span></span>
<span class="line">  <span class="token comment">// 遍历数组： 把数组里面的数据每个都会访问到</span></span>
<span class="line">  <span class="token comment">// for (let i = 0; i &lt; 4; i++) {</span></span>
<span class="line">  <span class="token comment">//   // console.log(i)  数组名[索引号]</span></span>
<span class="line">  <span class="token comment">//   console.log(arr[i])</span></span>
<span class="line">  <span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 1. 数组的长度 数组.length </span></span>
<span class="line">  <span class="token comment">// console.log(arr.length)  // 4</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 2. 数组里面的数据也称为 数组元素</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-3-操作数组" tabindex="-1"><a class="header-anchor" href="#_2-3-操作数组"><span>2.3 操作数组</span></a></h3><p>数组本质是数据集合, 操作数据无非就是 增 删 改 查 语法</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-3-1-查询和修改数组" tabindex="-1"><a class="header-anchor" href="#_2-3-1-查询和修改数组"><span>2.3.1 查询和修改数组</span></a></h4><p><strong>查询：</strong></p><p>​ 语法：数组[索引]</p><p>​ 返回值：如果查询不到则返回 undefined</p><p><strong>修改：</strong></p><p>​ 语法：数组[索引] = 新值</p><p>​ 返回值：如果下标不存在，则是新增一个数组元素，并修改了数组长度（尽量避免）</p><div class="language-html line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="html" data-title="html" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// 1. 查询数组元素</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;迪丽热巴&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;古丽扎娜&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  &#39;迪丽热巴&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  &#39;古丽扎娜&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  undefined</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 修改数组元素   数组[索引] = 新值</span></span>
<span class="line">  arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;佟丽丫丫&#39;</span></span>
<span class="line">  <span class="token comment">// console.log(arr)</span></span>
<span class="line">  arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;古丽扎娜&#39;</span>  <span class="token comment">// 如果索引号不存在，则是增加数组元素 （不提倡）</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 4 修改了数组长度</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-3-2-新增" tabindex="-1"><a class="header-anchor" href="#_2-3-2-新增"><span>2.3.2 新增</span></a></h4><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 数组新增元素</span></span>
<span class="line"><span class="token comment">// 1. 可以向数组的末尾新增1个或者多个数组元素 数组.push(元素1...元素n)</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;迪丽热巴&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// console.log(arr.push(&#39;佟丽丫丫&#39;))  // 返回的是新数组的长度 2</span></span>
<span class="line"><span class="token comment">// arr.push(&#39;佟丽丫丫&#39;, &#39;古丽扎娜&#39;)</span></span>
<span class="line"><span class="token comment">// console.log(arr)  // 修改原数组</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 可以向数组的开头增加1个或者多个数组元素 数组.unshift(元素1,...元素n)</span></span>
<span class="line"><span class="token comment">// console.log(arr.unshift(&#39;佟丽丫丫&#39;))  // 返回的是新数组的长度 2</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#39;佟丽丫丫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;古丽扎娜&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 修改原数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-3-3-删除" tabindex="-1"><a class="header-anchor" href="#_2-3-3-删除"><span>2.3.3 删除</span></a></h4><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 删除元素</span></span>
<span class="line">  <span class="token comment">// 1. 删除数组中的最后一个元素  数组.pop()  修改原数组</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// arr.pop()</span></span>
<span class="line"><span class="token comment">// console.log(arr.pop())  // 返回的是被删除的元素</span></span>
<span class="line"><span class="token comment">// console.log(arr)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 删除数组中的第一个元素 数组.shift() 修改原数组的</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// console.log(arr.shift())  // 返回的是被删除的元素</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-3-4-数组-splice方法" tabindex="-1"><a class="header-anchor" href="#_2-3-4-数组-splice方法"><span>2.3.4 数组 splice方法</span></a></h4><p>数组.splice() 方法 可以添加也可以删除数组元素</p><p>说明：可以从指定位置删除或者增加的数组元素，注意它修改原数组</p><blockquote><p>splice(start,deleteCount, item1, item2...)</p></blockquote><ol><li><p>start 起始位置:</p><ul><li>指定修改的开始位置（从0计数）</li></ul></li><li><p>deleteCount 删除个数:</p><ul><li><p>表示要移除的数组元素的个数</p></li><li><p>可选的。如果省略则默认从指定的起始位置删除到最后</p></li></ul></li><li><p>item1, item2...</p><ul><li>新增的元素</li></ul></li></ol><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// splice 删除和增加数组元素</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;迪丽热巴&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;古力娜扎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;佟丽丫丫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;玛尔扎哈&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 1. splice 删除  数组.splice(起始位置, 删除几个)</span></span>
<span class="line"><span class="token comment">// arr.splice(1, 1) // 记住起始位置是索引号，从0 开始数</span></span>
<span class="line"><span class="token comment">// arr.splice(1) // 如果第二个参数（删除几个）省略了，则默认删除到最后</span></span>
<span class="line"><span class="token comment">// console.log(arr)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. splice 增加  数组.splice(起始位置, 删除几个, 新增元素1,...新增元素n)</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;刘德华&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink老师&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 2.1 注意如果是新增，则起始位置是目标位置的索引号， 删除几个（第二个参数）不能省略我们写为 0， 后面写新增的元素</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. splice 不是替换pop shift  unshift push.  arr.splice(0, 1)</span></span>
<span class="line"><span class="token comment">// 开头结尾找前面 pop shift  unshift push</span></span>
<span class="line"><span class="token comment">// splice管中间</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-拓展知识" tabindex="-1"><a class="header-anchor" href="#_3-拓展知识"><span>3. 拓展知识</span></a></h2><h3 id="_3-1-数组排序sort" tabindex="-1"><a class="header-anchor" href="#_3-1-数组排序sort"><span>3.1 数组排序sort</span></a></h3><p>数组. sort() 方法可以排序</p><p>语法：</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token comment">// 数组排序  数组.sort()  修改原数组</span></span>
<span class="line">    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment">// arr.sort()</span></span>
<span class="line">    <span class="token comment">// console.log(arr)  // [100, 34, 78, 88, 99]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1. 升序排序</span></span>
<span class="line">    <span class="token comment">// arr.sort(function (a, b) {</span></span>
<span class="line">    <span class="token comment">//   return a - b</span></span>
<span class="line">    <span class="token comment">// })</span></span>
<span class="line">    <span class="token comment">// console.log(arr)  // [34, 78, 88, 99, 100]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. 降序排序</span></span>
<span class="line">    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> b <span class="token operator">-</span> a</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//  [100, 99, 88, 78, 34]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 获取数组最大值和最小值</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">数组的最大值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">数组的最小值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-2-选择排序-了解" tabindex="-1"><a class="header-anchor" href="#_3-2-选择排序-了解"><span>3.2 选择排序（了解）</span></a></h3><p>选择排序原理：（了解）</p><p>就是从第一个数开始，与后面所有的数相比较，找出最小（最大）的数，放在第一个位置</p><p>以此类推，每一轮确定一个相对于这一轮最小（最大）的数</p><p>算法可视化网站地址： https://visualgo.net/zh/sorting</p><p>核心：利用循环嵌套比较，根据索引号来交换变量</p><p>①：外层循环是一共进行几轮相比较，通过观察，一共进行数组长度-1 次比较</p><ul><li>for (let i = 0; i &lt; arr.length - 1; i++)</li><li>把 i作为最小值起始索引 minIndex</li></ul><p>②：里层循环是每一轮的比较来查找最小值</p><ul><li>里层循环起始值是 i + 1 个元素开始查找</li><li>for (let j = i + 1; j &lt; arr.length; j++)</li><li>进行比较的时候，发现最小的数组元素，把当前元素索引号给 minIndex</li></ul><p>③：如果 minIndex 和 i 位置不一致，则交换变量</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token comment">// 选择排序算法</span></span>
<span class="line">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 1  [1, 2, 5, 4, 3]</span></span>
<span class="line"><span class="token comment">// 2  [1, 2, 5, 4, 3]</span></span>
<span class="line"><span class="token comment">// 3  [1, 2, 3, 4, 5]</span></span>
<span class="line"><span class="token comment">// 4  [1, 2, 3, 4, 5]</span></span>
<span class="line"><span class="token comment">// 1. 外层循环控制是几轮能够比较出来</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 最小值的索引号</span></span>
<span class="line">  <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 里层循环来查找最小值，并且记录最小值的索引号</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      minIndex <span class="token operator">=</span> j</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3. 交换变量  </span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span></span>
<span class="line">    arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>今日单词：</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',83)]))}const h=s(k,[["render",m],["__file","js03.html.vue"]]),f=JSON.parse('{"path":"/codenotes/ui/js/js03.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 循环嵌套 利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。 实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示： 基本语法： 例如： 记住，外层循环循环一次，里层循环循环全部 1.1 三角型 1.2 九九乘法表 样式...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/ui/js/js03.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:description","content":"1. 循环嵌套 利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。 实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示： 基本语法： 例如： 记住，外层循环循环一次，里层循环循环全部 1.1 三角型 1.2 九九乘法表 样式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ahzy\\",\\"url\\":\\"https://gitee.com/private_crh\\"}]}"]]},"headers":[{"level":2,"title":"1. 循环嵌套","slug":"_1-循环嵌套","link":"#_1-循环嵌套","children":[{"level":3,"title":"1.1 三角型","slug":"_1-1-三角型","link":"#_1-1-三角型","children":[]},{"level":3,"title":"1.2 九九乘法表","slug":"_1-2-九九乘法表","link":"#_1-2-九九乘法表","children":[]}]},{"level":2,"title":"2. 数组","slug":"_2-数组","link":"#_2-数组","children":[{"level":3,"title":"2.1 数组是什么？","slug":"_2-1-数组是什么","link":"#_2-1-数组是什么","children":[]},{"level":3,"title":"2.2 数组的基本使用","slug":"_2-2-数组的基本使用","link":"#_2-2-数组的基本使用","children":[{"level":4,"title":"2.2.1 定义数组","slug":"_2-2-1-定义数组","link":"#_2-2-1-定义数组","children":[]},{"level":4,"title":"2.2.2 访问数组和数组索引","slug":"_2-2-2-访问数组和数组索引","link":"#_2-2-2-访问数组和数组索引","children":[]},{"level":4,"title":"2.2.3 遍历数组","slug":"_2-2-3-遍历数组","link":"#_2-2-3-遍历数组","children":[]}]},{"level":3,"title":"2.3 操作数组","slug":"_2-3-操作数组","link":"#_2-3-操作数组","children":[{"level":4,"title":"2.3.1 查询和修改数组","slug":"_2-3-1-查询和修改数组","link":"#_2-3-1-查询和修改数组","children":[]},{"level":4,"title":"2.3.2 新增","slug":"_2-3-2-新增","link":"#_2-3-2-新增","children":[]},{"level":4,"title":"2.3.3 删除","slug":"_2-3-3-删除","link":"#_2-3-3-删除","children":[]},{"level":4,"title":"2.3.4 数组 splice方法","slug":"_2-3-4-数组-splice方法","link":"#_2-3-4-数组-splice方法","children":[]}]}]},{"level":2,"title":"3. 拓展知识","slug":"_3-拓展知识","link":"#_3-拓展知识","children":[{"level":3,"title":"3.1 数组排序sort","slug":"_3-1-数组排序sort","link":"#_3-1-数组排序sort","children":[]},{"level":3,"title":"3.2 选择排序（了解）","slug":"_3-2-选择排序-了解","link":"#_3-2-选择排序-了解","children":[]}]}],"git":{},"readingTime":{"minutes":8.31,"words":2493},"filePathRelative":"codenotes/ui/js/js03.md","excerpt":"<h2>1. 循环嵌套</h2>\\n<p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p>\\n<figure><figcaption></figcaption></figure>\\n<p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p>\\n<p>基本语法：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">for</span>（初始化<span class=\\"token punctuation\\">;</span> 循环条件<span class=\\"token punctuation\\">;</span>变量计数） <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>初始化<span class=\\"token punctuation\\">;</span> 循环条件；变量计数）<span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">//  要重复执行的代码</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,f as data};
