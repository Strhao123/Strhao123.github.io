import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-eWV4nnR8.js";const l="/assets/1671017800406-StlJivql.png",t="/assets/1671017843443-B87uaN4B.png",c="/assets/1671017924981-xh_WBy2J.png",i="/assets/1671018401624-Cwiu4uGL.png",o="/assets/1673588353868-DzXmnTyv.png",u={};function r(d,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="_1-类型转换" tabindex="-1"><a class="header-anchor" href="#_1-类型转换"><span>1. 类型转换</span></a></h2><p>类型转换：把一种数据类型转换成另外一种数据类型</p><p><strong>为什么需要类型转换呢？</strong></p><p>例如：使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算</p><p>此时需要转换数据类型</p><p>数据类型转换可以分为： 显示转换和隐式转换</p><h3 id="_1-1-显示转换" tabindex="-1"><a class="header-anchor" href="#_1-1-显示转换"><span>1.1 显示转换</span></a></h3><p>自己手动写代码告诉系统该转成什么类型（数据类型明确、程序员主导）</p><h4 id="_1-1-1-转换为数字型" tabindex="-1"><a class="header-anchor" href="#_1-1-1-转换为数字型"><span>1.1.1 转换为数字型</span></a></h4><ol><li>Number(数据) <ul><li>转换成功返回一个数字类型</li><li>转换失败则返回 NaN (例如数据里面包含非数字）</li></ul></li><li>parseInt(数据) <ul><li>只保留整数</li><li>如果数字开头的字符串，只保留整数数字 比如 12px 返回 12</li></ul></li><li>parseFloat(数据) <ul><li>可以保留小数</li><li>如果数字开头的字符串，可以保留小数 比如 12.5px 返回 12.5</li></ul></li></ol><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 第一个数字</span></span>
<span class="line"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入第一个月工资:&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 第二个数字</span></span>
<span class="line"><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入第二个月工资:&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//  输出结果</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 通过显示转换的方式把其他类型转换为数字型</span></span>
<span class="line"><span class="token comment">// 1. Number() 最常用的一种方式 推荐 </span></span>
<span class="line"><span class="token comment">// 1.1 把字符串转换为数字型</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1   number</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN 如果无法完成转换则返回NaN </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.2 把布尔值转换为数字型 true false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.3 把 null undefined 转换为数字型</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. parseInt() 和 parseFloat() 固定使用场景的   100px 只要100 不要px </span></span>
<span class="line"><span class="token comment">// 使用场景：把以数字开头的字符串，只保留数字这种情况下就可以使用 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;100.5px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100  parseInt() 只保留整数</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;100.5px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100.5 parseFloat() 可以返回小数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_1-1-2-转换为字符串和布尔型" tabindex="-1"><a class="header-anchor" href="#_1-1-2-转换为字符串和布尔型"><span>1.1.2 转换为字符串和布尔型</span></a></h4><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1. 转换为字符串类型 </span></span>
<span class="line"><span class="token comment">// 1.1 String(数据) 开发中提倡使用这种方式 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1&#39;     string</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;true&#39;     string</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.2 变量.toString(进制)</span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  string </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  string   &#39;10&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  string   &#39;12&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 转换为布尔型 Boolean  (重点) 因为接下来我们要学习分支语句需要用到</span></span>
<span class="line"><span class="token comment">// 2.1 有6种情况为false： false 0 &#39;&#39; null undefined NaN (无，没有)</span></span>
<span class="line"><span class="token comment">// 2.2 其余的都为true </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-2-隐式转换" tabindex="-1"><a class="header-anchor" href="#_1-2-隐式转换"><span>1.2 隐式转换</span></a></h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// // 第一个数字</span></span>
<span class="line"><span class="token comment">// let num1 = +prompt(&#39;请输入第一个月工资:&#39;)</span></span>
<span class="line"><span class="token comment">// // 第二个数字</span></span>
<span class="line"><span class="token comment">// let num2 = +prompt(&#39;请输入第二个月工资:&#39;)</span></span>
<span class="line"><span class="token comment">// //  输出结果</span></span>
<span class="line"><span class="token comment">// alert(num1 + num2)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 隐式转换为数字型的运算符</span></span>
<span class="line"><span class="token comment">// 1.1 算术运算符 - *  /   比较运算符  &gt;   ==</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 5</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1999&#39;</span> <span class="token operator">*</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">//  3998</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.2 + 正号使用的时候，也会把字符串转换为 数字型</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;123&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">+</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// number</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 隐式转换为字符串型的运算符   + 拼接字符串 两侧只要有一个是字符串，结果就是字符串</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pink&#39;</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;18&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 隐式转换为布尔型的运算符  ！逻辑非</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// false </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&#39;pink&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-语句" tabindex="-1"><a class="header-anchor" href="#_2-语句"><span>2. 语句</span></a></h2><h3 id="_2-1-表达式和语句" tabindex="-1"><a class="header-anchor" href="#_2-1-表达式和语句"><span>2.1 表达式和语句</span></a></h3><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-分支语句" tabindex="-1"><a class="header-anchor" href="#_2-2-分支语句"><span>2.2 分支语句</span></a></h3><p>分支语句可以根据条件判定真假，来选择性的执行想要的代码</p><p>分支语句包含：</p><ol><li>if分支语句（重点）</li><li>三元运算符</li><li>switch语句</li></ol><h4 id="_2-2-1-if-分支语句" tabindex="-1"><a class="header-anchor" href="#_2-2-1-if-分支语句"><span>2.2.1 if 分支语句</span></a></h4><p>语法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 满足条件要执行的语句</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为false，则不执行大括号里面代码</p><p>小括号内的结果若不是布尔类型时，会发生类型转换为布尔值，类似Boolean()</p><p>如果大括号只有一个语句，大括号可以省略，但是，俺们不提倡这么做~</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// if 分支语句 选择性的执行代码</span></span>
<span class="line"><span class="token comment">// 1. 语法规范</span></span>
<span class="line"><span class="token comment">// if (条件) {</span></span>
<span class="line"><span class="token comment">//   满足条件要执行的代码</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 体验</span></span>
<span class="line"><span class="token comment">// console.log(&#39;我想要被表扬&#39;)</span></span>
<span class="line"><span class="token comment">// if (false) {</span></span>
<span class="line"><span class="token comment">//   console.log(&#39;我想要被表扬&#39;)</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// if (3 &lt; 5) {</span></span>
<span class="line"><span class="token comment">//   console.log(&#39;我想要被表扬&#39;)</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 类型转换 类似于 Boolean()</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我想要被表扬&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 需求： 用户输入高考成绩，如果分数大于等于700分，则提示 &#39;恭喜考入黑马程序员&#39;</span></span>
<span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请您输入高考成绩:&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;恭喜您考入黑马程序员&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-2-if双分支语句" tabindex="-1"><a class="header-anchor" href="#_2-2-2-if双分支语句"><span>2.2.2 if双分支语句</span></a></h4><p>如果有两个条件的时候，可以使用 if else 双分支语句</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 满足条件要执行的语句</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 不满足条件要执行的语句</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// if 双分支语句</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例1： 考试成绩判断</span></span>
<span class="line"><span class="token comment">// 1. 如果成绩大于等于700分，提示 &#39;恭喜您，考入黑马程序员&#39;</span></span>
<span class="line"><span class="token comment">// 2. 否则则提示 &#39;非常抱歉，你没有考入黑马程序员，明年再战!&#39;</span></span>
<span class="line"><span class="token comment">// let score = +prompt(&#39;请您输入考试成绩:&#39;)</span></span>
<span class="line"><span class="token comment">// if (score &gt;= 700) {</span></span>
<span class="line"><span class="token comment">//   alert(&#39;恭喜您，考入黑马程序员&#39;)</span></span>
<span class="line"><span class="token comment">// } else {</span></span>
<span class="line"><span class="token comment">//   alert(&#39;非常抱歉，你没有考入黑马程序员，明年再战!&#39;)</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例2： 用户登录案例</span></span>
<span class="line"><span class="token comment">// 1. 如果用户名是刘德华并且密码是123456 则提示登录成功</span></span>
<span class="line"><span class="token comment">// 2. 否则则提示登录失败</span></span>
<span class="line"><span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请您输入用户名:&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> pwd <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请您输入密码:&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">===</span> <span class="token string">&#39;刘德华&#39;</span> <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">===</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功，欢迎回来~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;登录失败，您输入的用户名和密码错误~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-3-if-多分支语句" tabindex="-1"><a class="header-anchor" href="#_2-2-3-if-多分支语句"><span>2.2.3 if 多分支语句</span></a></h4><p>使用场景： 适合于有多个条件的时候</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// if 多分支语句</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例： 根据成绩输出评语</span></span>
<span class="line"><span class="token comment">// (1).成绩90以上是 优秀</span></span>
<span class="line"><span class="token comment">// (2).成绩70~90是  良好</span></span>
<span class="line"><span class="token comment">// (3).成绩是60~70之间是 及格</span></span>
<span class="line"><span class="token comment">// (4).成绩60分以下是 不及格</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 用户输入成绩</span></span>
<span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请您输入考试成绩:&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 根据成绩判断输出不同的结果</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;优秀，棒棒棒~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;良好，棒棒~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;及格，棒~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;不及格，好好加油，你可以的~&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 注意事项</span></span>
<span class="line"><span class="token comment">// 3.1 因为我们判断用的是大于等于，则里面的成绩要从大往小写</span></span>
<span class="line"><span class="token comment">// 3.2 else if 可以有任意多个， else 不是必须的</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-4-三元运算符-三元表达式" tabindex="-1"><a class="header-anchor" href="#_2-2-4-三元运算符-三元表达式"><span>2.2.4 三元运算符（三元表达式）</span></a></h4><p><strong>使用场景</strong>： 一些简单的双分支，可以使用 三元运算符（三元表达式），写起来比 if else双分支 更简单</p><p><strong>符号</strong>：? 与 : 配合使用</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">条件 <span class="token operator">?</span> 表达式<span class="token number">1</span> ： 表达式<span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 三元运算符（三元表达式）</span></span>
<span class="line"><span class="token comment">// 1. 语法格式</span></span>
<span class="line"><span class="token comment">// 条件 ? 表达式1 : 表达式2 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 执行过程 </span></span>
<span class="line"><span class="token comment">// 2.1 如果条件为真，则执行表达式1</span></span>
<span class="line"><span class="token comment">// 2.2 如果条件为假，则执行表达式2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 验证</span></span>
<span class="line"><span class="token comment">// 5 &gt; 3 ? &#39;真的&#39; : &#39;假的&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">&#39;真的&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;假的&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 练习  求2个数字的最大值</span></span>
<span class="line"><span class="token comment">// let x = 10</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-5-switch语句-了解" tabindex="-1"><a class="header-anchor" href="#_2-2-5-switch语句-了解"><span>2.2.5 switch语句（了解）</span></a></h4><p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同</p><p>注意：</p><ol><li>switch case语句一般用于等值判断, if适合于区间判断</li><li>switchcase一般需要配合break关键字使用 没有break会造成case穿透</li><li>if 多分支语句开发要比switch更重要，使用也更多</li></ol><p>例如：</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// switch分支语句</span></span>
<span class="line"><span class="token comment">// 1. 语法</span></span>
<span class="line"><span class="token comment">// switch (表达式) {</span></span>
<span class="line"><span class="token comment">//   case 值1:</span></span>
<span class="line"><span class="token comment">//     代码1</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//   case 值2:</span></span>
<span class="line"><span class="token comment">//     代码2</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"><span class="token comment">//   ...</span></span>
<span class="line"><span class="token comment">//   default:</span></span>
<span class="line"><span class="token comment">//     代码n</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 体验: 查询水果价格，输入水果，得到当前水果价格</span></span>
<span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token string">&#39;苹果&#39;</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&#39;香蕉&#39;</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;香蕉的价格是: 3元/斤&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;苹果&#39;</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;苹果的价格是: 4元/斤&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;橘子&#39;</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;橘子的价格是: 2元/斤&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;没有查到此水果&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 注意事项</span></span>
<span class="line"><span class="token comment">// 3.1  switch适合于等值判断， if多分支适合于区间判断</span></span>
<span class="line"><span class="token comment">// 3.2  表达式的值要求 全等于 === case的值，才是能匹配上</span></span>
<span class="line"><span class="token comment">// 3.3  break如果落下了，容易造成case穿透</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-6-断点调试" tabindex="-1"><a class="header-anchor" href="#_2-2-6-断点调试"><span>2.2.6 断点调试</span></a></h4><p>**作用：**学习时可以帮助更好的理解代码运行，工作时可以更快找到bug</p><p>浏览器打开调试界面</p><ol><li>按F12打开开发者工具</li><li>点到源代码一栏 （ sources ）</li><li>选择代码文件</li></ol><p>**断点：**在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-3-循环语句" tabindex="-1"><a class="header-anchor" href="#_2-3-循环语句"><span>2.3 循环语句</span></a></h3><p>使用场景：重复执行 指定的一段代码，比如我们想要输出10次 &#39;我学的很棒&#39;</p><p>学习路径：</p><p>1.while循环</p><p>2.for 循环（重点）</p><h4 id="_2-3-1-while循环" tabindex="-1"><a class="header-anchor" href="#_2-3-1-while循环"><span>2.3.1 while循环</span></a></h4><p>while : 在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。</p><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// 循环体    </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// while循环: 重复执行代码</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 需求: 利用循环重复打印3次 &#39;月薪过万不是梦，毕业时候见英雄&#39;</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;月薪过万不是梦，毕业时候见英雄~&lt;br&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  i<span class="token operator">++</span>   <span class="token comment">// 这里千万不要忘了变量自增否则造成死循环</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环三要素：</p><p>1.初始值 （经常用变量）</p><p>2.循环条件</p><p>3.变量计数（常用自增或者自减）</p><h4 id="_2-3-2-for-循环" tabindex="-1"><a class="header-anchor" href="#_2-3-2-for-循环"><span>2.3.2 for 循环</span></a></h4><p>作用：重复执行指定的一段代码</p><p>好处：把声明初始值、循环条件、变量计数写到一起，让人一目了然，它是最常使用的循环形式</p><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始值<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变量计数<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 满足条件执行的循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// for循环：重复执行一段代码</span></span>
<span class="line"><span class="token comment">// 1. 语法</span></span>
<span class="line"><span class="token comment">// for(初始值; 循环条件; 变量计数) {</span></span>
<span class="line"><span class="token comment">//   // 循环体</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 需求： 重复打印3次</span></span>
<span class="line"><span class="token comment">// &#39;月薪过万不是梦，毕业时候见英雄。键盘敲烂要行动，前端行业一览众&#39;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;键盘敲烂要行动，前端行业一览众~ &lt;br&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-3-3-中止循环" tabindex="-1"><a class="header-anchor" href="#_2-3-3-中止循环"><span>2.3.3 中止循环</span></a></h4><p><code>break</code> 中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）</p><p><code>continue</code> 中止本次循环，一般用于排除或者跳过某一个选项的时候</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 1.break中止整个for循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用</span></span>
<span class="line"><span class="token comment">// for (let i = 1; i &lt;= 6; i++) {</span></span>
<span class="line"><span class="token comment">//   document.write(\`我是第\${i}个孩子 &lt;br&gt;\`)</span></span>
<span class="line"><span class="token comment">//   if (i === 3) {</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"><span class="token comment">//   }</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.continue中止本次循环，一般用于排除或者跳过某一个选项的时候</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 先验票，再进入电影院</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">continue</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">个孩子可以进入电影院&lt;br&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-3-4-无限循环" tabindex="-1"><a class="header-anchor" href="#_2-3-4-无限循环"><span>2.3.4 无限循环</span></a></h4><p>1.while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p><p>2.for(;😉 也可以来构造“无限”循环，同样需要使用break退出循环。</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="js" data-title="js" style="--vp-collapsed-lines:10;"><pre><code><span class="line"><span class="token comment">// 无限循环  </span></span>
<span class="line"><span class="token comment">// 需求： 页面会一直弹窗询问你爱我吗？</span></span>
<span class="line"><span class="token comment">// (1). 如果用户输入的是 &#39;爱&#39;，则退出弹窗</span></span>
<span class="line"><span class="token comment">// (2). 否则一直弹窗询问</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. while(true) 无限循环</span></span>
<span class="line"><span class="token comment">// while (true) {</span></span>
<span class="line"><span class="token comment">//   let love = prompt(&#39;你爱我吗?&#39;)</span></span>
<span class="line"><span class="token comment">//   if (love === &#39;爱&#39;) {</span></span>
<span class="line"><span class="token comment">//     break</span></span>
<span class="line"><span class="token comment">//   }</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. for(;;) 无限循环</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> love <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;你爱我吗?&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>love <span class="token operator">===</span> <span class="token string">&#39;爱&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>今日重点单词：</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',91)]))}const v=s(u,[["render",r],["__file","js02.html.vue"]]),b=JSON.parse('{"path":"/codenotes/ui/js/js02.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 类型转换 类型转换：把一种数据类型转换成另外一种数据类型 为什么需要类型转换呢？ 例如：使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算 此时需要转换数据类型 数据类型转换可以分为： 显示转换和隐式转换 1.1 显示转换 自己手动写代码告诉系统该转成什么类型（数据类型明确、程序员主导） 1.1.1 转换为...","head":[["meta",{"property":"og:url","content":"https://hwchen.top/codenotes/ui/js/js02.html"}],["meta",{"property":"og:site_name","content":"Ahzy"}],["meta",{"property":"og:description","content":"1. 类型转换 类型转换：把一种数据类型转换成另外一种数据类型 为什么需要类型转换呢？ 例如：使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算 此时需要转换数据类型 数据类型转换可以分为： 显示转换和隐式转换 1.1 显示转换 自己手动写代码告诉系统该转成什么类型（数据类型明确、程序员主导） 1.1.1 转换为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ahzy\\",\\"url\\":\\"https://gitee.com/private_crh\\"}]}"]]},"headers":[{"level":2,"title":"1. 类型转换","slug":"_1-类型转换","link":"#_1-类型转换","children":[{"level":3,"title":"1.1 显示转换","slug":"_1-1-显示转换","link":"#_1-1-显示转换","children":[{"level":4,"title":"1.1.1 转换为数字型","slug":"_1-1-1-转换为数字型","link":"#_1-1-1-转换为数字型","children":[]},{"level":4,"title":"1.1.2 转换为字符串和布尔型","slug":"_1-1-2-转换为字符串和布尔型","link":"#_1-1-2-转换为字符串和布尔型","children":[]}]},{"level":3,"title":"1.2 隐式转换","slug":"_1-2-隐式转换","link":"#_1-2-隐式转换","children":[]}]},{"level":2,"title":"2. 语句","slug":"_2-语句","link":"#_2-语句","children":[{"level":3,"title":"2.1 表达式和语句","slug":"_2-1-表达式和语句","link":"#_2-1-表达式和语句","children":[]},{"level":3,"title":"2.2 分支语句","slug":"_2-2-分支语句","link":"#_2-2-分支语句","children":[{"level":4,"title":"2.2.1 if 分支语句","slug":"_2-2-1-if-分支语句","link":"#_2-2-1-if-分支语句","children":[]},{"level":4,"title":"2.2.2 if双分支语句","slug":"_2-2-2-if双分支语句","link":"#_2-2-2-if双分支语句","children":[]},{"level":4,"title":"2.2.3 if 多分支语句","slug":"_2-2-3-if-多分支语句","link":"#_2-2-3-if-多分支语句","children":[]},{"level":4,"title":"2.2.4 三元运算符（三元表达式）","slug":"_2-2-4-三元运算符-三元表达式","link":"#_2-2-4-三元运算符-三元表达式","children":[]},{"level":4,"title":"2.2.5 switch语句（了解）","slug":"_2-2-5-switch语句-了解","link":"#_2-2-5-switch语句-了解","children":[]},{"level":4,"title":"2.2.6 断点调试","slug":"_2-2-6-断点调试","link":"#_2-2-6-断点调试","children":[]}]},{"level":3,"title":"2.3 循环语句","slug":"_2-3-循环语句","link":"#_2-3-循环语句","children":[{"level":4,"title":"2.3.1 while循环","slug":"_2-3-1-while循环","link":"#_2-3-1-while循环","children":[]},{"level":4,"title":"2.3.2 for 循环","slug":"_2-3-2-for-循环","link":"#_2-3-2-for-循环","children":[]},{"level":4,"title":"2.3.3 中止循环","slug":"_2-3-3-中止循环","link":"#_2-3-3-中止循环","children":[]},{"level":4,"title":"2.3.4 无限循环","slug":"_2-3-4-无限循环","link":"#_2-3-4-无限循环","children":[]}]}]}],"git":{},"readingTime":{"minutes":10.19,"words":3057},"filePathRelative":"codenotes/ui/js/js02.md","excerpt":"<h2>1. 类型转换</h2>\\n<p>类型转换：把一种数据类型转换成另外一种数据类型</p>\\n<p><strong>为什么需要类型转换呢？</strong></p>\\n<p>例如：使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算</p>\\n<p>此时需要转换数据类型</p>\\n<p>数据类型转换可以分为： 显示转换和隐式转换</p>\\n<h3>1.1 显示转换</h3>\\n<p>自己手动写代码告诉系统该转成什么类型（数据类型明确、程序员主导）</p>\\n<h4>1.1.1 转换为数字型</h4>\\n<ol>\\n<li>Number(数据)\\n<ul>\\n<li>转换成功返回一个数字类型</li>\\n<li>转换失败则返回 NaN (例如数据里面包含非数字）</li>\\n</ul>\\n</li>\\n<li>parseInt(数据)\\n<ul>\\n<li>只保留整数</li>\\n<li>如果数字开头的字符串，只保留整数数字 比如 12px 返回 12</li>\\n</ul>\\n</li>\\n<li>parseFloat(数据)\\n<ul>\\n<li>可以保留小数</li>\\n<li>如果数字开头的字符串，可以保留小数 比如 12.5px 返回 12.5</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{v as comp,b as data};
